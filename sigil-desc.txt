Node#0
  Rules:
    program = . top_level_defs
    LA: {'__EOF__'}

    top_level_defs = . top_level_def
    LA: {'__EOF__'}

    top_level_defs = . top_level_def top_level_defs
    LA: {'__EOF__'}

    top_level_def = . func_definition
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'KW_DELETE', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    top_level_def = . class_definition
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'KW_DELETE', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    top_level_def = . enum_definition
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'KW_DELETE', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    top_level_def = . var_definition
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'KW_DELETE', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    func_definition = . access_modifier special_mod type NAME OPEN_PAREN func_arg_definitions CLOSE_PAREN body
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'KW_DELETE', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    func_definition = . access_modifier KW_INIT NAME OPEN_PAREN func_arg_definitions CLOSE_PAREN body
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'KW_DELETE', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    func_definition = . access_modifier KW_DELETE NAME OPEN_PAREN func_arg_definitions CLOSE_PAREN body
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'KW_DELETE', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    class_definition = . access_modifier KW_CLASS NAME OPEN_PAREN NAME CLOSE_PAREN class_body
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'KW_DELETE', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    class_definition = . access_modifier KW_CLASS NAME class_body
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'KW_DELETE', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    enum_definition = . access_modifier KW_ENUM NAME OPEN_CURLY enum_statements CLOSE_CURLY
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'KW_DELETE', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    var_definition = . access_modifier special_mod type NAME SEMICOLON
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'KW_DELETE', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    var_definition = . access_modifier special_mod type NAME OP_ASSIGN expression SEMICOLON
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'KW_DELETE', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    var_definition = . access_modifier special_mod NAME OP_ASSIGN expression SEMICOLON
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'KW_DELETE', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    access_modifier = . ACC_PUBLIC
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'KW_DELETE', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    access_modifier = . ACC_PRIVATE
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'KW_DELETE', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    access_modifier = . ACC_READONLY
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'KW_DELETE', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    access_modifier = . ACC_SHARED
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'KW_DELETE', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    access_modifier = .
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'KW_DELETE', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}


  Transitions:
    Symbol: top_level_defs -> Node#1
    Symbol: top_level_def -> Node#2
    Symbol: func_definition -> Node#3
    Symbol: class_definition -> Node#4
    Symbol: enum_definition -> Node#5
    Symbol: var_definition -> Node#6
    Symbol: access_modifier -> Node#7
    Symbol: ACC_PUBLIC -> Node#8
    Symbol: ACC_PRIVATE -> Node#9
    Symbol: ACC_READONLY -> Node#10
    Symbol: ACC_SHARED -> Node#11

Node#1
  Rules:
    program = top_level_defs .
    LA: {'__EOF__'}


Node#2
  Rules:
    top_level_defs = top_level_def .
    LA: {'__EOF__'}

    top_level_defs = top_level_def . top_level_defs
    LA: {'__EOF__'}

    top_level_defs = . top_level_def
    LA: {'__EOF__'}

    top_level_defs = . top_level_def top_level_defs
    LA: {'__EOF__'}

    top_level_def = . func_definition
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'KW_DELETE', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    top_level_def = . class_definition
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'KW_DELETE', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    top_level_def = . enum_definition
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'KW_DELETE', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    top_level_def = . var_definition
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'KW_DELETE', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    func_definition = . access_modifier special_mod type NAME OPEN_PAREN func_arg_definitions CLOSE_PAREN body
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'KW_DELETE', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    func_definition = . access_modifier KW_INIT NAME OPEN_PAREN func_arg_definitions CLOSE_PAREN body
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'KW_DELETE', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    func_definition = . access_modifier KW_DELETE NAME OPEN_PAREN func_arg_definitions CLOSE_PAREN body
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'KW_DELETE', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    class_definition = . access_modifier KW_CLASS NAME OPEN_PAREN NAME CLOSE_PAREN class_body
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'KW_DELETE', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    class_definition = . access_modifier KW_CLASS NAME class_body
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'KW_DELETE', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    enum_definition = . access_modifier KW_ENUM NAME OPEN_CURLY enum_statements CLOSE_CURLY
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'KW_DELETE', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    var_definition = . access_modifier special_mod type NAME SEMICOLON
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'KW_DELETE', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    var_definition = . access_modifier special_mod type NAME OP_ASSIGN expression SEMICOLON
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'KW_DELETE', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    var_definition = . access_modifier special_mod NAME OP_ASSIGN expression SEMICOLON
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'KW_DELETE', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    access_modifier = . ACC_PUBLIC
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'KW_DELETE', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    access_modifier = . ACC_PRIVATE
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'KW_DELETE', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    access_modifier = . ACC_READONLY
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'KW_DELETE', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    access_modifier = . ACC_SHARED
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'KW_DELETE', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    access_modifier = .
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'KW_DELETE', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}


  Transitions:
    Symbol: top_level_defs -> Node#12
    Symbol: top_level_def -> Node#2
    Symbol: func_definition -> Node#3
    Symbol: class_definition -> Node#4
    Symbol: enum_definition -> Node#5
    Symbol: var_definition -> Node#6
    Symbol: access_modifier -> Node#7
    Symbol: ACC_PUBLIC -> Node#8
    Symbol: ACC_PRIVATE -> Node#9
    Symbol: ACC_READONLY -> Node#10
    Symbol: ACC_SHARED -> Node#11

Node#3
  Rules:
    top_level_def = func_definition .
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'KW_DELETE', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}


Node#4
  Rules:
    top_level_def = class_definition .
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'KW_DELETE', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}


Node#5
  Rules:
    top_level_def = enum_definition .
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'KW_DELETE', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}


Node#6
  Rules:
    top_level_def = var_definition .
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'KW_DELETE', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}


Node#7
  Rules:
    func_definition = access_modifier . special_mod type NAME OPEN_PAREN func_arg_definitions CLOSE_PAREN body
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'KW_DELETE', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    func_definition = access_modifier . KW_INIT NAME OPEN_PAREN func_arg_definitions CLOSE_PAREN body
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'KW_DELETE', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    func_definition = access_modifier . KW_DELETE NAME OPEN_PAREN func_arg_definitions CLOSE_PAREN body
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'KW_DELETE', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    class_definition = access_modifier . KW_CLASS NAME OPEN_PAREN NAME CLOSE_PAREN class_body
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'KW_DELETE', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    class_definition = access_modifier . KW_CLASS NAME class_body
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'KW_DELETE', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    enum_definition = access_modifier . KW_ENUM NAME OPEN_CURLY enum_statements CLOSE_CURLY
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'KW_DELETE', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    var_definition = access_modifier . special_mod type NAME SEMICOLON
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'KW_DELETE', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    var_definition = access_modifier . special_mod type NAME OP_ASSIGN expression SEMICOLON
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'KW_DELETE', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    var_definition = access_modifier . special_mod NAME OP_ASSIGN expression SEMICOLON
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'KW_DELETE', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    special_mod = . KW_ABSTRACT
    LA: {'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'TYPE_STR', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    special_mod = . KW_STATIC
    LA: {'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'TYPE_STR', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    special_mod = .
    LA: {'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'TYPE_STR', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}


  Transitions:
    Symbol: special_mod -> Node#13
    Symbol: KW_INIT -> Node#14
    Symbol: KW_DELETE -> Node#15
    Symbol: KW_CLASS -> Node#16
    Symbol: KW_ENUM -> Node#17
    Symbol: KW_ABSTRACT -> Node#18
    Symbol: KW_STATIC -> Node#19

Node#8
  Rules:
    access_modifier = ACC_PUBLIC .
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'OPEN_CURLY', 'KW_CLASS', 'KW_DELETE', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}


Node#9
  Rules:
    access_modifier = ACC_PRIVATE .
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'OPEN_CURLY', 'KW_CLASS', 'KW_DELETE', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}


Node#10
  Rules:
    access_modifier = ACC_READONLY .
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'OPEN_CURLY', 'KW_CLASS', 'KW_DELETE', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}


Node#11
  Rules:
    access_modifier = ACC_SHARED .
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'OPEN_CURLY', 'KW_CLASS', 'KW_DELETE', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}


Node#12
  Rules:
    top_level_defs = top_level_def top_level_defs .
    LA: {'__EOF__'}


Node#13
  Rules:
    func_definition = access_modifier special_mod . type NAME OPEN_PAREN func_arg_definitions CLOSE_PAREN body
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'KW_DELETE', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    var_definition = access_modifier special_mod . type NAME SEMICOLON
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'KW_DELETE', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    var_definition = access_modifier special_mod . type NAME OP_ASSIGN expression SEMICOLON
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'KW_DELETE', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    var_definition = access_modifier special_mod . NAME OP_ASSIGN expression SEMICOLON
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'KW_DELETE', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    type = . TYPE_ARRAY OP_LT type OP_GT
    LA: {'NAME'}

    type = . TYPE_LIST OP_LT type OP_GT
    LA: {'NAME'}

    type = . TYPE_MAP OP_LT type COMMA type OP_GT
    LA: {'NAME'}

    type = . TYPE_SET OP_LT type OP_GT
    LA: {'NAME'}

    type = . TYPE_STR
    LA: {'NAME'}

    type = . TYPE_INT
    LA: {'NAME'}

    type = . TYPE_FLOAT
    LA: {'NAME'}

    type = . TYPE_BOOL
    LA: {'NAME'}

    type = . KW_NULL
    LA: {'NAME'}

    type = . NAME
    LA: {'NAME'}


  Transitions:
    Symbol: type -> Node#20
    Symbol: NAME -> Node#21
    Symbol: TYPE_ARRAY -> Node#22
    Symbol: TYPE_LIST -> Node#23
    Symbol: TYPE_MAP -> Node#24
    Symbol: TYPE_SET -> Node#25
    Symbol: TYPE_STR -> Node#26
    Symbol: TYPE_INT -> Node#27
    Symbol: TYPE_FLOAT -> Node#28
    Symbol: TYPE_BOOL -> Node#29
    Symbol: KW_NULL -> Node#30

Node#14
  Rules:
    func_definition = access_modifier KW_INIT . NAME OPEN_PAREN func_arg_definitions CLOSE_PAREN body
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'CLOSE_CURLY', 'NAME', 'OPEN_CURLY', 'KW_DELETE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'TYPE_MAP', 'TYPE_BOOL', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'ACC_READONLY', 'ACC_PRIVATE', 'KW_NULL'}


  Transitions:
    Symbol: NAME -> Node#31

Node#15
  Rules:
    func_definition = access_modifier KW_DELETE . NAME OPEN_PAREN func_arg_definitions CLOSE_PAREN body
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'CLOSE_CURLY', 'NAME', 'OPEN_CURLY', 'KW_DELETE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'TYPE_MAP', 'TYPE_BOOL', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'ACC_READONLY', 'ACC_PRIVATE', 'KW_NULL'}


  Transitions:
    Symbol: NAME -> Node#32

Node#16
  Rules:
    class_definition = access_modifier KW_CLASS . NAME OPEN_PAREN NAME CLOSE_PAREN class_body
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'KW_DELETE', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    class_definition = access_modifier KW_CLASS . NAME class_body
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'KW_DELETE', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}


  Transitions:
    Symbol: NAME -> Node#33

Node#17
  Rules:
    enum_definition = access_modifier KW_ENUM . NAME OPEN_CURLY enum_statements CLOSE_CURLY
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'KW_DELETE', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}


  Transitions:
    Symbol: NAME -> Node#34

Node#18
  Rules:
    special_mod = KW_ABSTRACT .
    LA: {'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'TYPE_STR', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'OPEN_CURLY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}


Node#19
  Rules:
    special_mod = KW_STATIC .
    LA: {'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'TYPE_STR', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'OPEN_CURLY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}


Node#20
  Rules:
    func_definition = access_modifier special_mod type . NAME OPEN_PAREN func_arg_definitions CLOSE_PAREN body
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'KW_DELETE', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    var_definition = access_modifier special_mod type . NAME SEMICOLON
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'KW_DELETE', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    var_definition = access_modifier special_mod type . NAME OP_ASSIGN expression SEMICOLON
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'KW_DELETE', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}


  Transitions:
    Symbol: NAME -> Node#35

Node#21
  Rules:
    var_definition = access_modifier special_mod NAME . OP_ASSIGN expression SEMICOLON
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'CLOSE_CURLY', 'NAME', 'KW_DELETE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'TYPE_MAP', 'TYPE_BOOL', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'ACC_READONLY', 'ACC_PRIVATE', 'KW_NULL'}

    type = NAME .
    LA: {'NAME'}


  Transitions:
    Symbol: OP_ASSIGN -> Node#36

Node#22
  Rules:
    type = TYPE_ARRAY . OP_LT type OP_GT
    LA: {'COMMA', 'NAME', 'OP_GT'}


  Transitions:
    Symbol: OP_LT -> Node#37

Node#23
  Rules:
    type = TYPE_LIST . OP_LT type OP_GT
    LA: {'COMMA', 'NAME', 'OP_GT'}


  Transitions:
    Symbol: OP_LT -> Node#38

Node#24
  Rules:
    type = TYPE_MAP . OP_LT type COMMA type OP_GT
    LA: {'COMMA', 'NAME', 'OP_GT'}


  Transitions:
    Symbol: OP_LT -> Node#39

Node#25
  Rules:
    type = TYPE_SET . OP_LT type OP_GT
    LA: {'COMMA', 'NAME', 'OP_GT'}


  Transitions:
    Symbol: OP_LT -> Node#40

Node#26
  Rules:
    type = TYPE_STR .
    LA: {'COMMA', 'NAME', 'OP_GT'}


Node#27
  Rules:
    type = TYPE_INT .
    LA: {'COMMA', 'NAME', 'OP_GT'}


Node#28
  Rules:
    type = TYPE_FLOAT .
    LA: {'COMMA', 'NAME', 'OP_GT'}


Node#29
  Rules:
    type = TYPE_BOOL .
    LA: {'COMMA', 'NAME', 'OP_GT'}


Node#30
  Rules:
    type = KW_NULL .
    LA: {'COMMA', 'NAME', 'OP_GT'}


Node#31
  Rules:
    func_definition = access_modifier KW_INIT NAME . OPEN_PAREN func_arg_definitions CLOSE_PAREN body
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'CLOSE_CURLY', 'NAME', 'OPEN_CURLY', 'KW_DELETE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'TYPE_MAP', 'TYPE_BOOL', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'ACC_READONLY', 'ACC_PRIVATE', 'KW_NULL'}


  Transitions:
    Symbol: OPEN_PAREN -> Node#41

Node#32
  Rules:
    func_definition = access_modifier KW_DELETE NAME . OPEN_PAREN func_arg_definitions CLOSE_PAREN body
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'CLOSE_CURLY', 'NAME', 'OPEN_CURLY', 'KW_DELETE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'TYPE_MAP', 'TYPE_BOOL', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'ACC_READONLY', 'ACC_PRIVATE', 'KW_NULL'}


  Transitions:
    Symbol: OPEN_PAREN -> Node#42

Node#33
  Rules:
    class_definition = access_modifier KW_CLASS NAME . OPEN_PAREN NAME CLOSE_PAREN class_body
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'KW_DELETE', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    class_definition = access_modifier KW_CLASS NAME . class_body
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'KW_DELETE', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    class_body = . OPEN_CURLY class_statements CLOSE_CURLY
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'KW_DELETE', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    class_body = . OPEN_CURLY CLOSE_CURLY
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'KW_DELETE', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}


  Transitions:
    Symbol: OPEN_PAREN -> Node#43
    Symbol: class_body -> Node#44
    Symbol: OPEN_CURLY -> Node#45

Node#34
  Rules:
    enum_definition = access_modifier KW_ENUM NAME . OPEN_CURLY enum_statements CLOSE_CURLY
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'KW_DELETE', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}


  Transitions:
    Symbol: OPEN_CURLY -> Node#46

Node#35
  Rules:
    func_definition = access_modifier special_mod type NAME . OPEN_PAREN func_arg_definitions CLOSE_PAREN body
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'KW_DELETE', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    var_definition = access_modifier special_mod type NAME . SEMICOLON
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'KW_DELETE', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    var_definition = access_modifier special_mod type NAME . OP_ASSIGN expression SEMICOLON
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'KW_DELETE', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}


  Transitions:
    Symbol: OPEN_PAREN -> Node#47
    Symbol: SEMICOLON -> Node#48
    Symbol: OP_ASSIGN -> Node#49

Node#36
  Rules:
    var_definition = access_modifier special_mod NAME OP_ASSIGN . expression SEMICOLON
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'CLOSE_CURLY', 'NAME', 'KW_DELETE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'TYPE_MAP', 'TYPE_BOOL', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'ACC_READONLY', 'ACC_PRIVATE', 'KW_NULL'}

    expression = . expression KW_OR log_and_expr
    LA: {'KW_OR', 'SEMICOLON'}

    expression = . log_and_expr
    LA: {'KW_OR', 'SEMICOLON'}

    log_and_expr = . log_and_expr KW_AND bit_or_expr
    LA: {'KW_OR', 'SEMICOLON', 'KW_AND'}

    log_and_expr = . bit_or_expr
    LA: {'KW_OR', 'SEMICOLON', 'KW_AND'}

    bit_or_expr = . bit_or_expr OP_BIT_OR bit_xor_expr
    LA: {'KW_OR', 'SEMICOLON', 'OP_BIT_OR', 'KW_AND'}

    bit_or_expr = . bit_xor_expr
    LA: {'KW_OR', 'SEMICOLON', 'OP_BIT_OR', 'KW_AND'}

    bit_xor_expr = . bit_xor_expr OP_BIT_XOR bit_and_expr
    LA: {'KW_OR', 'OP_BIT_OR', 'KW_AND', 'SEMICOLON', 'OP_BIT_XOR'}

    bit_xor_expr = . bit_and_expr
    LA: {'KW_OR', 'OP_BIT_OR', 'KW_AND', 'SEMICOLON', 'OP_BIT_XOR'}

    bit_and_expr = . bit_and_expr OP_BIT_AND equ_expr
    LA: {'KW_OR', 'OP_BIT_OR', 'OP_BIT_AND', 'KW_AND', 'SEMICOLON', 'OP_BIT_XOR'}

    bit_and_expr = . equ_expr
    LA: {'KW_OR', 'OP_BIT_OR', 'OP_BIT_AND', 'KW_AND', 'SEMICOLON', 'OP_BIT_XOR'}

    equ_expr = . equ_expr OP_EQ comp_expr
    LA: {'OP_NEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_BIT_AND', 'KW_AND', 'SEMICOLON', 'OP_BIT_XOR'}

    equ_expr = . equ_expr OP_NEQ comp_expr
    LA: {'OP_NEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_BIT_AND', 'KW_AND', 'SEMICOLON', 'OP_BIT_XOR'}

    equ_expr = . comp_expr
    LA: {'OP_NEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_BIT_AND', 'KW_AND', 'SEMICOLON', 'OP_BIT_XOR'}

    comp_expr = . comp_expr OP_LT math_expr
    LA: {'OP_BIT_AND', 'KW_AND', 'SEMICOLON', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    comp_expr = . comp_expr OP_LTEQ math_expr
    LA: {'OP_BIT_AND', 'KW_AND', 'SEMICOLON', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    comp_expr = . comp_expr OP_GT math_expr
    LA: {'OP_BIT_AND', 'KW_AND', 'SEMICOLON', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    comp_expr = . comp_expr OP_GTEQ math_expr
    LA: {'OP_BIT_AND', 'KW_AND', 'SEMICOLON', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    comp_expr = . math_expr
    LA: {'OP_BIT_AND', 'KW_AND', 'SEMICOLON', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    math_expr = . math_expr OP_PLUS term
    LA: {'OP_BIT_AND', 'OP_PLUS', 'KW_AND', 'SEMICOLON', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'OP_MINUS', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    math_expr = . math_expr OP_MINUS term
    LA: {'OP_BIT_AND', 'OP_PLUS', 'KW_AND', 'SEMICOLON', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'OP_MINUS', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    math_expr = . term
    LA: {'OP_BIT_AND', 'OP_PLUS', 'KW_AND', 'SEMICOLON', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'OP_MINUS', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    term = . term OP_STAR factor
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    term = . term OP_SLASH factor
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    term = . term OP_MOD factor
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    term = . factor
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    factor = . factor OP_POW pow_term
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    factor = . pow_term
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    pow_term = . OP_MINUS inc_term
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    pow_term = . KW_NOT inc_term
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    pow_term = . inc_term
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . OP_INC bottom_val
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . bottom_val OP_INC
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . OP_DEC bottom_val
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . bottom_val OP_DEC
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . bottom_val
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    bottom_val = . bottom_val OPEN_PAREN expr_list CLOSE_PAREN
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . bottom_val OPEN_PAREN CLOSE_PAREN
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . bottom_val OP_DOT name
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . bottom_val OPEN_SQUARE expression CLOSE_SQUARE
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . comprehension
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . literal
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . name
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . OPEN_PAREN expression CLOSE_PAREN
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    comprehension = . OPEN_SQUARE linear_comprehension CLOSE_SQUARE
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    comprehension = . OPEN_CURLY linear_comprehension CLOSE_CURLY
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression CLOSE_CURLY
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression KW_IF expression CLOSE_CURLY
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . LIT_INT
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . LIT_FLOAT
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . lit_set
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . lit_string
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . lit_list
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . lit_map
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . KW_NULL
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    name = . NAME
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    lit_set = . OPEN_CURLY expr_list CLOSE_CURLY
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    lit_string = . DOUBLE_QUOTE_STR
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    lit_string = . SINGLE_QUOTE_STR
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    lit_list = . OPEN_SQUARE expr_list CLOSE_SQUARE
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    lit_map = . OPEN_CURLY map_list CLOSE_CURLY
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}


  Transitions:
    Symbol: expression -> Node#50
    Symbol: log_and_expr -> Node#51
    Symbol: bit_or_expr -> Node#52
    Symbol: bit_xor_expr -> Node#53
    Symbol: bit_and_expr -> Node#54
    Symbol: equ_expr -> Node#55
    Symbol: comp_expr -> Node#56
    Symbol: math_expr -> Node#57
    Symbol: term -> Node#58
    Symbol: factor -> Node#59
    Symbol: pow_term -> Node#60
    Symbol: OP_MINUS -> Node#61
    Symbol: KW_NOT -> Node#62
    Symbol: inc_term -> Node#63
    Symbol: OP_INC -> Node#64
    Symbol: bottom_val -> Node#65
    Symbol: OP_DEC -> Node#66
    Symbol: comprehension -> Node#67
    Symbol: literal -> Node#68
    Symbol: name -> Node#69
    Symbol: OPEN_PAREN -> Node#70
    Symbol: OPEN_SQUARE -> Node#71
    Symbol: OPEN_CURLY -> Node#72
    Symbol: LIT_INT -> Node#73
    Symbol: LIT_FLOAT -> Node#74
    Symbol: lit_set -> Node#75
    Symbol: lit_string -> Node#76
    Symbol: lit_list -> Node#77
    Symbol: lit_map -> Node#78
    Symbol: KW_NULL -> Node#79
    Symbol: NAME -> Node#80
    Symbol: DOUBLE_QUOTE_STR -> Node#81
    Symbol: SINGLE_QUOTE_STR -> Node#82

Node#37
  Rules:
    type = TYPE_ARRAY OP_LT . type OP_GT
    LA: {'COMMA', 'NAME', 'OP_GT'}

    type = . TYPE_ARRAY OP_LT type OP_GT
    LA: {'OP_GT'}

    type = . TYPE_LIST OP_LT type OP_GT
    LA: {'OP_GT'}

    type = . TYPE_MAP OP_LT type COMMA type OP_GT
    LA: {'OP_GT'}

    type = . TYPE_SET OP_LT type OP_GT
    LA: {'OP_GT'}

    type = . TYPE_STR
    LA: {'OP_GT'}

    type = . TYPE_INT
    LA: {'OP_GT'}

    type = . TYPE_FLOAT
    LA: {'OP_GT'}

    type = . TYPE_BOOL
    LA: {'OP_GT'}

    type = . KW_NULL
    LA: {'OP_GT'}

    type = . NAME
    LA: {'OP_GT'}


  Transitions:
    Symbol: type -> Node#83
    Symbol: TYPE_ARRAY -> Node#22
    Symbol: TYPE_LIST -> Node#23
    Symbol: TYPE_MAP -> Node#24
    Symbol: TYPE_SET -> Node#25
    Symbol: TYPE_STR -> Node#26
    Symbol: TYPE_INT -> Node#27
    Symbol: TYPE_FLOAT -> Node#28
    Symbol: TYPE_BOOL -> Node#29
    Symbol: KW_NULL -> Node#30
    Symbol: NAME -> Node#84

Node#38
  Rules:
    type = TYPE_LIST OP_LT . type OP_GT
    LA: {'COMMA', 'NAME', 'OP_GT'}

    type = . TYPE_ARRAY OP_LT type OP_GT
    LA: {'OP_GT'}

    type = . TYPE_LIST OP_LT type OP_GT
    LA: {'OP_GT'}

    type = . TYPE_MAP OP_LT type COMMA type OP_GT
    LA: {'OP_GT'}

    type = . TYPE_SET OP_LT type OP_GT
    LA: {'OP_GT'}

    type = . TYPE_STR
    LA: {'OP_GT'}

    type = . TYPE_INT
    LA: {'OP_GT'}

    type = . TYPE_FLOAT
    LA: {'OP_GT'}

    type = . TYPE_BOOL
    LA: {'OP_GT'}

    type = . KW_NULL
    LA: {'OP_GT'}

    type = . NAME
    LA: {'OP_GT'}


  Transitions:
    Symbol: type -> Node#85
    Symbol: TYPE_ARRAY -> Node#22
    Symbol: TYPE_LIST -> Node#23
    Symbol: TYPE_MAP -> Node#24
    Symbol: TYPE_SET -> Node#25
    Symbol: TYPE_STR -> Node#26
    Symbol: TYPE_INT -> Node#27
    Symbol: TYPE_FLOAT -> Node#28
    Symbol: TYPE_BOOL -> Node#29
    Symbol: KW_NULL -> Node#30
    Symbol: NAME -> Node#84

Node#39
  Rules:
    type = TYPE_MAP OP_LT . type COMMA type OP_GT
    LA: {'COMMA', 'NAME', 'OP_GT'}

    type = . TYPE_ARRAY OP_LT type OP_GT
    LA: {'COMMA'}

    type = . TYPE_LIST OP_LT type OP_GT
    LA: {'COMMA'}

    type = . TYPE_MAP OP_LT type COMMA type OP_GT
    LA: {'COMMA'}

    type = . TYPE_SET OP_LT type OP_GT
    LA: {'COMMA'}

    type = . TYPE_STR
    LA: {'COMMA'}

    type = . TYPE_INT
    LA: {'COMMA'}

    type = . TYPE_FLOAT
    LA: {'COMMA'}

    type = . TYPE_BOOL
    LA: {'COMMA'}

    type = . KW_NULL
    LA: {'COMMA'}

    type = . NAME
    LA: {'COMMA'}


  Transitions:
    Symbol: type -> Node#86
    Symbol: TYPE_ARRAY -> Node#22
    Symbol: TYPE_LIST -> Node#23
    Symbol: TYPE_MAP -> Node#24
    Symbol: TYPE_SET -> Node#25
    Symbol: TYPE_STR -> Node#26
    Symbol: TYPE_INT -> Node#27
    Symbol: TYPE_FLOAT -> Node#28
    Symbol: TYPE_BOOL -> Node#29
    Symbol: KW_NULL -> Node#30
    Symbol: NAME -> Node#84

Node#40
  Rules:
    type = TYPE_SET OP_LT . type OP_GT
    LA: {'COMMA', 'NAME', 'OP_GT'}

    type = . TYPE_ARRAY OP_LT type OP_GT
    LA: {'OP_GT'}

    type = . TYPE_LIST OP_LT type OP_GT
    LA: {'OP_GT'}

    type = . TYPE_MAP OP_LT type COMMA type OP_GT
    LA: {'OP_GT'}

    type = . TYPE_SET OP_LT type OP_GT
    LA: {'OP_GT'}

    type = . TYPE_STR
    LA: {'OP_GT'}

    type = . TYPE_INT
    LA: {'OP_GT'}

    type = . TYPE_FLOAT
    LA: {'OP_GT'}

    type = . TYPE_BOOL
    LA: {'OP_GT'}

    type = . KW_NULL
    LA: {'OP_GT'}

    type = . NAME
    LA: {'OP_GT'}


  Transitions:
    Symbol: type -> Node#87
    Symbol: TYPE_ARRAY -> Node#22
    Symbol: TYPE_LIST -> Node#23
    Symbol: TYPE_MAP -> Node#24
    Symbol: TYPE_SET -> Node#25
    Symbol: TYPE_STR -> Node#26
    Symbol: TYPE_INT -> Node#27
    Symbol: TYPE_FLOAT -> Node#28
    Symbol: TYPE_BOOL -> Node#29
    Symbol: KW_NULL -> Node#30
    Symbol: NAME -> Node#84

Node#41
  Rules:
    func_definition = access_modifier KW_INIT NAME OPEN_PAREN . func_arg_definitions CLOSE_PAREN body
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'CLOSE_CURLY', 'NAME', 'OPEN_CURLY', 'KW_DELETE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'TYPE_MAP', 'TYPE_BOOL', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'ACC_READONLY', 'ACC_PRIVATE', 'KW_NULL'}

    func_arg_definitions = . func_arg_def_list
    LA: {'CLOSE_PAREN'}

    func_arg_definitions = .
    LA: {'CLOSE_PAREN'}

    func_arg_def_list = . func_arg_def
    LA: {'CLOSE_PAREN'}

    func_arg_def_list = . func_arg_def COMMA func_arg_def_list
    LA: {'CLOSE_PAREN'}

    func_arg_def = . type NAME OP_ASSIGN expression
    LA: {'CLOSE_PAREN', 'COMMA'}

    func_arg_def = . type NAME
    LA: {'CLOSE_PAREN', 'COMMA'}

    type = . TYPE_ARRAY OP_LT type OP_GT
    LA: {'NAME'}

    type = . TYPE_LIST OP_LT type OP_GT
    LA: {'NAME'}

    type = . TYPE_MAP OP_LT type COMMA type OP_GT
    LA: {'NAME'}

    type = . TYPE_SET OP_LT type OP_GT
    LA: {'NAME'}

    type = . TYPE_STR
    LA: {'NAME'}

    type = . TYPE_INT
    LA: {'NAME'}

    type = . TYPE_FLOAT
    LA: {'NAME'}

    type = . TYPE_BOOL
    LA: {'NAME'}

    type = . KW_NULL
    LA: {'NAME'}

    type = . NAME
    LA: {'NAME'}


  Transitions:
    Symbol: func_arg_definitions -> Node#88
    Symbol: func_arg_def_list -> Node#89
    Symbol: func_arg_def -> Node#90
    Symbol: type -> Node#91
    Symbol: TYPE_ARRAY -> Node#22
    Symbol: TYPE_LIST -> Node#23
    Symbol: TYPE_MAP -> Node#24
    Symbol: TYPE_SET -> Node#25
    Symbol: TYPE_STR -> Node#26
    Symbol: TYPE_INT -> Node#27
    Symbol: TYPE_FLOAT -> Node#28
    Symbol: TYPE_BOOL -> Node#29
    Symbol: KW_NULL -> Node#30
    Symbol: NAME -> Node#84

Node#42
  Rules:
    func_definition = access_modifier KW_DELETE NAME OPEN_PAREN . func_arg_definitions CLOSE_PAREN body
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'CLOSE_CURLY', 'NAME', 'OPEN_CURLY', 'KW_DELETE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'TYPE_MAP', 'TYPE_BOOL', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'ACC_READONLY', 'ACC_PRIVATE', 'KW_NULL'}

    func_arg_definitions = . func_arg_def_list
    LA: {'CLOSE_PAREN'}

    func_arg_definitions = .
    LA: {'CLOSE_PAREN'}

    func_arg_def_list = . func_arg_def
    LA: {'CLOSE_PAREN'}

    func_arg_def_list = . func_arg_def COMMA func_arg_def_list
    LA: {'CLOSE_PAREN'}

    func_arg_def = . type NAME OP_ASSIGN expression
    LA: {'CLOSE_PAREN', 'COMMA'}

    func_arg_def = . type NAME
    LA: {'CLOSE_PAREN', 'COMMA'}

    type = . TYPE_ARRAY OP_LT type OP_GT
    LA: {'NAME'}

    type = . TYPE_LIST OP_LT type OP_GT
    LA: {'NAME'}

    type = . TYPE_MAP OP_LT type COMMA type OP_GT
    LA: {'NAME'}

    type = . TYPE_SET OP_LT type OP_GT
    LA: {'NAME'}

    type = . TYPE_STR
    LA: {'NAME'}

    type = . TYPE_INT
    LA: {'NAME'}

    type = . TYPE_FLOAT
    LA: {'NAME'}

    type = . TYPE_BOOL
    LA: {'NAME'}

    type = . KW_NULL
    LA: {'NAME'}

    type = . NAME
    LA: {'NAME'}


  Transitions:
    Symbol: func_arg_definitions -> Node#92
    Symbol: func_arg_def_list -> Node#89
    Symbol: func_arg_def -> Node#90
    Symbol: type -> Node#91
    Symbol: TYPE_ARRAY -> Node#22
    Symbol: TYPE_LIST -> Node#23
    Symbol: TYPE_MAP -> Node#24
    Symbol: TYPE_SET -> Node#25
    Symbol: TYPE_STR -> Node#26
    Symbol: TYPE_INT -> Node#27
    Symbol: TYPE_FLOAT -> Node#28
    Symbol: TYPE_BOOL -> Node#29
    Symbol: KW_NULL -> Node#30
    Symbol: NAME -> Node#84

Node#43
  Rules:
    class_definition = access_modifier KW_CLASS NAME OPEN_PAREN . NAME CLOSE_PAREN class_body
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'KW_DELETE', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}


  Transitions:
    Symbol: NAME -> Node#93

Node#44
  Rules:
    class_definition = access_modifier KW_CLASS NAME class_body .
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'KW_DELETE', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}


Node#45
  Rules:
    class_body = OPEN_CURLY . class_statements CLOSE_CURLY
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'KW_DELETE', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    class_body = OPEN_CURLY . CLOSE_CURLY
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'KW_DELETE', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    class_statements = . class_statement
    LA: {'CLOSE_CURLY'}

    class_statements = . class_statement class_statements
    LA: {'CLOSE_CURLY'}

    class_statement = . access_modifier special_mod OPEN_CURLY var_def_list CLOSE_CURLY
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'CLOSE_CURLY', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'OPEN_CURLY', 'ACC_PUBLIC', 'KW_DELETE', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    class_statement = . func_definition
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'CLOSE_CURLY', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'OPEN_CURLY', 'ACC_PUBLIC', 'KW_DELETE', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    access_modifier = . ACC_PUBLIC
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_DELETE', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'OPEN_CURLY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    access_modifier = . ACC_PRIVATE
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_DELETE', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'OPEN_CURLY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    access_modifier = . ACC_READONLY
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_DELETE', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'OPEN_CURLY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    access_modifier = . ACC_SHARED
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_DELETE', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'OPEN_CURLY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    access_modifier = .
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_DELETE', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'OPEN_CURLY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    func_definition = . access_modifier special_mod type NAME OPEN_PAREN func_arg_definitions CLOSE_PAREN body
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'CLOSE_CURLY', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'OPEN_CURLY', 'ACC_PUBLIC', 'KW_DELETE', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    func_definition = . access_modifier KW_INIT NAME OPEN_PAREN func_arg_definitions CLOSE_PAREN body
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'CLOSE_CURLY', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'OPEN_CURLY', 'ACC_PUBLIC', 'KW_DELETE', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    func_definition = . access_modifier KW_DELETE NAME OPEN_PAREN func_arg_definitions CLOSE_PAREN body
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'CLOSE_CURLY', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'OPEN_CURLY', 'ACC_PUBLIC', 'KW_DELETE', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}


  Transitions:
    Symbol: class_statements -> Node#94
    Symbol: CLOSE_CURLY -> Node#95
    Symbol: class_statement -> Node#96
    Symbol: access_modifier -> Node#97
    Symbol: func_definition -> Node#98
    Symbol: ACC_PUBLIC -> Node#8
    Symbol: ACC_PRIVATE -> Node#9
    Symbol: ACC_READONLY -> Node#10
    Symbol: ACC_SHARED -> Node#11

Node#46
  Rules:
    enum_definition = access_modifier KW_ENUM NAME OPEN_CURLY . enum_statements CLOSE_CURLY
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'KW_DELETE', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    enum_statements = . enum_statement
    LA: {'CLOSE_CURLY'}

    enum_statements = . enum_statement enum_statements
    LA: {'CLOSE_CURLY'}

    enum_statement = . NAME SEMICOLON
    LA: {'CLOSE_CURLY', 'NAME'}

    enum_statement = . NAME OP_ASSIGN LIT_INT SEMICOLON
    LA: {'CLOSE_CURLY', 'NAME'}


  Transitions:
    Symbol: enum_statements -> Node#99
    Symbol: enum_statement -> Node#100
    Symbol: NAME -> Node#101

Node#47
  Rules:
    func_definition = access_modifier special_mod type NAME OPEN_PAREN . func_arg_definitions CLOSE_PAREN body
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'CLOSE_CURLY', 'NAME', 'OPEN_CURLY', 'KW_DELETE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'TYPE_MAP', 'TYPE_BOOL', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'ACC_READONLY', 'ACC_PRIVATE', 'KW_NULL'}

    func_arg_definitions = . func_arg_def_list
    LA: {'CLOSE_PAREN'}

    func_arg_definitions = .
    LA: {'CLOSE_PAREN'}

    func_arg_def_list = . func_arg_def
    LA: {'CLOSE_PAREN'}

    func_arg_def_list = . func_arg_def COMMA func_arg_def_list
    LA: {'CLOSE_PAREN'}

    func_arg_def = . type NAME OP_ASSIGN expression
    LA: {'CLOSE_PAREN', 'COMMA'}

    func_arg_def = . type NAME
    LA: {'CLOSE_PAREN', 'COMMA'}

    type = . TYPE_ARRAY OP_LT type OP_GT
    LA: {'NAME'}

    type = . TYPE_LIST OP_LT type OP_GT
    LA: {'NAME'}

    type = . TYPE_MAP OP_LT type COMMA type OP_GT
    LA: {'NAME'}

    type = . TYPE_SET OP_LT type OP_GT
    LA: {'NAME'}

    type = . TYPE_STR
    LA: {'NAME'}

    type = . TYPE_INT
    LA: {'NAME'}

    type = . TYPE_FLOAT
    LA: {'NAME'}

    type = . TYPE_BOOL
    LA: {'NAME'}

    type = . KW_NULL
    LA: {'NAME'}

    type = . NAME
    LA: {'NAME'}


  Transitions:
    Symbol: func_arg_definitions -> Node#102
    Symbol: func_arg_def_list -> Node#89
    Symbol: func_arg_def -> Node#90
    Symbol: type -> Node#91
    Symbol: TYPE_ARRAY -> Node#22
    Symbol: TYPE_LIST -> Node#23
    Symbol: TYPE_MAP -> Node#24
    Symbol: TYPE_SET -> Node#25
    Symbol: TYPE_STR -> Node#26
    Symbol: TYPE_INT -> Node#27
    Symbol: TYPE_FLOAT -> Node#28
    Symbol: TYPE_BOOL -> Node#29
    Symbol: KW_NULL -> Node#30
    Symbol: NAME -> Node#84

Node#48
  Rules:
    var_definition = access_modifier special_mod type NAME SEMICOLON .
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'CLOSE_CURLY', 'NAME', 'KW_DELETE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'TYPE_MAP', 'TYPE_BOOL', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'ACC_READONLY', 'ACC_PRIVATE', 'KW_NULL'}


Node#49
  Rules:
    var_definition = access_modifier special_mod type NAME OP_ASSIGN . expression SEMICOLON
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'CLOSE_CURLY', 'NAME', 'KW_DELETE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'TYPE_MAP', 'TYPE_BOOL', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'ACC_READONLY', 'ACC_PRIVATE', 'KW_NULL'}

    expression = . expression KW_OR log_and_expr
    LA: {'KW_OR', 'SEMICOLON'}

    expression = . log_and_expr
    LA: {'KW_OR', 'SEMICOLON'}

    log_and_expr = . log_and_expr KW_AND bit_or_expr
    LA: {'KW_OR', 'SEMICOLON', 'KW_AND'}

    log_and_expr = . bit_or_expr
    LA: {'KW_OR', 'SEMICOLON', 'KW_AND'}

    bit_or_expr = . bit_or_expr OP_BIT_OR bit_xor_expr
    LA: {'KW_OR', 'SEMICOLON', 'OP_BIT_OR', 'KW_AND'}

    bit_or_expr = . bit_xor_expr
    LA: {'KW_OR', 'SEMICOLON', 'OP_BIT_OR', 'KW_AND'}

    bit_xor_expr = . bit_xor_expr OP_BIT_XOR bit_and_expr
    LA: {'KW_OR', 'OP_BIT_OR', 'KW_AND', 'SEMICOLON', 'OP_BIT_XOR'}

    bit_xor_expr = . bit_and_expr
    LA: {'KW_OR', 'OP_BIT_OR', 'KW_AND', 'SEMICOLON', 'OP_BIT_XOR'}

    bit_and_expr = . bit_and_expr OP_BIT_AND equ_expr
    LA: {'KW_OR', 'OP_BIT_OR', 'OP_BIT_AND', 'KW_AND', 'SEMICOLON', 'OP_BIT_XOR'}

    bit_and_expr = . equ_expr
    LA: {'KW_OR', 'OP_BIT_OR', 'OP_BIT_AND', 'KW_AND', 'SEMICOLON', 'OP_BIT_XOR'}

    equ_expr = . equ_expr OP_EQ comp_expr
    LA: {'OP_NEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_BIT_AND', 'KW_AND', 'SEMICOLON', 'OP_BIT_XOR'}

    equ_expr = . equ_expr OP_NEQ comp_expr
    LA: {'OP_NEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_BIT_AND', 'KW_AND', 'SEMICOLON', 'OP_BIT_XOR'}

    equ_expr = . comp_expr
    LA: {'OP_NEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_BIT_AND', 'KW_AND', 'SEMICOLON', 'OP_BIT_XOR'}

    comp_expr = . comp_expr OP_LT math_expr
    LA: {'OP_BIT_AND', 'KW_AND', 'SEMICOLON', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    comp_expr = . comp_expr OP_LTEQ math_expr
    LA: {'OP_BIT_AND', 'KW_AND', 'SEMICOLON', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    comp_expr = . comp_expr OP_GT math_expr
    LA: {'OP_BIT_AND', 'KW_AND', 'SEMICOLON', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    comp_expr = . comp_expr OP_GTEQ math_expr
    LA: {'OP_BIT_AND', 'KW_AND', 'SEMICOLON', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    comp_expr = . math_expr
    LA: {'OP_BIT_AND', 'KW_AND', 'SEMICOLON', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    math_expr = . math_expr OP_PLUS term
    LA: {'OP_BIT_AND', 'OP_PLUS', 'KW_AND', 'SEMICOLON', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'OP_MINUS', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    math_expr = . math_expr OP_MINUS term
    LA: {'OP_BIT_AND', 'OP_PLUS', 'KW_AND', 'SEMICOLON', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'OP_MINUS', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    math_expr = . term
    LA: {'OP_BIT_AND', 'OP_PLUS', 'KW_AND', 'SEMICOLON', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'OP_MINUS', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    term = . term OP_STAR factor
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    term = . term OP_SLASH factor
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    term = . term OP_MOD factor
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    term = . factor
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    factor = . factor OP_POW pow_term
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    factor = . pow_term
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    pow_term = . OP_MINUS inc_term
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    pow_term = . KW_NOT inc_term
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    pow_term = . inc_term
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . OP_INC bottom_val
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . bottom_val OP_INC
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . OP_DEC bottom_val
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . bottom_val OP_DEC
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . bottom_val
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    bottom_val = . bottom_val OPEN_PAREN expr_list CLOSE_PAREN
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . bottom_val OPEN_PAREN CLOSE_PAREN
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . bottom_val OP_DOT name
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . bottom_val OPEN_SQUARE expression CLOSE_SQUARE
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . comprehension
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . literal
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . name
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . OPEN_PAREN expression CLOSE_PAREN
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    comprehension = . OPEN_SQUARE linear_comprehension CLOSE_SQUARE
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    comprehension = . OPEN_CURLY linear_comprehension CLOSE_CURLY
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression CLOSE_CURLY
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression KW_IF expression CLOSE_CURLY
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . LIT_INT
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . LIT_FLOAT
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . lit_set
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . lit_string
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . lit_list
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . lit_map
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . KW_NULL
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    name = . NAME
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    lit_set = . OPEN_CURLY expr_list CLOSE_CURLY
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    lit_string = . DOUBLE_QUOTE_STR
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    lit_string = . SINGLE_QUOTE_STR
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    lit_list = . OPEN_SQUARE expr_list CLOSE_SQUARE
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    lit_map = . OPEN_CURLY map_list CLOSE_CURLY
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}


  Transitions:
    Symbol: expression -> Node#103
    Symbol: log_and_expr -> Node#51
    Symbol: bit_or_expr -> Node#52
    Symbol: bit_xor_expr -> Node#53
    Symbol: bit_and_expr -> Node#54
    Symbol: equ_expr -> Node#55
    Symbol: comp_expr -> Node#56
    Symbol: math_expr -> Node#57
    Symbol: term -> Node#58
    Symbol: factor -> Node#59
    Symbol: pow_term -> Node#60
    Symbol: OP_MINUS -> Node#61
    Symbol: KW_NOT -> Node#62
    Symbol: inc_term -> Node#63
    Symbol: OP_INC -> Node#64
    Symbol: bottom_val -> Node#65
    Symbol: OP_DEC -> Node#66
    Symbol: comprehension -> Node#67
    Symbol: literal -> Node#68
    Symbol: name -> Node#69
    Symbol: OPEN_PAREN -> Node#70
    Symbol: OPEN_SQUARE -> Node#71
    Symbol: OPEN_CURLY -> Node#72
    Symbol: LIT_INT -> Node#73
    Symbol: LIT_FLOAT -> Node#74
    Symbol: lit_set -> Node#75
    Symbol: lit_string -> Node#76
    Symbol: lit_list -> Node#77
    Symbol: lit_map -> Node#78
    Symbol: KW_NULL -> Node#79
    Symbol: NAME -> Node#80
    Symbol: DOUBLE_QUOTE_STR -> Node#81
    Symbol: SINGLE_QUOTE_STR -> Node#82

Node#50
  Rules:
    var_definition = access_modifier special_mod NAME OP_ASSIGN expression . SEMICOLON
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'CLOSE_CURLY', 'NAME', 'KW_DELETE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'TYPE_MAP', 'TYPE_BOOL', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'ACC_READONLY', 'ACC_PRIVATE', 'KW_NULL'}

    expression = expression . KW_OR log_and_expr
    LA: {'KW_OR', 'SEMICOLON'}


  Transitions:
    Symbol: SEMICOLON -> Node#104
    Symbol: KW_OR -> Node#105

Node#51
  Rules:
    expression = log_and_expr .
    LA: {'CLOSE_CURLY', 'COLON', 'CLOSE_PAREN', 'KW_TO', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'KW_OR', 'OPEN_CURLY', 'KW_IF', 'COMMA', 'KW_ELSE'}

    log_and_expr = log_and_expr . KW_AND bit_or_expr
    LA: {'CLOSE_CURLY', 'COLON', 'CLOSE_PAREN', 'KW_TO', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_AND', 'KW_FOR', 'KW_OR', 'OPEN_CURLY', 'KW_IF', 'COMMA', 'KW_ELSE'}


  Transitions:
    Symbol: KW_AND -> Node#106

Node#52
  Rules:
    log_and_expr = bit_or_expr .
    LA: {'CLOSE_CURLY', 'COLON', 'CLOSE_PAREN', 'KW_TO', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_AND', 'KW_FOR', 'KW_OR', 'OPEN_CURLY', 'KW_IF', 'COMMA', 'KW_ELSE'}

    bit_or_expr = bit_or_expr . OP_BIT_OR bit_xor_expr
    LA: {'CLOSE_CURLY', 'COLON', 'CLOSE_PAREN', 'KW_TO', 'SEMICOLON', 'KW_AND', 'CLOSE_SQUARE', 'KW_FOR', 'KW_OR', 'OP_BIT_OR', 'OPEN_CURLY', 'KW_IF', 'COMMA', 'KW_ELSE'}


  Transitions:
    Symbol: OP_BIT_OR -> Node#107

Node#53
  Rules:
    bit_or_expr = bit_xor_expr .
    LA: {'CLOSE_CURLY', 'COLON', 'CLOSE_PAREN', 'KW_TO', 'SEMICOLON', 'KW_AND', 'CLOSE_SQUARE', 'KW_FOR', 'KW_OR', 'OP_BIT_OR', 'OPEN_CURLY', 'KW_IF', 'COMMA', 'KW_ELSE'}

    bit_xor_expr = bit_xor_expr . OP_BIT_XOR bit_and_expr
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'KW_IF', 'KW_ELSE', 'KW_TO', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA'}


  Transitions:
    Symbol: OP_BIT_XOR -> Node#108

Node#54
  Rules:
    bit_xor_expr = bit_and_expr .
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'KW_IF', 'KW_ELSE', 'KW_TO', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA'}

    bit_and_expr = bit_and_expr . OP_BIT_AND equ_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'KW_IF', 'KW_ELSE', 'KW_TO', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA'}


  Transitions:
    Symbol: OP_BIT_AND -> Node#109

Node#55
  Rules:
    bit_and_expr = equ_expr .
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'KW_IF', 'KW_ELSE', 'KW_TO', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA'}

    equ_expr = equ_expr . OP_EQ comp_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'KW_ELSE', 'KW_TO', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA'}

    equ_expr = equ_expr . OP_NEQ comp_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'KW_ELSE', 'KW_TO', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA'}


  Transitions:
    Symbol: OP_EQ -> Node#110
    Symbol: OP_NEQ -> Node#111

Node#56
  Rules:
    equ_expr = comp_expr .
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'KW_ELSE', 'KW_TO', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA'}

    comp_expr = comp_expr . OP_LT math_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'KW_IF', 'KW_ELSE', 'KW_TO', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_LT'}

    comp_expr = comp_expr . OP_LTEQ math_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'KW_IF', 'KW_ELSE', 'KW_TO', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_LT'}

    comp_expr = comp_expr . OP_GT math_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'KW_IF', 'KW_ELSE', 'KW_TO', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_LT'}

    comp_expr = comp_expr . OP_GTEQ math_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'KW_IF', 'KW_ELSE', 'KW_TO', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_LT'}


  Transitions:
    Symbol: OP_LT -> Node#112
    Symbol: OP_LTEQ -> Node#113
    Symbol: OP_GT -> Node#114
    Symbol: OP_GTEQ -> Node#115

Node#57
  Rules:
    comp_expr = math_expr .
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'KW_IF', 'KW_ELSE', 'KW_TO', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_LT'}

    math_expr = math_expr . OP_PLUS term
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'OP_NEQ', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'KW_TO', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'COMMA', 'OP_LT'}

    math_expr = math_expr . OP_MINUS term
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'OP_NEQ', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'KW_TO', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'COMMA', 'OP_LT'}


  Transitions:
    Symbol: OP_PLUS -> Node#116
    Symbol: OP_MINUS -> Node#117

Node#58
  Rules:
    math_expr = term .
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'OP_NEQ', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'KW_TO', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'COMMA', 'OP_LT'}

    term = term . OP_STAR factor
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    term = term . OP_SLASH factor
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    term = term . OP_MOD factor
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}


  Transitions:
    Symbol: OP_STAR -> Node#118
    Symbol: OP_SLASH -> Node#119
    Symbol: OP_MOD -> Node#120

Node#59
  Rules:
    term = factor .
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    factor = factor . OP_POW pow_term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}


  Transitions:
    Symbol: OP_POW -> Node#121

Node#60
  Rules:
    factor = pow_term .
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}


Node#61
  Rules:
    pow_term = OP_MINUS . inc_term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = . OP_INC bottom_val
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = . bottom_val OP_INC
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = . OP_DEC bottom_val
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = . bottom_val OP_DEC
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = . bottom_val
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . bottom_val OPEN_PAREN expr_list CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . bottom_val OPEN_PAREN CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . bottom_val OP_DOT name
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . bottom_val OPEN_SQUARE expression CLOSE_SQUARE
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . comprehension
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . literal
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . name
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . OPEN_PAREN expression CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    comprehension = . OPEN_SQUARE linear_comprehension CLOSE_SQUARE
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    comprehension = . OPEN_CURLY linear_comprehension CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression KW_IF expression CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . LIT_INT
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . LIT_FLOAT
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . lit_set
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . lit_string
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . lit_list
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . lit_map
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . KW_NULL
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    name = . NAME
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_set = . OPEN_CURLY expr_list CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_string = . DOUBLE_QUOTE_STR
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_string = . SINGLE_QUOTE_STR
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_list = . OPEN_SQUARE expr_list CLOSE_SQUARE
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_map = . OPEN_CURLY map_list CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}


  Transitions:
    Symbol: inc_term -> Node#122
    Symbol: OP_INC -> Node#64
    Symbol: bottom_val -> Node#65
    Symbol: OP_DEC -> Node#66
    Symbol: comprehension -> Node#67
    Symbol: literal -> Node#68
    Symbol: name -> Node#69
    Symbol: OPEN_PAREN -> Node#70
    Symbol: OPEN_SQUARE -> Node#71
    Symbol: OPEN_CURLY -> Node#72
    Symbol: LIT_INT -> Node#73
    Symbol: LIT_FLOAT -> Node#74
    Symbol: lit_set -> Node#75
    Symbol: lit_string -> Node#76
    Symbol: lit_list -> Node#77
    Symbol: lit_map -> Node#78
    Symbol: KW_NULL -> Node#79
    Symbol: NAME -> Node#80
    Symbol: DOUBLE_QUOTE_STR -> Node#81
    Symbol: SINGLE_QUOTE_STR -> Node#82

Node#62
  Rules:
    pow_term = KW_NOT . inc_term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = . OP_INC bottom_val
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = . bottom_val OP_INC
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = . OP_DEC bottom_val
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = . bottom_val OP_DEC
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = . bottom_val
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . bottom_val OPEN_PAREN expr_list CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . bottom_val OPEN_PAREN CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . bottom_val OP_DOT name
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . bottom_val OPEN_SQUARE expression CLOSE_SQUARE
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . comprehension
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . literal
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . name
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . OPEN_PAREN expression CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    comprehension = . OPEN_SQUARE linear_comprehension CLOSE_SQUARE
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    comprehension = . OPEN_CURLY linear_comprehension CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression KW_IF expression CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . LIT_INT
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . LIT_FLOAT
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . lit_set
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . lit_string
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . lit_list
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . lit_map
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . KW_NULL
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    name = . NAME
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_set = . OPEN_CURLY expr_list CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_string = . DOUBLE_QUOTE_STR
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_string = . SINGLE_QUOTE_STR
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_list = . OPEN_SQUARE expr_list CLOSE_SQUARE
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_map = . OPEN_CURLY map_list CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}


  Transitions:
    Symbol: inc_term -> Node#123
    Symbol: OP_INC -> Node#64
    Symbol: bottom_val -> Node#65
    Symbol: OP_DEC -> Node#66
    Symbol: comprehension -> Node#67
    Symbol: literal -> Node#68
    Symbol: name -> Node#69
    Symbol: OPEN_PAREN -> Node#70
    Symbol: OPEN_SQUARE -> Node#71
    Symbol: OPEN_CURLY -> Node#72
    Symbol: LIT_INT -> Node#73
    Symbol: LIT_FLOAT -> Node#74
    Symbol: lit_set -> Node#75
    Symbol: lit_string -> Node#76
    Symbol: lit_list -> Node#77
    Symbol: lit_map -> Node#78
    Symbol: KW_NULL -> Node#79
    Symbol: NAME -> Node#80
    Symbol: DOUBLE_QUOTE_STR -> Node#81
    Symbol: SINGLE_QUOTE_STR -> Node#82

Node#63
  Rules:
    pow_term = inc_term .
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}


Node#64
  Rules:
    inc_term = OP_INC . bottom_val
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . bottom_val OPEN_PAREN expr_list CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . bottom_val OPEN_PAREN CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . bottom_val OP_DOT name
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . bottom_val OPEN_SQUARE expression CLOSE_SQUARE
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . comprehension
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . literal
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . name
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . OPEN_PAREN expression CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    comprehension = . OPEN_SQUARE linear_comprehension CLOSE_SQUARE
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    comprehension = . OPEN_CURLY linear_comprehension CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression KW_IF expression CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . LIT_INT
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . LIT_FLOAT
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . lit_set
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . lit_string
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . lit_list
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . lit_map
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . KW_NULL
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    name = . NAME
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_set = . OPEN_CURLY expr_list CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_string = . DOUBLE_QUOTE_STR
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_string = . SINGLE_QUOTE_STR
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_list = . OPEN_SQUARE expr_list CLOSE_SQUARE
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_map = . OPEN_CURLY map_list CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}


  Transitions:
    Symbol: bottom_val -> Node#124
    Symbol: comprehension -> Node#67
    Symbol: literal -> Node#68
    Symbol: name -> Node#69
    Symbol: OPEN_PAREN -> Node#70
    Symbol: OPEN_SQUARE -> Node#71
    Symbol: OPEN_CURLY -> Node#72
    Symbol: LIT_INT -> Node#73
    Symbol: LIT_FLOAT -> Node#74
    Symbol: lit_set -> Node#75
    Symbol: lit_string -> Node#76
    Symbol: lit_list -> Node#77
    Symbol: lit_map -> Node#78
    Symbol: KW_NULL -> Node#79
    Symbol: NAME -> Node#80
    Symbol: DOUBLE_QUOTE_STR -> Node#81
    Symbol: SINGLE_QUOTE_STR -> Node#82

Node#65
  Rules:
    inc_term = bottom_val . OP_INC
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = bottom_val . OP_DEC
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = bottom_val .
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = bottom_val . OPEN_PAREN expr_list CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = bottom_val . OPEN_PAREN CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = bottom_val . OP_DOT name
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = bottom_val . OPEN_SQUARE expression CLOSE_SQUARE
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}


  Transitions:
    Symbol: OP_INC -> Node#125
    Symbol: OP_DEC -> Node#126
    Symbol: OPEN_PAREN -> Node#127
    Symbol: OP_DOT -> Node#128
    Symbol: OPEN_SQUARE -> Node#129

Node#66
  Rules:
    inc_term = OP_DEC . bottom_val
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . bottom_val OPEN_PAREN expr_list CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . bottom_val OPEN_PAREN CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . bottom_val OP_DOT name
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . bottom_val OPEN_SQUARE expression CLOSE_SQUARE
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . comprehension
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . literal
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . name
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . OPEN_PAREN expression CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    comprehension = . OPEN_SQUARE linear_comprehension CLOSE_SQUARE
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    comprehension = . OPEN_CURLY linear_comprehension CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression KW_IF expression CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . LIT_INT
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . LIT_FLOAT
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . lit_set
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . lit_string
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . lit_list
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . lit_map
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . KW_NULL
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    name = . NAME
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_set = . OPEN_CURLY expr_list CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_string = . DOUBLE_QUOTE_STR
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_string = . SINGLE_QUOTE_STR
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_list = . OPEN_SQUARE expr_list CLOSE_SQUARE
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_map = . OPEN_CURLY map_list CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}


  Transitions:
    Symbol: bottom_val -> Node#130
    Symbol: comprehension -> Node#67
    Symbol: literal -> Node#68
    Symbol: name -> Node#69
    Symbol: OPEN_PAREN -> Node#70
    Symbol: OPEN_SQUARE -> Node#71
    Symbol: OPEN_CURLY -> Node#72
    Symbol: LIT_INT -> Node#73
    Symbol: LIT_FLOAT -> Node#74
    Symbol: lit_set -> Node#75
    Symbol: lit_string -> Node#76
    Symbol: lit_list -> Node#77
    Symbol: lit_map -> Node#78
    Symbol: KW_NULL -> Node#79
    Symbol: NAME -> Node#80
    Symbol: DOUBLE_QUOTE_STR -> Node#81
    Symbol: SINGLE_QUOTE_STR -> Node#82

Node#67
  Rules:
    bottom_val = comprehension .
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'OP_ASSIGN', 'KW_ELSE', 'OP_AND_ASSIGN', 'CLOSE_PAREN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_NEQ', 'OP_OR_ASSIGN', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS', 'OP_SUB_ASSIGN'}


Node#68
  Rules:
    bottom_val = literal .
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'OP_ASSIGN', 'KW_ELSE', 'OP_AND_ASSIGN', 'CLOSE_PAREN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_NEQ', 'OP_OR_ASSIGN', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS', 'OP_SUB_ASSIGN'}


Node#69
  Rules:
    bottom_val = name .
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'OP_ASSIGN', 'KW_ELSE', 'OP_AND_ASSIGN', 'CLOSE_PAREN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_NEQ', 'OP_OR_ASSIGN', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS', 'OP_SUB_ASSIGN'}


Node#70
  Rules:
    bottom_val = OPEN_PAREN . expression CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'OP_ASSIGN', 'KW_ELSE', 'OP_AND_ASSIGN', 'CLOSE_PAREN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_NEQ', 'OP_OR_ASSIGN', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS', 'OP_SUB_ASSIGN'}

    expression = . expression KW_OR log_and_expr
    LA: {'CLOSE_PAREN', 'KW_OR'}

    expression = . log_and_expr
    LA: {'CLOSE_PAREN', 'KW_OR'}

    log_and_expr = . log_and_expr KW_AND bit_or_expr
    LA: {'CLOSE_PAREN', 'KW_OR', 'KW_AND'}

    log_and_expr = . bit_or_expr
    LA: {'CLOSE_PAREN', 'KW_OR', 'KW_AND'}

    bit_or_expr = . bit_or_expr OP_BIT_OR bit_xor_expr
    LA: {'CLOSE_PAREN', 'KW_OR', 'OP_BIT_OR', 'KW_AND'}

    bit_or_expr = . bit_xor_expr
    LA: {'CLOSE_PAREN', 'KW_OR', 'OP_BIT_OR', 'KW_AND'}

    bit_xor_expr = . bit_xor_expr OP_BIT_XOR bit_and_expr
    LA: {'KW_OR', 'OP_BIT_OR', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR'}

    bit_xor_expr = . bit_and_expr
    LA: {'KW_OR', 'OP_BIT_OR', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR'}

    bit_and_expr = . bit_and_expr OP_BIT_AND equ_expr
    LA: {'KW_OR', 'OP_BIT_OR', 'OP_BIT_AND', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR'}

    bit_and_expr = . equ_expr
    LA: {'KW_OR', 'OP_BIT_OR', 'OP_BIT_AND', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR'}

    equ_expr = . equ_expr OP_EQ comp_expr
    LA: {'OP_NEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_BIT_AND', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR'}

    equ_expr = . equ_expr OP_NEQ comp_expr
    LA: {'OP_NEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_BIT_AND', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR'}

    equ_expr = . comp_expr
    LA: {'OP_NEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_BIT_AND', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR'}

    comp_expr = . comp_expr OP_LT math_expr
    LA: {'OP_BIT_AND', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    comp_expr = . comp_expr OP_LTEQ math_expr
    LA: {'OP_BIT_AND', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    comp_expr = . comp_expr OP_GT math_expr
    LA: {'OP_BIT_AND', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    comp_expr = . comp_expr OP_GTEQ math_expr
    LA: {'OP_BIT_AND', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    comp_expr = . math_expr
    LA: {'OP_BIT_AND', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    math_expr = . math_expr OP_PLUS term
    LA: {'OP_BIT_AND', 'CLOSE_PAREN', 'OP_PLUS', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_MINUS', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    math_expr = . math_expr OP_MINUS term
    LA: {'OP_BIT_AND', 'CLOSE_PAREN', 'OP_PLUS', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_MINUS', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    math_expr = . term
    LA: {'OP_BIT_AND', 'CLOSE_PAREN', 'OP_PLUS', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_MINUS', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    term = . term OP_STAR factor
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    term = . term OP_SLASH factor
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    term = . term OP_MOD factor
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    term = . factor
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    factor = . factor OP_POW pow_term
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    factor = . pow_term
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    pow_term = . OP_MINUS inc_term
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    pow_term = . KW_NOT inc_term
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    pow_term = . inc_term
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . OP_INC bottom_val
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . bottom_val OP_INC
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . OP_DEC bottom_val
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . bottom_val OP_DEC
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . bottom_val
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    bottom_val = . bottom_val OPEN_PAREN expr_list CLOSE_PAREN
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . bottom_val OPEN_PAREN CLOSE_PAREN
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . bottom_val OP_DOT name
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . bottom_val OPEN_SQUARE expression CLOSE_SQUARE
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . comprehension
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . literal
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . name
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . OPEN_PAREN expression CLOSE_PAREN
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    comprehension = . OPEN_SQUARE linear_comprehension CLOSE_SQUARE
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    comprehension = . OPEN_CURLY linear_comprehension CLOSE_CURLY
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression CLOSE_CURLY
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression KW_IF expression CLOSE_CURLY
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . LIT_INT
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . LIT_FLOAT
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . lit_set
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . lit_string
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . lit_list
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . lit_map
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . KW_NULL
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    name = . NAME
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    lit_set = . OPEN_CURLY expr_list CLOSE_CURLY
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    lit_string = . DOUBLE_QUOTE_STR
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    lit_string = . SINGLE_QUOTE_STR
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    lit_list = . OPEN_SQUARE expr_list CLOSE_SQUARE
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    lit_map = . OPEN_CURLY map_list CLOSE_CURLY
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}


  Transitions:
    Symbol: expression -> Node#131
    Symbol: log_and_expr -> Node#51
    Symbol: bit_or_expr -> Node#52
    Symbol: bit_xor_expr -> Node#53
    Symbol: bit_and_expr -> Node#54
    Symbol: equ_expr -> Node#55
    Symbol: comp_expr -> Node#56
    Symbol: math_expr -> Node#57
    Symbol: term -> Node#58
    Symbol: factor -> Node#59
    Symbol: pow_term -> Node#60
    Symbol: OP_MINUS -> Node#61
    Symbol: KW_NOT -> Node#62
    Symbol: inc_term -> Node#63
    Symbol: OP_INC -> Node#64
    Symbol: bottom_val -> Node#65
    Symbol: OP_DEC -> Node#66
    Symbol: comprehension -> Node#67
    Symbol: literal -> Node#68
    Symbol: name -> Node#69
    Symbol: OPEN_PAREN -> Node#70
    Symbol: OPEN_SQUARE -> Node#71
    Symbol: OPEN_CURLY -> Node#72
    Symbol: LIT_INT -> Node#73
    Symbol: LIT_FLOAT -> Node#74
    Symbol: lit_set -> Node#75
    Symbol: lit_string -> Node#76
    Symbol: lit_list -> Node#77
    Symbol: lit_map -> Node#78
    Symbol: KW_NULL -> Node#79
    Symbol: NAME -> Node#80
    Symbol: DOUBLE_QUOTE_STR -> Node#81
    Symbol: SINGLE_QUOTE_STR -> Node#82

Node#71
  Rules:
    comprehension = OPEN_SQUARE . linear_comprehension CLOSE_SQUARE
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'OP_ASSIGN', 'KW_ELSE', 'OP_AND_ASSIGN', 'CLOSE_PAREN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_NEQ', 'OP_OR_ASSIGN', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS', 'OP_SUB_ASSIGN'}

    lit_list = OPEN_SQUARE . expr_list CLOSE_SQUARE
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'OP_ASSIGN', 'KW_ELSE', 'OP_AND_ASSIGN', 'CLOSE_PAREN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_NEQ', 'OP_OR_ASSIGN', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS', 'OP_SUB_ASSIGN'}

    linear_comprehension = . expression KW_FOR name KW_IN expression
    LA: {'CLOSE_SQUARE'}

    linear_comprehension = . expression KW_FOR name KW_IN expression KW_IF expression
    LA: {'CLOSE_SQUARE'}

    expr_list = . expression
    LA: {'CLOSE_SQUARE'}

    expr_list = . expression COMMA expr_list
    LA: {'CLOSE_SQUARE'}

    expression = . expression KW_OR log_and_expr
    LA: {'COMMA', 'KW_FOR', 'KW_OR', 'CLOSE_SQUARE'}

    expression = . log_and_expr
    LA: {'COMMA', 'KW_FOR', 'KW_OR', 'CLOSE_SQUARE'}

    log_and_expr = . log_and_expr KW_AND bit_or_expr
    LA: {'KW_FOR', 'KW_OR', 'COMMA', 'KW_AND', 'CLOSE_SQUARE'}

    log_and_expr = . bit_or_expr
    LA: {'KW_FOR', 'KW_OR', 'COMMA', 'KW_AND', 'CLOSE_SQUARE'}

    bit_or_expr = . bit_or_expr OP_BIT_OR bit_xor_expr
    LA: {'KW_FOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'KW_AND', 'CLOSE_SQUARE'}

    bit_or_expr = . bit_xor_expr
    LA: {'KW_FOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'KW_AND', 'CLOSE_SQUARE'}

    bit_xor_expr = . bit_xor_expr OP_BIT_XOR bit_and_expr
    LA: {'KW_FOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'KW_AND', 'CLOSE_SQUARE', 'OP_BIT_XOR'}

    bit_xor_expr = . bit_and_expr
    LA: {'KW_FOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'KW_AND', 'CLOSE_SQUARE', 'OP_BIT_XOR'}

    bit_and_expr = . bit_and_expr OP_BIT_AND equ_expr
    LA: {'KW_FOR', 'KW_OR', 'OP_BIT_OR', 'OP_BIT_AND', 'COMMA', 'KW_AND', 'CLOSE_SQUARE', 'OP_BIT_XOR'}

    bit_and_expr = . equ_expr
    LA: {'KW_FOR', 'KW_OR', 'OP_BIT_OR', 'OP_BIT_AND', 'COMMA', 'KW_AND', 'CLOSE_SQUARE', 'OP_BIT_XOR'}

    equ_expr = . equ_expr OP_EQ comp_expr
    LA: {'OP_BIT_AND', 'KW_AND', 'CLOSE_SQUARE', 'OP_BIT_XOR', 'OP_NEQ', 'KW_FOR', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'COMMA'}

    equ_expr = . equ_expr OP_NEQ comp_expr
    LA: {'OP_BIT_AND', 'KW_AND', 'CLOSE_SQUARE', 'OP_BIT_XOR', 'OP_NEQ', 'KW_FOR', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'COMMA'}

    equ_expr = . comp_expr
    LA: {'OP_BIT_AND', 'KW_AND', 'CLOSE_SQUARE', 'OP_BIT_XOR', 'OP_NEQ', 'KW_FOR', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'COMMA'}

    comp_expr = . comp_expr OP_LT math_expr
    LA: {'OP_BIT_AND', 'KW_AND', 'CLOSE_SQUARE', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'OP_NEQ', 'KW_FOR', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'COMMA', 'OP_LT'}

    comp_expr = . comp_expr OP_LTEQ math_expr
    LA: {'OP_BIT_AND', 'KW_AND', 'CLOSE_SQUARE', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'OP_NEQ', 'KW_FOR', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'COMMA', 'OP_LT'}

    comp_expr = . comp_expr OP_GT math_expr
    LA: {'OP_BIT_AND', 'KW_AND', 'CLOSE_SQUARE', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'OP_NEQ', 'KW_FOR', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'COMMA', 'OP_LT'}

    comp_expr = . comp_expr OP_GTEQ math_expr
    LA: {'OP_BIT_AND', 'KW_AND', 'CLOSE_SQUARE', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'OP_NEQ', 'KW_FOR', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'COMMA', 'OP_LT'}

    comp_expr = . math_expr
    LA: {'OP_BIT_AND', 'KW_AND', 'CLOSE_SQUARE', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'OP_NEQ', 'KW_FOR', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'COMMA', 'OP_LT'}

    math_expr = . math_expr OP_PLUS term
    LA: {'OP_BIT_AND', 'OP_PLUS', 'KW_AND', 'CLOSE_SQUARE', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'OP_MINUS', 'OP_NEQ', 'KW_FOR', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'COMMA', 'OP_LT'}

    math_expr = . math_expr OP_MINUS term
    LA: {'OP_BIT_AND', 'OP_PLUS', 'KW_AND', 'CLOSE_SQUARE', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'OP_MINUS', 'OP_NEQ', 'KW_FOR', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'COMMA', 'OP_LT'}

    math_expr = . term
    LA: {'OP_BIT_AND', 'OP_PLUS', 'KW_AND', 'CLOSE_SQUARE', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'OP_MINUS', 'OP_NEQ', 'KW_FOR', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'COMMA', 'OP_LT'}

    term = . term OP_STAR factor
    LA: {'OP_BIT_AND', 'CLOSE_SQUARE', 'OP_NEQ', 'KW_FOR', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'COMMA', 'OP_LT', 'OP_SLASH'}

    term = . term OP_SLASH factor
    LA: {'OP_BIT_AND', 'CLOSE_SQUARE', 'OP_NEQ', 'KW_FOR', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'COMMA', 'OP_LT', 'OP_SLASH'}

    term = . term OP_MOD factor
    LA: {'OP_BIT_AND', 'CLOSE_SQUARE', 'OP_NEQ', 'KW_FOR', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'COMMA', 'OP_LT', 'OP_SLASH'}

    term = . factor
    LA: {'OP_BIT_AND', 'CLOSE_SQUARE', 'OP_NEQ', 'KW_FOR', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'COMMA', 'OP_LT', 'OP_SLASH'}

    factor = . factor OP_POW pow_term
    LA: {'OP_BIT_AND', 'CLOSE_SQUARE', 'OP_NEQ', 'KW_FOR', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'COMMA', 'OP_LT', 'OP_SLASH'}

    factor = . pow_term
    LA: {'OP_BIT_AND', 'CLOSE_SQUARE', 'OP_NEQ', 'KW_FOR', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'COMMA', 'OP_LT', 'OP_SLASH'}

    pow_term = . OP_MINUS inc_term
    LA: {'OP_BIT_AND', 'CLOSE_SQUARE', 'OP_NEQ', 'KW_FOR', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'COMMA', 'OP_LT', 'OP_SLASH'}

    pow_term = . KW_NOT inc_term
    LA: {'OP_BIT_AND', 'CLOSE_SQUARE', 'OP_NEQ', 'KW_FOR', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'COMMA', 'OP_LT', 'OP_SLASH'}

    pow_term = . inc_term
    LA: {'OP_BIT_AND', 'CLOSE_SQUARE', 'OP_NEQ', 'KW_FOR', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'COMMA', 'OP_LT', 'OP_SLASH'}

    inc_term = . OP_INC bottom_val
    LA: {'OP_BIT_AND', 'CLOSE_SQUARE', 'OP_NEQ', 'KW_FOR', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'COMMA', 'OP_LT', 'OP_SLASH'}

    inc_term = . bottom_val OP_INC
    LA: {'OP_BIT_AND', 'CLOSE_SQUARE', 'OP_NEQ', 'KW_FOR', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'COMMA', 'OP_LT', 'OP_SLASH'}

    inc_term = . OP_DEC bottom_val
    LA: {'OP_BIT_AND', 'CLOSE_SQUARE', 'OP_NEQ', 'KW_FOR', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'COMMA', 'OP_LT', 'OP_SLASH'}

    inc_term = . bottom_val OP_DEC
    LA: {'OP_BIT_AND', 'CLOSE_SQUARE', 'OP_NEQ', 'KW_FOR', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'COMMA', 'OP_LT', 'OP_SLASH'}

    inc_term = . bottom_val
    LA: {'OP_BIT_AND', 'CLOSE_SQUARE', 'OP_NEQ', 'KW_FOR', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'COMMA', 'OP_LT', 'OP_SLASH'}

    bottom_val = . bottom_val OPEN_PAREN expr_list CLOSE_PAREN
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . bottom_val OPEN_PAREN CLOSE_PAREN
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . bottom_val OP_DOT name
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . bottom_val OPEN_SQUARE expression CLOSE_SQUARE
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . comprehension
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . literal
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . name
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . OPEN_PAREN expression CLOSE_PAREN
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    comprehension = . OPEN_SQUARE linear_comprehension CLOSE_SQUARE
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    comprehension = . OPEN_CURLY linear_comprehension CLOSE_CURLY
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression CLOSE_CURLY
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression KW_IF expression CLOSE_CURLY
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    literal = . LIT_INT
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    literal = . LIT_FLOAT
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    literal = . lit_set
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    literal = . lit_string
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    literal = . lit_list
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    literal = . lit_map
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    literal = . KW_NULL
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    name = . NAME
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    lit_set = . OPEN_CURLY expr_list CLOSE_CURLY
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    lit_string = . DOUBLE_QUOTE_STR
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    lit_string = . SINGLE_QUOTE_STR
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    lit_list = . OPEN_SQUARE expr_list CLOSE_SQUARE
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    lit_map = . OPEN_CURLY map_list CLOSE_CURLY
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}


  Transitions:
    Symbol: linear_comprehension -> Node#132
    Symbol: expr_list -> Node#133
    Symbol: expression -> Node#134
    Symbol: log_and_expr -> Node#51
    Symbol: bit_or_expr -> Node#52
    Symbol: bit_xor_expr -> Node#53
    Symbol: bit_and_expr -> Node#54
    Symbol: equ_expr -> Node#55
    Symbol: comp_expr -> Node#56
    Symbol: math_expr -> Node#57
    Symbol: term -> Node#58
    Symbol: factor -> Node#59
    Symbol: pow_term -> Node#60
    Symbol: OP_MINUS -> Node#61
    Symbol: KW_NOT -> Node#62
    Symbol: inc_term -> Node#63
    Symbol: OP_INC -> Node#64
    Symbol: bottom_val -> Node#65
    Symbol: OP_DEC -> Node#66
    Symbol: comprehension -> Node#67
    Symbol: literal -> Node#68
    Symbol: name -> Node#69
    Symbol: OPEN_PAREN -> Node#70
    Symbol: OPEN_SQUARE -> Node#71
    Symbol: OPEN_CURLY -> Node#72
    Symbol: LIT_INT -> Node#73
    Symbol: LIT_FLOAT -> Node#74
    Symbol: lit_set -> Node#75
    Symbol: lit_string -> Node#76
    Symbol: lit_list -> Node#77
    Symbol: lit_map -> Node#78
    Symbol: KW_NULL -> Node#79
    Symbol: NAME -> Node#80
    Symbol: DOUBLE_QUOTE_STR -> Node#81
    Symbol: SINGLE_QUOTE_STR -> Node#82

Node#72
  Rules:
    comprehension = OPEN_CURLY . linear_comprehension CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    comprehension = OPEN_CURLY . expression COLON expression KW_FOR name KW_IN expression CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    comprehension = OPEN_CURLY . expression COLON expression KW_FOR name KW_IN expression KW_IF expression CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_set = OPEN_CURLY . expr_list CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_map = OPEN_CURLY . map_list CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    linear_comprehension = . expression KW_FOR name KW_IN expression
    LA: {'CLOSE_CURLY'}

    linear_comprehension = . expression KW_FOR name KW_IN expression KW_IF expression
    LA: {'CLOSE_CURLY'}

    expression = . expression KW_OR log_and_expr
    LA: {'CLOSE_CURLY', 'KW_FOR', 'KW_OR', 'COLON', 'COMMA'}

    expression = . log_and_expr
    LA: {'CLOSE_CURLY', 'KW_FOR', 'KW_OR', 'COLON', 'COMMA'}

    expr_list = . expression
    LA: {'CLOSE_CURLY'}

    expr_list = . expression COMMA expr_list
    LA: {'CLOSE_CURLY'}

    map_list = . map_expression
    LA: {'CLOSE_CURLY'}

    map_list = . map_expression COMMA map_list
    LA: {'CLOSE_CURLY'}

    log_and_expr = . log_and_expr KW_AND bit_or_expr
    LA: {'CLOSE_CURLY', 'COLON', 'KW_AND', 'KW_FOR', 'KW_OR', 'COMMA'}

    log_and_expr = . bit_or_expr
    LA: {'CLOSE_CURLY', 'COLON', 'KW_AND', 'KW_FOR', 'KW_OR', 'COMMA'}

    map_expression = . expression COLON expression
    LA: {'COMMA', 'CLOSE_CURLY'}

    bit_or_expr = . bit_or_expr OP_BIT_OR bit_xor_expr
    LA: {'CLOSE_CURLY', 'COLON', 'KW_AND', 'KW_FOR', 'KW_OR', 'OP_BIT_OR', 'COMMA'}

    bit_or_expr = . bit_xor_expr
    LA: {'CLOSE_CURLY', 'COLON', 'KW_AND', 'KW_FOR', 'KW_OR', 'OP_BIT_OR', 'COMMA'}

    bit_xor_expr = . bit_xor_expr OP_BIT_XOR bit_and_expr
    LA: {'CLOSE_CURLY', 'COLON', 'KW_AND', 'OP_BIT_XOR', 'KW_FOR', 'KW_OR', 'OP_BIT_OR', 'COMMA'}

    bit_xor_expr = . bit_and_expr
    LA: {'CLOSE_CURLY', 'COLON', 'KW_AND', 'OP_BIT_XOR', 'KW_FOR', 'KW_OR', 'OP_BIT_OR', 'COMMA'}

    bit_and_expr = . bit_and_expr OP_BIT_AND equ_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'COLON', 'KW_AND', 'OP_BIT_XOR', 'KW_FOR', 'KW_OR', 'OP_BIT_OR', 'COMMA'}

    bit_and_expr = . equ_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'COLON', 'KW_AND', 'OP_BIT_XOR', 'KW_FOR', 'KW_OR', 'OP_BIT_OR', 'COMMA'}

    equ_expr = . equ_expr OP_EQ comp_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'COLON', 'KW_AND', 'OP_BIT_XOR', 'KW_FOR', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_NEQ', 'COMMA'}

    equ_expr = . equ_expr OP_NEQ comp_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'COLON', 'KW_AND', 'OP_BIT_XOR', 'KW_FOR', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_NEQ', 'COMMA'}

    equ_expr = . comp_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'COLON', 'KW_AND', 'OP_BIT_XOR', 'KW_FOR', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_NEQ', 'COMMA'}

    comp_expr = . comp_expr OP_LT math_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'COLON', 'KW_FOR', 'OP_EQ', 'OP_GT', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_LT'}

    comp_expr = . comp_expr OP_LTEQ math_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'COLON', 'KW_FOR', 'OP_EQ', 'OP_GT', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_LT'}

    comp_expr = . comp_expr OP_GT math_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'COLON', 'KW_FOR', 'OP_EQ', 'OP_GT', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_LT'}

    comp_expr = . comp_expr OP_GTEQ math_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'COLON', 'KW_FOR', 'OP_EQ', 'OP_GT', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_LT'}

    comp_expr = . math_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'COLON', 'KW_FOR', 'OP_EQ', 'OP_GT', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_LT'}

    math_expr = . math_expr OP_PLUS term
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'COLON', 'OP_NEQ', 'KW_FOR', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'COMMA', 'OP_LT'}

    math_expr = . math_expr OP_MINUS term
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'COLON', 'OP_NEQ', 'KW_FOR', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'COMMA', 'OP_LT'}

    math_expr = . term
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'COLON', 'OP_NEQ', 'KW_FOR', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'COMMA', 'OP_LT'}

    term = . term OP_STAR factor
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'COLON', 'OP_NEQ', 'KW_FOR', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'COMMA', 'OP_LT', 'OP_SLASH'}

    term = . term OP_SLASH factor
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'COLON', 'OP_NEQ', 'KW_FOR', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'COMMA', 'OP_LT', 'OP_SLASH'}

    term = . term OP_MOD factor
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'COLON', 'OP_NEQ', 'KW_FOR', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'COMMA', 'OP_LT', 'OP_SLASH'}

    term = . factor
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'COLON', 'OP_NEQ', 'KW_FOR', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'COMMA', 'OP_LT', 'OP_SLASH'}

    factor = . factor OP_POW pow_term
    LA: {'CLOSE_CURLY', 'COLON', 'KW_FOR', 'OP_EQ', 'OP_MINUS', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_PLUS', 'OP_GT', 'OP_STAR', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ'}

    factor = . pow_term
    LA: {'CLOSE_CURLY', 'COLON', 'KW_FOR', 'OP_EQ', 'OP_MINUS', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_PLUS', 'OP_GT', 'OP_STAR', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ'}

    pow_term = . OP_MINUS inc_term
    LA: {'CLOSE_CURLY', 'COLON', 'KW_FOR', 'OP_EQ', 'OP_MINUS', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_PLUS', 'OP_GT', 'OP_STAR', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ'}

    pow_term = . KW_NOT inc_term
    LA: {'CLOSE_CURLY', 'COLON', 'KW_FOR', 'OP_EQ', 'OP_MINUS', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_PLUS', 'OP_GT', 'OP_STAR', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ'}

    pow_term = . inc_term
    LA: {'CLOSE_CURLY', 'COLON', 'KW_FOR', 'OP_EQ', 'OP_MINUS', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_PLUS', 'OP_GT', 'OP_STAR', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ'}

    inc_term = . OP_INC bottom_val
    LA: {'CLOSE_CURLY', 'COLON', 'KW_FOR', 'OP_EQ', 'OP_MINUS', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_PLUS', 'OP_GT', 'OP_STAR', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ'}

    inc_term = . bottom_val OP_INC
    LA: {'CLOSE_CURLY', 'COLON', 'KW_FOR', 'OP_EQ', 'OP_MINUS', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_PLUS', 'OP_GT', 'OP_STAR', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ'}

    inc_term = . OP_DEC bottom_val
    LA: {'CLOSE_CURLY', 'COLON', 'KW_FOR', 'OP_EQ', 'OP_MINUS', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_PLUS', 'OP_GT', 'OP_STAR', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ'}

    inc_term = . bottom_val OP_DEC
    LA: {'CLOSE_CURLY', 'COLON', 'KW_FOR', 'OP_EQ', 'OP_MINUS', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_PLUS', 'OP_GT', 'OP_STAR', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ'}

    inc_term = . bottom_val
    LA: {'CLOSE_CURLY', 'COLON', 'KW_FOR', 'OP_EQ', 'OP_MINUS', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_PLUS', 'OP_GT', 'OP_STAR', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ'}

    bottom_val = . bottom_val OPEN_PAREN expr_list CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'COLON', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OP_EQ', 'OP_MINUS', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . bottom_val OPEN_PAREN CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'COLON', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OP_EQ', 'OP_MINUS', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . bottom_val OP_DOT name
    LA: {'CLOSE_CURLY', 'COLON', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OP_EQ', 'OP_MINUS', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . bottom_val OPEN_SQUARE expression CLOSE_SQUARE
    LA: {'CLOSE_CURLY', 'COLON', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OP_EQ', 'OP_MINUS', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . comprehension
    LA: {'CLOSE_CURLY', 'COLON', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OP_EQ', 'OP_MINUS', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . literal
    LA: {'CLOSE_CURLY', 'COLON', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OP_EQ', 'OP_MINUS', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . name
    LA: {'CLOSE_CURLY', 'COLON', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OP_EQ', 'OP_MINUS', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . OPEN_PAREN expression CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'COLON', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OP_EQ', 'OP_MINUS', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    comprehension = . OPEN_SQUARE linear_comprehension CLOSE_SQUARE
    LA: {'CLOSE_CURLY', 'COLON', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OP_EQ', 'OP_MINUS', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    comprehension = . OPEN_CURLY linear_comprehension CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OP_EQ', 'OP_MINUS', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OP_EQ', 'OP_MINUS', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression KW_IF expression CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OP_EQ', 'OP_MINUS', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . LIT_INT
    LA: {'CLOSE_CURLY', 'COLON', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OP_EQ', 'OP_MINUS', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . LIT_FLOAT
    LA: {'CLOSE_CURLY', 'COLON', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OP_EQ', 'OP_MINUS', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . lit_set
    LA: {'CLOSE_CURLY', 'COLON', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OP_EQ', 'OP_MINUS', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . lit_string
    LA: {'CLOSE_CURLY', 'COLON', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OP_EQ', 'OP_MINUS', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . lit_list
    LA: {'CLOSE_CURLY', 'COLON', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OP_EQ', 'OP_MINUS', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . lit_map
    LA: {'CLOSE_CURLY', 'COLON', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OP_EQ', 'OP_MINUS', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . KW_NULL
    LA: {'CLOSE_CURLY', 'COLON', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OP_EQ', 'OP_MINUS', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    name = . NAME
    LA: {'CLOSE_CURLY', 'COLON', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OP_EQ', 'OP_MINUS', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_set = . OPEN_CURLY expr_list CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OP_EQ', 'OP_MINUS', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_string = . DOUBLE_QUOTE_STR
    LA: {'CLOSE_CURLY', 'COLON', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OP_EQ', 'OP_MINUS', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_string = . SINGLE_QUOTE_STR
    LA: {'CLOSE_CURLY', 'COLON', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OP_EQ', 'OP_MINUS', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_list = . OPEN_SQUARE expr_list CLOSE_SQUARE
    LA: {'CLOSE_CURLY', 'COLON', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OP_EQ', 'OP_MINUS', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_map = . OPEN_CURLY map_list CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OP_EQ', 'OP_MINUS', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}


  Transitions:
    Symbol: linear_comprehension -> Node#135
    Symbol: expression -> Node#136
    Symbol: expr_list -> Node#137
    Symbol: map_list -> Node#138
    Symbol: log_and_expr -> Node#51
    Symbol: map_expression -> Node#139
    Symbol: bit_or_expr -> Node#52
    Symbol: bit_xor_expr -> Node#53
    Symbol: bit_and_expr -> Node#54
    Symbol: equ_expr -> Node#55
    Symbol: comp_expr -> Node#56
    Symbol: math_expr -> Node#57
    Symbol: term -> Node#58
    Symbol: factor -> Node#59
    Symbol: pow_term -> Node#60
    Symbol: OP_MINUS -> Node#61
    Symbol: KW_NOT -> Node#62
    Symbol: inc_term -> Node#63
    Symbol: OP_INC -> Node#64
    Symbol: bottom_val -> Node#65
    Symbol: OP_DEC -> Node#66
    Symbol: comprehension -> Node#67
    Symbol: literal -> Node#68
    Symbol: name -> Node#69
    Symbol: OPEN_PAREN -> Node#70
    Symbol: OPEN_SQUARE -> Node#71
    Symbol: OPEN_CURLY -> Node#72
    Symbol: LIT_INT -> Node#73
    Symbol: LIT_FLOAT -> Node#74
    Symbol: lit_set -> Node#75
    Symbol: lit_string -> Node#76
    Symbol: lit_list -> Node#77
    Symbol: lit_map -> Node#78
    Symbol: KW_NULL -> Node#79
    Symbol: NAME -> Node#80
    Symbol: DOUBLE_QUOTE_STR -> Node#81
    Symbol: SINGLE_QUOTE_STR -> Node#82

Node#73
  Rules:
    literal = LIT_INT .
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'OP_ASSIGN', 'KW_ELSE', 'OP_AND_ASSIGN', 'CLOSE_PAREN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_NEQ', 'OP_OR_ASSIGN', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS', 'OP_SUB_ASSIGN'}


Node#74
  Rules:
    literal = LIT_FLOAT .
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'OP_ASSIGN', 'KW_ELSE', 'OP_AND_ASSIGN', 'CLOSE_PAREN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_NEQ', 'OP_OR_ASSIGN', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS', 'OP_SUB_ASSIGN'}


Node#75
  Rules:
    literal = lit_set .
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'OP_ASSIGN', 'KW_ELSE', 'OP_AND_ASSIGN', 'CLOSE_PAREN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_NEQ', 'OP_OR_ASSIGN', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS', 'OP_SUB_ASSIGN'}


Node#76
  Rules:
    literal = lit_string .
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'OP_ASSIGN', 'KW_ELSE', 'OP_AND_ASSIGN', 'CLOSE_PAREN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_NEQ', 'OP_OR_ASSIGN', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS', 'OP_SUB_ASSIGN'}


Node#77
  Rules:
    literal = lit_list .
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'OP_ASSIGN', 'KW_ELSE', 'OP_AND_ASSIGN', 'CLOSE_PAREN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_NEQ', 'OP_OR_ASSIGN', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS', 'OP_SUB_ASSIGN'}


Node#78
  Rules:
    literal = lit_map .
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'OP_ASSIGN', 'KW_ELSE', 'OP_AND_ASSIGN', 'CLOSE_PAREN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_NEQ', 'OP_OR_ASSIGN', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS', 'OP_SUB_ASSIGN'}


Node#79
  Rules:
    literal = KW_NULL .
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}


Node#80
  Rules:
    name = NAME .
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'OP_ASSIGN', 'KW_ELSE', 'OP_AND_ASSIGN', 'CLOSE_PAREN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'KW_IN', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_NEQ', 'OP_OR_ASSIGN', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS', 'OP_SUB_ASSIGN'}


Node#81
  Rules:
    lit_string = DOUBLE_QUOTE_STR .
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'OP_ASSIGN', 'KW_ELSE', 'OP_AND_ASSIGN', 'CLOSE_PAREN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_NEQ', 'OP_OR_ASSIGN', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS', 'OP_SUB_ASSIGN'}


Node#82
  Rules:
    lit_string = SINGLE_QUOTE_STR .
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'OP_ASSIGN', 'KW_ELSE', 'OP_AND_ASSIGN', 'CLOSE_PAREN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_NEQ', 'OP_OR_ASSIGN', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS', 'OP_SUB_ASSIGN'}


Node#83
  Rules:
    type = TYPE_ARRAY OP_LT type . OP_GT
    LA: {'COMMA', 'NAME', 'OP_GT'}


  Transitions:
    Symbol: OP_GT -> Node#140

Node#84
  Rules:
    type = NAME .
    LA: {'COMMA', 'NAME', 'OP_GT'}


Node#85
  Rules:
    type = TYPE_LIST OP_LT type . OP_GT
    LA: {'COMMA', 'NAME', 'OP_GT'}


  Transitions:
    Symbol: OP_GT -> Node#141

Node#86
  Rules:
    type = TYPE_MAP OP_LT type . COMMA type OP_GT
    LA: {'COMMA', 'NAME', 'OP_GT'}


  Transitions:
    Symbol: COMMA -> Node#142

Node#87
  Rules:
    type = TYPE_SET OP_LT type . OP_GT
    LA: {'COMMA', 'NAME', 'OP_GT'}


  Transitions:
    Symbol: OP_GT -> Node#143

Node#88
  Rules:
    func_definition = access_modifier KW_INIT NAME OPEN_PAREN func_arg_definitions . CLOSE_PAREN body
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'CLOSE_CURLY', 'NAME', 'OPEN_CURLY', 'KW_DELETE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'TYPE_MAP', 'TYPE_BOOL', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'ACC_READONLY', 'ACC_PRIVATE', 'KW_NULL'}


  Transitions:
    Symbol: CLOSE_PAREN -> Node#144

Node#89
  Rules:
    func_arg_definitions = func_arg_def_list .
    LA: {'CLOSE_PAREN'}


Node#90
  Rules:
    func_arg_def_list = func_arg_def .
    LA: {'CLOSE_PAREN'}

    func_arg_def_list = func_arg_def . COMMA func_arg_def_list
    LA: {'CLOSE_PAREN'}


  Transitions:
    Symbol: COMMA -> Node#145

Node#91
  Rules:
    func_arg_def = type . NAME OP_ASSIGN expression
    LA: {'CLOSE_PAREN', 'COMMA'}

    func_arg_def = type . NAME
    LA: {'CLOSE_PAREN', 'COMMA'}


  Transitions:
    Symbol: NAME -> Node#146

Node#92
  Rules:
    func_definition = access_modifier KW_DELETE NAME OPEN_PAREN func_arg_definitions . CLOSE_PAREN body
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'CLOSE_CURLY', 'NAME', 'OPEN_CURLY', 'KW_DELETE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'TYPE_MAP', 'TYPE_BOOL', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'ACC_READONLY', 'ACC_PRIVATE', 'KW_NULL'}


  Transitions:
    Symbol: CLOSE_PAREN -> Node#147

Node#93
  Rules:
    class_definition = access_modifier KW_CLASS NAME OPEN_PAREN NAME . CLOSE_PAREN class_body
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'KW_DELETE', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}


  Transitions:
    Symbol: CLOSE_PAREN -> Node#148

Node#94
  Rules:
    class_body = OPEN_CURLY class_statements . CLOSE_CURLY
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'KW_DELETE', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}


  Transitions:
    Symbol: CLOSE_CURLY -> Node#149

Node#95
  Rules:
    class_body = OPEN_CURLY CLOSE_CURLY .
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'KW_DELETE', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}


Node#96
  Rules:
    class_statements = class_statement .
    LA: {'CLOSE_CURLY'}

    class_statements = class_statement . class_statements
    LA: {'CLOSE_CURLY'}

    class_statements = . class_statement
    LA: {'CLOSE_CURLY'}

    class_statements = . class_statement class_statements
    LA: {'CLOSE_CURLY'}

    class_statement = . access_modifier special_mod OPEN_CURLY var_def_list CLOSE_CURLY
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'CLOSE_CURLY', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'OPEN_CURLY', 'ACC_PUBLIC', 'KW_DELETE', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    class_statement = . func_definition
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'CLOSE_CURLY', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'OPEN_CURLY', 'ACC_PUBLIC', 'KW_DELETE', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    access_modifier = . ACC_PUBLIC
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_DELETE', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'OPEN_CURLY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    access_modifier = . ACC_PRIVATE
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_DELETE', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'OPEN_CURLY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    access_modifier = . ACC_READONLY
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_DELETE', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'OPEN_CURLY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    access_modifier = . ACC_SHARED
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_DELETE', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'OPEN_CURLY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    access_modifier = .
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_DELETE', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'OPEN_CURLY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    func_definition = . access_modifier special_mod type NAME OPEN_PAREN func_arg_definitions CLOSE_PAREN body
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'CLOSE_CURLY', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'OPEN_CURLY', 'ACC_PUBLIC', 'KW_DELETE', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    func_definition = . access_modifier KW_INIT NAME OPEN_PAREN func_arg_definitions CLOSE_PAREN body
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'CLOSE_CURLY', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'OPEN_CURLY', 'ACC_PUBLIC', 'KW_DELETE', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    func_definition = . access_modifier KW_DELETE NAME OPEN_PAREN func_arg_definitions CLOSE_PAREN body
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'CLOSE_CURLY', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'OPEN_CURLY', 'ACC_PUBLIC', 'KW_DELETE', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}


  Transitions:
    Symbol: class_statements -> Node#150
    Symbol: class_statement -> Node#96
    Symbol: access_modifier -> Node#97
    Symbol: func_definition -> Node#98
    Symbol: ACC_PUBLIC -> Node#8
    Symbol: ACC_PRIVATE -> Node#9
    Symbol: ACC_READONLY -> Node#10
    Symbol: ACC_SHARED -> Node#11

Node#97
  Rules:
    class_statement = access_modifier . special_mod OPEN_CURLY var_def_list CLOSE_CURLY
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'CLOSE_CURLY', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'OPEN_CURLY', 'ACC_PUBLIC', 'KW_DELETE', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    func_definition = access_modifier . special_mod type NAME OPEN_PAREN func_arg_definitions CLOSE_PAREN body
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'CLOSE_CURLY', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'OPEN_CURLY', 'ACC_PUBLIC', 'KW_DELETE', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    func_definition = access_modifier . KW_INIT NAME OPEN_PAREN func_arg_definitions CLOSE_PAREN body
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'CLOSE_CURLY', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'OPEN_CURLY', 'ACC_PUBLIC', 'KW_DELETE', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    func_definition = access_modifier . KW_DELETE NAME OPEN_PAREN func_arg_definitions CLOSE_PAREN body
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'CLOSE_CURLY', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'OPEN_CURLY', 'ACC_PUBLIC', 'KW_DELETE', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    special_mod = . KW_ABSTRACT
    LA: {'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'TYPE_STR', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'OPEN_CURLY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    special_mod = . KW_STATIC
    LA: {'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'TYPE_STR', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'OPEN_CURLY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    special_mod = .
    LA: {'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'TYPE_STR', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'OPEN_CURLY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}


  Transitions:
    Symbol: special_mod -> Node#151
    Symbol: KW_INIT -> Node#14
    Symbol: KW_DELETE -> Node#15
    Symbol: KW_ABSTRACT -> Node#18
    Symbol: KW_STATIC -> Node#19

Node#98
  Rules:
    class_statement = func_definition .
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'CLOSE_CURLY', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'OPEN_CURLY', 'ACC_PUBLIC', 'KW_DELETE', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}


Node#99
  Rules:
    enum_definition = access_modifier KW_ENUM NAME OPEN_CURLY enum_statements . CLOSE_CURLY
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'KW_DELETE', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}


  Transitions:
    Symbol: CLOSE_CURLY -> Node#152

Node#100
  Rules:
    enum_statements = enum_statement .
    LA: {'CLOSE_CURLY'}

    enum_statements = enum_statement . enum_statements
    LA: {'CLOSE_CURLY'}

    enum_statements = . enum_statement
    LA: {'CLOSE_CURLY'}

    enum_statements = . enum_statement enum_statements
    LA: {'CLOSE_CURLY'}

    enum_statement = . NAME SEMICOLON
    LA: {'CLOSE_CURLY', 'NAME'}

    enum_statement = . NAME OP_ASSIGN LIT_INT SEMICOLON
    LA: {'CLOSE_CURLY', 'NAME'}


  Transitions:
    Symbol: enum_statements -> Node#153
    Symbol: enum_statement -> Node#100
    Symbol: NAME -> Node#101

Node#101
  Rules:
    enum_statement = NAME . SEMICOLON
    LA: {'CLOSE_CURLY', 'NAME'}

    enum_statement = NAME . OP_ASSIGN LIT_INT SEMICOLON
    LA: {'CLOSE_CURLY', 'NAME'}


  Transitions:
    Symbol: SEMICOLON -> Node#154
    Symbol: OP_ASSIGN -> Node#155

Node#102
  Rules:
    func_definition = access_modifier special_mod type NAME OPEN_PAREN func_arg_definitions . CLOSE_PAREN body
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'CLOSE_CURLY', 'NAME', 'OPEN_CURLY', 'KW_DELETE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'TYPE_MAP', 'TYPE_BOOL', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'ACC_READONLY', 'ACC_PRIVATE', 'KW_NULL'}


  Transitions:
    Symbol: CLOSE_PAREN -> Node#156

Node#103
  Rules:
    var_definition = access_modifier special_mod type NAME OP_ASSIGN expression . SEMICOLON
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'CLOSE_CURLY', 'NAME', 'KW_DELETE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'TYPE_MAP', 'TYPE_BOOL', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'ACC_READONLY', 'ACC_PRIVATE', 'KW_NULL'}

    expression = expression . KW_OR log_and_expr
    LA: {'KW_OR', 'SEMICOLON'}


  Transitions:
    Symbol: SEMICOLON -> Node#157
    Symbol: KW_OR -> Node#105

Node#104
  Rules:
    var_definition = access_modifier special_mod NAME OP_ASSIGN expression SEMICOLON .
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'CLOSE_CURLY', 'NAME', 'KW_DELETE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'TYPE_MAP', 'TYPE_BOOL', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'ACC_READONLY', 'ACC_PRIVATE', 'KW_NULL'}


Node#105
  Rules:
    expression = expression KW_OR . log_and_expr
    LA: {'CLOSE_CURLY', 'COLON', 'CLOSE_PAREN', 'KW_TO', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'KW_OR', 'OPEN_CURLY', 'KW_IF', 'COMMA', 'KW_ELSE'}

    log_and_expr = . log_and_expr KW_AND bit_or_expr
    LA: {'CLOSE_CURLY', 'COLON', 'CLOSE_PAREN', 'KW_TO', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_AND', 'KW_FOR', 'KW_OR', 'OPEN_CURLY', 'KW_IF', 'COMMA', 'KW_ELSE'}

    log_and_expr = . bit_or_expr
    LA: {'CLOSE_CURLY', 'COLON', 'CLOSE_PAREN', 'KW_TO', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_AND', 'KW_FOR', 'KW_OR', 'OPEN_CURLY', 'KW_IF', 'COMMA', 'KW_ELSE'}

    bit_or_expr = . bit_or_expr OP_BIT_OR bit_xor_expr
    LA: {'CLOSE_CURLY', 'COLON', 'CLOSE_PAREN', 'KW_TO', 'SEMICOLON', 'KW_AND', 'CLOSE_SQUARE', 'KW_FOR', 'KW_OR', 'OP_BIT_OR', 'OPEN_CURLY', 'KW_IF', 'COMMA', 'KW_ELSE'}

    bit_or_expr = . bit_xor_expr
    LA: {'CLOSE_CURLY', 'COLON', 'CLOSE_PAREN', 'KW_TO', 'SEMICOLON', 'KW_AND', 'CLOSE_SQUARE', 'KW_FOR', 'KW_OR', 'OP_BIT_OR', 'OPEN_CURLY', 'KW_IF', 'COMMA', 'KW_ELSE'}

    bit_xor_expr = . bit_xor_expr OP_BIT_XOR bit_and_expr
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'KW_IF', 'KW_ELSE', 'KW_TO', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA'}

    bit_xor_expr = . bit_and_expr
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'KW_IF', 'KW_ELSE', 'KW_TO', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA'}

    bit_and_expr = . bit_and_expr OP_BIT_AND equ_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'KW_IF', 'KW_ELSE', 'KW_TO', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA'}

    bit_and_expr = . equ_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'KW_IF', 'KW_ELSE', 'KW_TO', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA'}

    equ_expr = . equ_expr OP_EQ comp_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'KW_ELSE', 'KW_TO', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA'}

    equ_expr = . equ_expr OP_NEQ comp_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'KW_ELSE', 'KW_TO', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA'}

    equ_expr = . comp_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'KW_ELSE', 'KW_TO', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA'}

    comp_expr = . comp_expr OP_LT math_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'KW_IF', 'KW_ELSE', 'KW_TO', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_LT'}

    comp_expr = . comp_expr OP_LTEQ math_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'KW_IF', 'KW_ELSE', 'KW_TO', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_LT'}

    comp_expr = . comp_expr OP_GT math_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'KW_IF', 'KW_ELSE', 'KW_TO', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_LT'}

    comp_expr = . comp_expr OP_GTEQ math_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'KW_IF', 'KW_ELSE', 'KW_TO', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_LT'}

    comp_expr = . math_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'KW_IF', 'KW_ELSE', 'KW_TO', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_LT'}

    math_expr = . math_expr OP_PLUS term
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'OP_NEQ', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'KW_TO', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'COMMA', 'OP_LT'}

    math_expr = . math_expr OP_MINUS term
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'OP_NEQ', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'KW_TO', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'COMMA', 'OP_LT'}

    math_expr = . term
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'OP_NEQ', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'KW_TO', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'COMMA', 'OP_LT'}

    term = . term OP_STAR factor
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    term = . term OP_SLASH factor
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    term = . term OP_MOD factor
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    term = . factor
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    factor = . factor OP_POW pow_term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    factor = . pow_term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    pow_term = . OP_MINUS inc_term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    pow_term = . KW_NOT inc_term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    pow_term = . inc_term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = . OP_INC bottom_val
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = . bottom_val OP_INC
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = . OP_DEC bottom_val
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = . bottom_val OP_DEC
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = . bottom_val
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . bottom_val OPEN_PAREN expr_list CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . bottom_val OPEN_PAREN CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . bottom_val OP_DOT name
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . bottom_val OPEN_SQUARE expression CLOSE_SQUARE
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . comprehension
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . literal
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . name
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . OPEN_PAREN expression CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    comprehension = . OPEN_SQUARE linear_comprehension CLOSE_SQUARE
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    comprehension = . OPEN_CURLY linear_comprehension CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression KW_IF expression CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . LIT_INT
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . LIT_FLOAT
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . lit_set
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . lit_string
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . lit_list
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . lit_map
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . KW_NULL
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    name = . NAME
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_set = . OPEN_CURLY expr_list CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_string = . DOUBLE_QUOTE_STR
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_string = . SINGLE_QUOTE_STR
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_list = . OPEN_SQUARE expr_list CLOSE_SQUARE
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_map = . OPEN_CURLY map_list CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}


  Transitions:
    Symbol: log_and_expr -> Node#158
    Symbol: bit_or_expr -> Node#52
    Symbol: bit_xor_expr -> Node#53
    Symbol: bit_and_expr -> Node#54
    Symbol: equ_expr -> Node#55
    Symbol: comp_expr -> Node#56
    Symbol: math_expr -> Node#57
    Symbol: term -> Node#58
    Symbol: factor -> Node#59
    Symbol: pow_term -> Node#60
    Symbol: OP_MINUS -> Node#61
    Symbol: KW_NOT -> Node#62
    Symbol: inc_term -> Node#63
    Symbol: OP_INC -> Node#64
    Symbol: bottom_val -> Node#65
    Symbol: OP_DEC -> Node#66
    Symbol: comprehension -> Node#67
    Symbol: literal -> Node#68
    Symbol: name -> Node#69
    Symbol: OPEN_PAREN -> Node#70
    Symbol: OPEN_SQUARE -> Node#71
    Symbol: OPEN_CURLY -> Node#72
    Symbol: LIT_INT -> Node#73
    Symbol: LIT_FLOAT -> Node#74
    Symbol: lit_set -> Node#75
    Symbol: lit_string -> Node#76
    Symbol: lit_list -> Node#77
    Symbol: lit_map -> Node#78
    Symbol: KW_NULL -> Node#79
    Symbol: NAME -> Node#80
    Symbol: DOUBLE_QUOTE_STR -> Node#81
    Symbol: SINGLE_QUOTE_STR -> Node#82

Node#106
  Rules:
    log_and_expr = log_and_expr KW_AND . bit_or_expr
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'KW_IF', 'KW_ELSE', 'KW_TO', 'CLOSE_PAREN', 'KW_AND', 'KW_OR', 'COMMA'}

    bit_or_expr = . bit_or_expr OP_BIT_OR bit_xor_expr
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'KW_IF', 'KW_ELSE', 'KW_TO', 'CLOSE_PAREN', 'KW_AND', 'KW_OR', 'OP_BIT_OR', 'COMMA'}

    bit_or_expr = . bit_xor_expr
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'KW_IF', 'KW_ELSE', 'KW_TO', 'CLOSE_PAREN', 'KW_AND', 'KW_OR', 'OP_BIT_OR', 'COMMA'}

    bit_xor_expr = . bit_xor_expr OP_BIT_XOR bit_and_expr
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'KW_IF', 'KW_ELSE', 'KW_TO', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA'}

    bit_xor_expr = . bit_and_expr
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'KW_IF', 'KW_ELSE', 'KW_TO', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA'}

    bit_and_expr = . bit_and_expr OP_BIT_AND equ_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'KW_IF', 'KW_ELSE', 'KW_TO', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA'}

    bit_and_expr = . equ_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'KW_IF', 'KW_ELSE', 'KW_TO', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA'}

    equ_expr = . equ_expr OP_EQ comp_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'KW_ELSE', 'KW_TO', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA'}

    equ_expr = . equ_expr OP_NEQ comp_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'KW_ELSE', 'KW_TO', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA'}

    equ_expr = . comp_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'KW_ELSE', 'KW_TO', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA'}

    comp_expr = . comp_expr OP_LT math_expr
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_BIT_AND', 'OP_GT', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ'}

    comp_expr = . comp_expr OP_LTEQ math_expr
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_BIT_AND', 'OP_GT', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ'}

    comp_expr = . comp_expr OP_GT math_expr
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_BIT_AND', 'OP_GT', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ'}

    comp_expr = . comp_expr OP_GTEQ math_expr
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_BIT_AND', 'OP_GT', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ'}

    comp_expr = . math_expr
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_BIT_AND', 'OP_GT', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ'}

    math_expr = . math_expr OP_PLUS term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    math_expr = . math_expr OP_MINUS term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    math_expr = . term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    term = . term OP_STAR factor
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    term = . term OP_SLASH factor
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    term = . term OP_MOD factor
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    term = . factor
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    factor = . factor OP_POW pow_term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    factor = . pow_term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    pow_term = . OP_MINUS inc_term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    pow_term = . KW_NOT inc_term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    pow_term = . inc_term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = . OP_INC bottom_val
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = . bottom_val OP_INC
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = . OP_DEC bottom_val
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = . bottom_val OP_DEC
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = . bottom_val
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . bottom_val OPEN_PAREN expr_list CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . bottom_val OPEN_PAREN CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . bottom_val OP_DOT name
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . bottom_val OPEN_SQUARE expression CLOSE_SQUARE
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . comprehension
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . literal
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . name
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . OPEN_PAREN expression CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    comprehension = . OPEN_SQUARE linear_comprehension CLOSE_SQUARE
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    comprehension = . OPEN_CURLY linear_comprehension CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression KW_IF expression CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . LIT_INT
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . LIT_FLOAT
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . lit_set
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . lit_string
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . lit_list
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . lit_map
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . KW_NULL
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    name = . NAME
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_set = . OPEN_CURLY expr_list CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_string = . DOUBLE_QUOTE_STR
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_string = . SINGLE_QUOTE_STR
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_list = . OPEN_SQUARE expr_list CLOSE_SQUARE
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_map = . OPEN_CURLY map_list CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}


  Transitions:
    Symbol: bit_or_expr -> Node#159
    Symbol: bit_xor_expr -> Node#53
    Symbol: bit_and_expr -> Node#54
    Symbol: equ_expr -> Node#55
    Symbol: comp_expr -> Node#56
    Symbol: math_expr -> Node#57
    Symbol: term -> Node#58
    Symbol: factor -> Node#59
    Symbol: pow_term -> Node#60
    Symbol: OP_MINUS -> Node#61
    Symbol: KW_NOT -> Node#62
    Symbol: inc_term -> Node#63
    Symbol: OP_INC -> Node#64
    Symbol: bottom_val -> Node#65
    Symbol: OP_DEC -> Node#66
    Symbol: comprehension -> Node#67
    Symbol: literal -> Node#68
    Symbol: name -> Node#69
    Symbol: OPEN_PAREN -> Node#70
    Symbol: OPEN_SQUARE -> Node#71
    Symbol: OPEN_CURLY -> Node#72
    Symbol: LIT_INT -> Node#73
    Symbol: LIT_FLOAT -> Node#74
    Symbol: lit_set -> Node#75
    Symbol: lit_string -> Node#76
    Symbol: lit_list -> Node#77
    Symbol: lit_map -> Node#78
    Symbol: KW_NULL -> Node#79
    Symbol: NAME -> Node#80
    Symbol: DOUBLE_QUOTE_STR -> Node#81
    Symbol: SINGLE_QUOTE_STR -> Node#82

Node#107
  Rules:
    bit_or_expr = bit_or_expr OP_BIT_OR . bit_xor_expr
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'KW_IF', 'KW_ELSE', 'KW_TO', 'CLOSE_PAREN', 'KW_AND', 'KW_OR', 'OP_BIT_OR', 'COMMA'}

    bit_xor_expr = . bit_xor_expr OP_BIT_XOR bit_and_expr
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'KW_IF', 'KW_ELSE', 'KW_TO', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA'}

    bit_xor_expr = . bit_and_expr
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'KW_IF', 'KW_ELSE', 'KW_TO', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA'}

    bit_and_expr = . bit_and_expr OP_BIT_AND equ_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'KW_IF', 'KW_ELSE', 'KW_TO', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA'}

    bit_and_expr = . equ_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'KW_IF', 'KW_ELSE', 'KW_TO', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA'}

    equ_expr = . equ_expr OP_EQ comp_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'KW_ELSE', 'KW_TO', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA'}

    equ_expr = . equ_expr OP_NEQ comp_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'KW_ELSE', 'KW_TO', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA'}

    equ_expr = . comp_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'KW_ELSE', 'KW_TO', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA'}

    comp_expr = . comp_expr OP_LT math_expr
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_BIT_AND', 'OP_GT', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ'}

    comp_expr = . comp_expr OP_LTEQ math_expr
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_BIT_AND', 'OP_GT', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ'}

    comp_expr = . comp_expr OP_GT math_expr
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_BIT_AND', 'OP_GT', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ'}

    comp_expr = . comp_expr OP_GTEQ math_expr
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_BIT_AND', 'OP_GT', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ'}

    comp_expr = . math_expr
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_BIT_AND', 'OP_GT', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ'}

    math_expr = . math_expr OP_PLUS term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    math_expr = . math_expr OP_MINUS term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    math_expr = . term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    term = . term OP_STAR factor
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    term = . term OP_SLASH factor
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    term = . term OP_MOD factor
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    term = . factor
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    factor = . factor OP_POW pow_term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    factor = . pow_term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    pow_term = . OP_MINUS inc_term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    pow_term = . KW_NOT inc_term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    pow_term = . inc_term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = . OP_INC bottom_val
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = . bottom_val OP_INC
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = . OP_DEC bottom_val
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = . bottom_val OP_DEC
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = . bottom_val
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . bottom_val OPEN_PAREN expr_list CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . bottom_val OPEN_PAREN CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . bottom_val OP_DOT name
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . bottom_val OPEN_SQUARE expression CLOSE_SQUARE
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . comprehension
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . literal
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . name
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . OPEN_PAREN expression CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    comprehension = . OPEN_SQUARE linear_comprehension CLOSE_SQUARE
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    comprehension = . OPEN_CURLY linear_comprehension CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression KW_IF expression CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . LIT_INT
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . LIT_FLOAT
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . lit_set
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . lit_string
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . lit_list
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . lit_map
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . KW_NULL
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    name = . NAME
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_set = . OPEN_CURLY expr_list CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_string = . DOUBLE_QUOTE_STR
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_string = . SINGLE_QUOTE_STR
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_list = . OPEN_SQUARE expr_list CLOSE_SQUARE
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_map = . OPEN_CURLY map_list CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}


  Transitions:
    Symbol: bit_xor_expr -> Node#160
    Symbol: bit_and_expr -> Node#54
    Symbol: equ_expr -> Node#55
    Symbol: comp_expr -> Node#56
    Symbol: math_expr -> Node#57
    Symbol: term -> Node#58
    Symbol: factor -> Node#59
    Symbol: pow_term -> Node#60
    Symbol: OP_MINUS -> Node#61
    Symbol: KW_NOT -> Node#62
    Symbol: inc_term -> Node#63
    Symbol: OP_INC -> Node#64
    Symbol: bottom_val -> Node#65
    Symbol: OP_DEC -> Node#66
    Symbol: comprehension -> Node#67
    Symbol: literal -> Node#68
    Symbol: name -> Node#69
    Symbol: OPEN_PAREN -> Node#70
    Symbol: OPEN_SQUARE -> Node#71
    Symbol: OPEN_CURLY -> Node#72
    Symbol: LIT_INT -> Node#73
    Symbol: LIT_FLOAT -> Node#74
    Symbol: lit_set -> Node#75
    Symbol: lit_string -> Node#76
    Symbol: lit_list -> Node#77
    Symbol: lit_map -> Node#78
    Symbol: KW_NULL -> Node#79
    Symbol: NAME -> Node#80
    Symbol: DOUBLE_QUOTE_STR -> Node#81
    Symbol: SINGLE_QUOTE_STR -> Node#82

Node#108
  Rules:
    bit_xor_expr = bit_xor_expr OP_BIT_XOR . bit_and_expr
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'KW_IF', 'KW_ELSE', 'KW_TO', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA'}

    bit_and_expr = . bit_and_expr OP_BIT_AND equ_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'KW_IF', 'KW_ELSE', 'KW_TO', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA'}

    bit_and_expr = . equ_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'KW_IF', 'KW_ELSE', 'KW_TO', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA'}

    equ_expr = . equ_expr OP_EQ comp_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'KW_ELSE', 'KW_TO', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA'}

    equ_expr = . equ_expr OP_NEQ comp_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'KW_ELSE', 'KW_TO', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA'}

    equ_expr = . comp_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'KW_ELSE', 'KW_TO', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA'}

    comp_expr = . comp_expr OP_LT math_expr
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_BIT_AND', 'OP_GT', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ'}

    comp_expr = . comp_expr OP_LTEQ math_expr
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_BIT_AND', 'OP_GT', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ'}

    comp_expr = . comp_expr OP_GT math_expr
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_BIT_AND', 'OP_GT', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ'}

    comp_expr = . comp_expr OP_GTEQ math_expr
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_BIT_AND', 'OP_GT', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ'}

    comp_expr = . math_expr
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_BIT_AND', 'OP_GT', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ'}

    math_expr = . math_expr OP_PLUS term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    math_expr = . math_expr OP_MINUS term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    math_expr = . term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    term = . term OP_STAR factor
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    term = . term OP_SLASH factor
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    term = . term OP_MOD factor
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    term = . factor
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    factor = . factor OP_POW pow_term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    factor = . pow_term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    pow_term = . OP_MINUS inc_term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    pow_term = . KW_NOT inc_term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    pow_term = . inc_term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = . OP_INC bottom_val
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = . bottom_val OP_INC
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = . OP_DEC bottom_val
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = . bottom_val OP_DEC
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = . bottom_val
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . bottom_val OPEN_PAREN expr_list CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . bottom_val OPEN_PAREN CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . bottom_val OP_DOT name
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . bottom_val OPEN_SQUARE expression CLOSE_SQUARE
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . comprehension
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . literal
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . name
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . OPEN_PAREN expression CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    comprehension = . OPEN_SQUARE linear_comprehension CLOSE_SQUARE
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    comprehension = . OPEN_CURLY linear_comprehension CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression KW_IF expression CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . LIT_INT
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . LIT_FLOAT
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . lit_set
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . lit_string
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . lit_list
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . lit_map
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . KW_NULL
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    name = . NAME
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_set = . OPEN_CURLY expr_list CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_string = . DOUBLE_QUOTE_STR
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_string = . SINGLE_QUOTE_STR
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_list = . OPEN_SQUARE expr_list CLOSE_SQUARE
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_map = . OPEN_CURLY map_list CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}


  Transitions:
    Symbol: bit_and_expr -> Node#161
    Symbol: equ_expr -> Node#55
    Symbol: comp_expr -> Node#56
    Symbol: math_expr -> Node#57
    Symbol: term -> Node#58
    Symbol: factor -> Node#59
    Symbol: pow_term -> Node#60
    Symbol: OP_MINUS -> Node#61
    Symbol: KW_NOT -> Node#62
    Symbol: inc_term -> Node#63
    Symbol: OP_INC -> Node#64
    Symbol: bottom_val -> Node#65
    Symbol: OP_DEC -> Node#66
    Symbol: comprehension -> Node#67
    Symbol: literal -> Node#68
    Symbol: name -> Node#69
    Symbol: OPEN_PAREN -> Node#70
    Symbol: OPEN_SQUARE -> Node#71
    Symbol: OPEN_CURLY -> Node#72
    Symbol: LIT_INT -> Node#73
    Symbol: LIT_FLOAT -> Node#74
    Symbol: lit_set -> Node#75
    Symbol: lit_string -> Node#76
    Symbol: lit_list -> Node#77
    Symbol: lit_map -> Node#78
    Symbol: KW_NULL -> Node#79
    Symbol: NAME -> Node#80
    Symbol: DOUBLE_QUOTE_STR -> Node#81
    Symbol: SINGLE_QUOTE_STR -> Node#82

Node#109
  Rules:
    bit_and_expr = bit_and_expr OP_BIT_AND . equ_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'KW_IF', 'KW_ELSE', 'KW_TO', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA'}

    equ_expr = . equ_expr OP_EQ comp_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'KW_ELSE', 'KW_TO', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA'}

    equ_expr = . equ_expr OP_NEQ comp_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'KW_ELSE', 'KW_TO', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA'}

    equ_expr = . comp_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'KW_ELSE', 'KW_TO', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA'}

    comp_expr = . comp_expr OP_LT math_expr
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_BIT_AND', 'OP_GT', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ'}

    comp_expr = . comp_expr OP_LTEQ math_expr
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_BIT_AND', 'OP_GT', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ'}

    comp_expr = . comp_expr OP_GT math_expr
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_BIT_AND', 'OP_GT', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ'}

    comp_expr = . comp_expr OP_GTEQ math_expr
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_BIT_AND', 'OP_GT', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ'}

    comp_expr = . math_expr
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_BIT_AND', 'OP_GT', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ'}

    math_expr = . math_expr OP_PLUS term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    math_expr = . math_expr OP_MINUS term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    math_expr = . term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    term = . term OP_STAR factor
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    term = . term OP_SLASH factor
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    term = . term OP_MOD factor
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    term = . factor
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    factor = . factor OP_POW pow_term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    factor = . pow_term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    pow_term = . OP_MINUS inc_term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    pow_term = . KW_NOT inc_term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    pow_term = . inc_term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = . OP_INC bottom_val
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = . bottom_val OP_INC
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = . OP_DEC bottom_val
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = . bottom_val OP_DEC
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = . bottom_val
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . bottom_val OPEN_PAREN expr_list CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . bottom_val OPEN_PAREN CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . bottom_val OP_DOT name
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . bottom_val OPEN_SQUARE expression CLOSE_SQUARE
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . comprehension
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . literal
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . name
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . OPEN_PAREN expression CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    comprehension = . OPEN_SQUARE linear_comprehension CLOSE_SQUARE
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    comprehension = . OPEN_CURLY linear_comprehension CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression KW_IF expression CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . LIT_INT
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . LIT_FLOAT
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . lit_set
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . lit_string
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . lit_list
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . lit_map
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . KW_NULL
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    name = . NAME
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_set = . OPEN_CURLY expr_list CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_string = . DOUBLE_QUOTE_STR
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_string = . SINGLE_QUOTE_STR
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_list = . OPEN_SQUARE expr_list CLOSE_SQUARE
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_map = . OPEN_CURLY map_list CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}


  Transitions:
    Symbol: equ_expr -> Node#162
    Symbol: comp_expr -> Node#56
    Symbol: math_expr -> Node#57
    Symbol: term -> Node#58
    Symbol: factor -> Node#59
    Symbol: pow_term -> Node#60
    Symbol: OP_MINUS -> Node#61
    Symbol: KW_NOT -> Node#62
    Symbol: inc_term -> Node#63
    Symbol: OP_INC -> Node#64
    Symbol: bottom_val -> Node#65
    Symbol: OP_DEC -> Node#66
    Symbol: comprehension -> Node#67
    Symbol: literal -> Node#68
    Symbol: name -> Node#69
    Symbol: OPEN_PAREN -> Node#70
    Symbol: OPEN_SQUARE -> Node#71
    Symbol: OPEN_CURLY -> Node#72
    Symbol: LIT_INT -> Node#73
    Symbol: LIT_FLOAT -> Node#74
    Symbol: lit_set -> Node#75
    Symbol: lit_string -> Node#76
    Symbol: lit_list -> Node#77
    Symbol: lit_map -> Node#78
    Symbol: KW_NULL -> Node#79
    Symbol: NAME -> Node#80
    Symbol: DOUBLE_QUOTE_STR -> Node#81
    Symbol: SINGLE_QUOTE_STR -> Node#82

Node#110
  Rules:
    equ_expr = equ_expr OP_EQ . comp_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'KW_ELSE', 'KW_TO', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA'}

    comp_expr = . comp_expr OP_LT math_expr
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_BIT_AND', 'OP_GT', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ'}

    comp_expr = . comp_expr OP_LTEQ math_expr
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_BIT_AND', 'OP_GT', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ'}

    comp_expr = . comp_expr OP_GT math_expr
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_BIT_AND', 'OP_GT', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ'}

    comp_expr = . comp_expr OP_GTEQ math_expr
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_BIT_AND', 'OP_GT', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ'}

    comp_expr = . math_expr
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_BIT_AND', 'OP_GT', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ'}

    math_expr = . math_expr OP_PLUS term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    math_expr = . math_expr OP_MINUS term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    math_expr = . term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    term = . term OP_STAR factor
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    term = . term OP_SLASH factor
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    term = . term OP_MOD factor
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    term = . factor
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    factor = . factor OP_POW pow_term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    factor = . pow_term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    pow_term = . OP_MINUS inc_term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    pow_term = . KW_NOT inc_term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    pow_term = . inc_term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = . OP_INC bottom_val
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = . bottom_val OP_INC
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = . OP_DEC bottom_val
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = . bottom_val OP_DEC
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = . bottom_val
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . bottom_val OPEN_PAREN expr_list CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . bottom_val OPEN_PAREN CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . bottom_val OP_DOT name
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . bottom_val OPEN_SQUARE expression CLOSE_SQUARE
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . comprehension
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . literal
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . name
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . OPEN_PAREN expression CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    comprehension = . OPEN_SQUARE linear_comprehension CLOSE_SQUARE
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    comprehension = . OPEN_CURLY linear_comprehension CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression KW_IF expression CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . LIT_INT
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . LIT_FLOAT
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . lit_set
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . lit_string
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . lit_list
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . lit_map
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . KW_NULL
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    name = . NAME
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_set = . OPEN_CURLY expr_list CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_string = . DOUBLE_QUOTE_STR
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_string = . SINGLE_QUOTE_STR
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_list = . OPEN_SQUARE expr_list CLOSE_SQUARE
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_map = . OPEN_CURLY map_list CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}


  Transitions:
    Symbol: comp_expr -> Node#163
    Symbol: math_expr -> Node#57
    Symbol: term -> Node#58
    Symbol: factor -> Node#59
    Symbol: pow_term -> Node#60
    Symbol: OP_MINUS -> Node#61
    Symbol: KW_NOT -> Node#62
    Symbol: inc_term -> Node#63
    Symbol: OP_INC -> Node#64
    Symbol: bottom_val -> Node#65
    Symbol: OP_DEC -> Node#66
    Symbol: comprehension -> Node#67
    Symbol: literal -> Node#68
    Symbol: name -> Node#69
    Symbol: OPEN_PAREN -> Node#70
    Symbol: OPEN_SQUARE -> Node#71
    Symbol: OPEN_CURLY -> Node#72
    Symbol: LIT_INT -> Node#73
    Symbol: LIT_FLOAT -> Node#74
    Symbol: lit_set -> Node#75
    Symbol: lit_string -> Node#76
    Symbol: lit_list -> Node#77
    Symbol: lit_map -> Node#78
    Symbol: KW_NULL -> Node#79
    Symbol: NAME -> Node#80
    Symbol: DOUBLE_QUOTE_STR -> Node#81
    Symbol: SINGLE_QUOTE_STR -> Node#82

Node#111
  Rules:
    equ_expr = equ_expr OP_NEQ . comp_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'KW_ELSE', 'KW_TO', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA'}

    comp_expr = . comp_expr OP_LT math_expr
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_BIT_AND', 'OP_GT', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ'}

    comp_expr = . comp_expr OP_LTEQ math_expr
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_BIT_AND', 'OP_GT', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ'}

    comp_expr = . comp_expr OP_GT math_expr
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_BIT_AND', 'OP_GT', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ'}

    comp_expr = . comp_expr OP_GTEQ math_expr
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_BIT_AND', 'OP_GT', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ'}

    comp_expr = . math_expr
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_BIT_AND', 'OP_GT', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ'}

    math_expr = . math_expr OP_PLUS term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    math_expr = . math_expr OP_MINUS term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    math_expr = . term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    term = . term OP_STAR factor
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    term = . term OP_SLASH factor
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    term = . term OP_MOD factor
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    term = . factor
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    factor = . factor OP_POW pow_term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    factor = . pow_term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    pow_term = . OP_MINUS inc_term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    pow_term = . KW_NOT inc_term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    pow_term = . inc_term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = . OP_INC bottom_val
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = . bottom_val OP_INC
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = . OP_DEC bottom_val
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = . bottom_val OP_DEC
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = . bottom_val
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . bottom_val OPEN_PAREN expr_list CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . bottom_val OPEN_PAREN CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . bottom_val OP_DOT name
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . bottom_val OPEN_SQUARE expression CLOSE_SQUARE
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . comprehension
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . literal
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . name
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . OPEN_PAREN expression CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    comprehension = . OPEN_SQUARE linear_comprehension CLOSE_SQUARE
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    comprehension = . OPEN_CURLY linear_comprehension CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression KW_IF expression CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . LIT_INT
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . LIT_FLOAT
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . lit_set
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . lit_string
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . lit_list
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . lit_map
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . KW_NULL
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    name = . NAME
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_set = . OPEN_CURLY expr_list CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_string = . DOUBLE_QUOTE_STR
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_string = . SINGLE_QUOTE_STR
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_list = . OPEN_SQUARE expr_list CLOSE_SQUARE
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_map = . OPEN_CURLY map_list CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}


  Transitions:
    Symbol: comp_expr -> Node#164
    Symbol: math_expr -> Node#57
    Symbol: term -> Node#58
    Symbol: factor -> Node#59
    Symbol: pow_term -> Node#60
    Symbol: OP_MINUS -> Node#61
    Symbol: KW_NOT -> Node#62
    Symbol: inc_term -> Node#63
    Symbol: OP_INC -> Node#64
    Symbol: bottom_val -> Node#65
    Symbol: OP_DEC -> Node#66
    Symbol: comprehension -> Node#67
    Symbol: literal -> Node#68
    Symbol: name -> Node#69
    Symbol: OPEN_PAREN -> Node#70
    Symbol: OPEN_SQUARE -> Node#71
    Symbol: OPEN_CURLY -> Node#72
    Symbol: LIT_INT -> Node#73
    Symbol: LIT_FLOAT -> Node#74
    Symbol: lit_set -> Node#75
    Symbol: lit_string -> Node#76
    Symbol: lit_list -> Node#77
    Symbol: lit_map -> Node#78
    Symbol: KW_NULL -> Node#79
    Symbol: NAME -> Node#80
    Symbol: DOUBLE_QUOTE_STR -> Node#81
    Symbol: SINGLE_QUOTE_STR -> Node#82

Node#112
  Rules:
    comp_expr = comp_expr OP_LT . math_expr
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_BIT_AND', 'OP_GT', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ'}

    math_expr = . math_expr OP_PLUS term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    math_expr = . math_expr OP_MINUS term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    math_expr = . term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    term = . term OP_STAR factor
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    term = . term OP_SLASH factor
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    term = . term OP_MOD factor
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    term = . factor
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    factor = . factor OP_POW pow_term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    factor = . pow_term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    pow_term = . OP_MINUS inc_term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    pow_term = . KW_NOT inc_term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    pow_term = . inc_term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = . OP_INC bottom_val
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = . bottom_val OP_INC
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = . OP_DEC bottom_val
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = . bottom_val OP_DEC
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = . bottom_val
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . bottom_val OPEN_PAREN expr_list CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . bottom_val OPEN_PAREN CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . bottom_val OP_DOT name
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . bottom_val OPEN_SQUARE expression CLOSE_SQUARE
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . comprehension
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . literal
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . name
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . OPEN_PAREN expression CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    comprehension = . OPEN_SQUARE linear_comprehension CLOSE_SQUARE
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    comprehension = . OPEN_CURLY linear_comprehension CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression KW_IF expression CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . LIT_INT
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . LIT_FLOAT
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . lit_set
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . lit_string
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . lit_list
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . lit_map
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . KW_NULL
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    name = . NAME
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_set = . OPEN_CURLY expr_list CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_string = . DOUBLE_QUOTE_STR
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_string = . SINGLE_QUOTE_STR
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_list = . OPEN_SQUARE expr_list CLOSE_SQUARE
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_map = . OPEN_CURLY map_list CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}


  Transitions:
    Symbol: math_expr -> Node#165
    Symbol: term -> Node#58
    Symbol: factor -> Node#59
    Symbol: pow_term -> Node#60
    Symbol: OP_MINUS -> Node#61
    Symbol: KW_NOT -> Node#62
    Symbol: inc_term -> Node#63
    Symbol: OP_INC -> Node#64
    Symbol: bottom_val -> Node#65
    Symbol: OP_DEC -> Node#66
    Symbol: comprehension -> Node#67
    Symbol: literal -> Node#68
    Symbol: name -> Node#69
    Symbol: OPEN_PAREN -> Node#70
    Symbol: OPEN_SQUARE -> Node#71
    Symbol: OPEN_CURLY -> Node#72
    Symbol: LIT_INT -> Node#73
    Symbol: LIT_FLOAT -> Node#74
    Symbol: lit_set -> Node#75
    Symbol: lit_string -> Node#76
    Symbol: lit_list -> Node#77
    Symbol: lit_map -> Node#78
    Symbol: KW_NULL -> Node#79
    Symbol: NAME -> Node#80
    Symbol: DOUBLE_QUOTE_STR -> Node#81
    Symbol: SINGLE_QUOTE_STR -> Node#82

Node#113
  Rules:
    comp_expr = comp_expr OP_LTEQ . math_expr
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_BIT_AND', 'OP_GT', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ'}

    math_expr = . math_expr OP_PLUS term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    math_expr = . math_expr OP_MINUS term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    math_expr = . term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    term = . term OP_STAR factor
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    term = . term OP_SLASH factor
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    term = . term OP_MOD factor
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    term = . factor
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    factor = . factor OP_POW pow_term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    factor = . pow_term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    pow_term = . OP_MINUS inc_term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    pow_term = . KW_NOT inc_term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    pow_term = . inc_term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = . OP_INC bottom_val
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = . bottom_val OP_INC
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = . OP_DEC bottom_val
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = . bottom_val OP_DEC
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = . bottom_val
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . bottom_val OPEN_PAREN expr_list CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . bottom_val OPEN_PAREN CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . bottom_val OP_DOT name
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . bottom_val OPEN_SQUARE expression CLOSE_SQUARE
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . comprehension
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . literal
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . name
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . OPEN_PAREN expression CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    comprehension = . OPEN_SQUARE linear_comprehension CLOSE_SQUARE
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    comprehension = . OPEN_CURLY linear_comprehension CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression KW_IF expression CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . LIT_INT
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . LIT_FLOAT
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . lit_set
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . lit_string
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . lit_list
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . lit_map
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . KW_NULL
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    name = . NAME
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_set = . OPEN_CURLY expr_list CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_string = . DOUBLE_QUOTE_STR
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_string = . SINGLE_QUOTE_STR
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_list = . OPEN_SQUARE expr_list CLOSE_SQUARE
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_map = . OPEN_CURLY map_list CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}


  Transitions:
    Symbol: math_expr -> Node#166
    Symbol: term -> Node#58
    Symbol: factor -> Node#59
    Symbol: pow_term -> Node#60
    Symbol: OP_MINUS -> Node#61
    Symbol: KW_NOT -> Node#62
    Symbol: inc_term -> Node#63
    Symbol: OP_INC -> Node#64
    Symbol: bottom_val -> Node#65
    Symbol: OP_DEC -> Node#66
    Symbol: comprehension -> Node#67
    Symbol: literal -> Node#68
    Symbol: name -> Node#69
    Symbol: OPEN_PAREN -> Node#70
    Symbol: OPEN_SQUARE -> Node#71
    Symbol: OPEN_CURLY -> Node#72
    Symbol: LIT_INT -> Node#73
    Symbol: LIT_FLOAT -> Node#74
    Symbol: lit_set -> Node#75
    Symbol: lit_string -> Node#76
    Symbol: lit_list -> Node#77
    Symbol: lit_map -> Node#78
    Symbol: KW_NULL -> Node#79
    Symbol: NAME -> Node#80
    Symbol: DOUBLE_QUOTE_STR -> Node#81
    Symbol: SINGLE_QUOTE_STR -> Node#82

Node#114
  Rules:
    comp_expr = comp_expr OP_GT . math_expr
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_BIT_AND', 'OP_GT', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ'}

    math_expr = . math_expr OP_PLUS term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    math_expr = . math_expr OP_MINUS term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    math_expr = . term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    term = . term OP_STAR factor
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    term = . term OP_SLASH factor
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    term = . term OP_MOD factor
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    term = . factor
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    factor = . factor OP_POW pow_term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    factor = . pow_term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    pow_term = . OP_MINUS inc_term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    pow_term = . KW_NOT inc_term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    pow_term = . inc_term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = . OP_INC bottom_val
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = . bottom_val OP_INC
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = . OP_DEC bottom_val
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = . bottom_val OP_DEC
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = . bottom_val
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . bottom_val OPEN_PAREN expr_list CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . bottom_val OPEN_PAREN CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . bottom_val OP_DOT name
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . bottom_val OPEN_SQUARE expression CLOSE_SQUARE
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . comprehension
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . literal
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . name
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . OPEN_PAREN expression CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    comprehension = . OPEN_SQUARE linear_comprehension CLOSE_SQUARE
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    comprehension = . OPEN_CURLY linear_comprehension CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression KW_IF expression CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . LIT_INT
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . LIT_FLOAT
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . lit_set
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . lit_string
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . lit_list
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . lit_map
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . KW_NULL
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    name = . NAME
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_set = . OPEN_CURLY expr_list CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_string = . DOUBLE_QUOTE_STR
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_string = . SINGLE_QUOTE_STR
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_list = . OPEN_SQUARE expr_list CLOSE_SQUARE
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_map = . OPEN_CURLY map_list CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}


  Transitions:
    Symbol: math_expr -> Node#167
    Symbol: term -> Node#58
    Symbol: factor -> Node#59
    Symbol: pow_term -> Node#60
    Symbol: OP_MINUS -> Node#61
    Symbol: KW_NOT -> Node#62
    Symbol: inc_term -> Node#63
    Symbol: OP_INC -> Node#64
    Symbol: bottom_val -> Node#65
    Symbol: OP_DEC -> Node#66
    Symbol: comprehension -> Node#67
    Symbol: literal -> Node#68
    Symbol: name -> Node#69
    Symbol: OPEN_PAREN -> Node#70
    Symbol: OPEN_SQUARE -> Node#71
    Symbol: OPEN_CURLY -> Node#72
    Symbol: LIT_INT -> Node#73
    Symbol: LIT_FLOAT -> Node#74
    Symbol: lit_set -> Node#75
    Symbol: lit_string -> Node#76
    Symbol: lit_list -> Node#77
    Symbol: lit_map -> Node#78
    Symbol: KW_NULL -> Node#79
    Symbol: NAME -> Node#80
    Symbol: DOUBLE_QUOTE_STR -> Node#81
    Symbol: SINGLE_QUOTE_STR -> Node#82

Node#115
  Rules:
    comp_expr = comp_expr OP_GTEQ . math_expr
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_BIT_AND', 'OP_GT', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ'}

    math_expr = . math_expr OP_PLUS term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    math_expr = . math_expr OP_MINUS term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    math_expr = . term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    term = . term OP_STAR factor
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    term = . term OP_SLASH factor
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    term = . term OP_MOD factor
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    term = . factor
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    factor = . factor OP_POW pow_term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    factor = . pow_term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    pow_term = . OP_MINUS inc_term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    pow_term = . KW_NOT inc_term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    pow_term = . inc_term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = . OP_INC bottom_val
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = . bottom_val OP_INC
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = . OP_DEC bottom_val
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = . bottom_val OP_DEC
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = . bottom_val
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . bottom_val OPEN_PAREN expr_list CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . bottom_val OPEN_PAREN CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . bottom_val OP_DOT name
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . bottom_val OPEN_SQUARE expression CLOSE_SQUARE
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . comprehension
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . literal
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . name
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . OPEN_PAREN expression CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    comprehension = . OPEN_SQUARE linear_comprehension CLOSE_SQUARE
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    comprehension = . OPEN_CURLY linear_comprehension CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression KW_IF expression CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . LIT_INT
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . LIT_FLOAT
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . lit_set
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . lit_string
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . lit_list
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . lit_map
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . KW_NULL
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    name = . NAME
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_set = . OPEN_CURLY expr_list CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_string = . DOUBLE_QUOTE_STR
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_string = . SINGLE_QUOTE_STR
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_list = . OPEN_SQUARE expr_list CLOSE_SQUARE
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_map = . OPEN_CURLY map_list CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}


  Transitions:
    Symbol: math_expr -> Node#168
    Symbol: term -> Node#58
    Symbol: factor -> Node#59
    Symbol: pow_term -> Node#60
    Symbol: OP_MINUS -> Node#61
    Symbol: KW_NOT -> Node#62
    Symbol: inc_term -> Node#63
    Symbol: OP_INC -> Node#64
    Symbol: bottom_val -> Node#65
    Symbol: OP_DEC -> Node#66
    Symbol: comprehension -> Node#67
    Symbol: literal -> Node#68
    Symbol: name -> Node#69
    Symbol: OPEN_PAREN -> Node#70
    Symbol: OPEN_SQUARE -> Node#71
    Symbol: OPEN_CURLY -> Node#72
    Symbol: LIT_INT -> Node#73
    Symbol: LIT_FLOAT -> Node#74
    Symbol: lit_set -> Node#75
    Symbol: lit_string -> Node#76
    Symbol: lit_list -> Node#77
    Symbol: lit_map -> Node#78
    Symbol: KW_NULL -> Node#79
    Symbol: NAME -> Node#80
    Symbol: DOUBLE_QUOTE_STR -> Node#81
    Symbol: SINGLE_QUOTE_STR -> Node#82

Node#116
  Rules:
    math_expr = math_expr OP_PLUS . term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    term = . term OP_STAR factor
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    term = . term OP_SLASH factor
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    term = . term OP_MOD factor
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    term = . factor
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    factor = . factor OP_POW pow_term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    factor = . pow_term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    pow_term = . OP_MINUS inc_term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    pow_term = . KW_NOT inc_term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    pow_term = . inc_term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = . OP_INC bottom_val
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = . bottom_val OP_INC
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = . OP_DEC bottom_val
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = . bottom_val OP_DEC
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = . bottom_val
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . bottom_val OPEN_PAREN expr_list CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . bottom_val OPEN_PAREN CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . bottom_val OP_DOT name
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . bottom_val OPEN_SQUARE expression CLOSE_SQUARE
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . comprehension
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . literal
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . name
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . OPEN_PAREN expression CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    comprehension = . OPEN_SQUARE linear_comprehension CLOSE_SQUARE
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    comprehension = . OPEN_CURLY linear_comprehension CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression KW_IF expression CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . LIT_INT
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . LIT_FLOAT
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . lit_set
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . lit_string
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . lit_list
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . lit_map
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . KW_NULL
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    name = . NAME
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_set = . OPEN_CURLY expr_list CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_string = . DOUBLE_QUOTE_STR
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_string = . SINGLE_QUOTE_STR
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_list = . OPEN_SQUARE expr_list CLOSE_SQUARE
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_map = . OPEN_CURLY map_list CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}


  Transitions:
    Symbol: term -> Node#169
    Symbol: factor -> Node#59
    Symbol: pow_term -> Node#60
    Symbol: OP_MINUS -> Node#61
    Symbol: KW_NOT -> Node#62
    Symbol: inc_term -> Node#63
    Symbol: OP_INC -> Node#64
    Symbol: bottom_val -> Node#65
    Symbol: OP_DEC -> Node#66
    Symbol: comprehension -> Node#67
    Symbol: literal -> Node#68
    Symbol: name -> Node#69
    Symbol: OPEN_PAREN -> Node#70
    Symbol: OPEN_SQUARE -> Node#71
    Symbol: OPEN_CURLY -> Node#72
    Symbol: LIT_INT -> Node#73
    Symbol: LIT_FLOAT -> Node#74
    Symbol: lit_set -> Node#75
    Symbol: lit_string -> Node#76
    Symbol: lit_list -> Node#77
    Symbol: lit_map -> Node#78
    Symbol: KW_NULL -> Node#79
    Symbol: NAME -> Node#80
    Symbol: DOUBLE_QUOTE_STR -> Node#81
    Symbol: SINGLE_QUOTE_STR -> Node#82

Node#117
  Rules:
    math_expr = math_expr OP_MINUS . term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    term = . term OP_STAR factor
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    term = . term OP_SLASH factor
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    term = . term OP_MOD factor
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    term = . factor
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    factor = . factor OP_POW pow_term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    factor = . pow_term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    pow_term = . OP_MINUS inc_term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    pow_term = . KW_NOT inc_term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    pow_term = . inc_term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = . OP_INC bottom_val
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = . bottom_val OP_INC
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = . OP_DEC bottom_val
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = . bottom_val OP_DEC
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = . bottom_val
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . bottom_val OPEN_PAREN expr_list CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . bottom_val OPEN_PAREN CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . bottom_val OP_DOT name
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . bottom_val OPEN_SQUARE expression CLOSE_SQUARE
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . comprehension
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . literal
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . name
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . OPEN_PAREN expression CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    comprehension = . OPEN_SQUARE linear_comprehension CLOSE_SQUARE
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    comprehension = . OPEN_CURLY linear_comprehension CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression KW_IF expression CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . LIT_INT
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . LIT_FLOAT
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . lit_set
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . lit_string
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . lit_list
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . lit_map
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . KW_NULL
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    name = . NAME
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_set = . OPEN_CURLY expr_list CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_string = . DOUBLE_QUOTE_STR
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_string = . SINGLE_QUOTE_STR
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_list = . OPEN_SQUARE expr_list CLOSE_SQUARE
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_map = . OPEN_CURLY map_list CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}


  Transitions:
    Symbol: term -> Node#170
    Symbol: factor -> Node#59
    Symbol: pow_term -> Node#60
    Symbol: OP_MINUS -> Node#61
    Symbol: KW_NOT -> Node#62
    Symbol: inc_term -> Node#63
    Symbol: OP_INC -> Node#64
    Symbol: bottom_val -> Node#65
    Symbol: OP_DEC -> Node#66
    Symbol: comprehension -> Node#67
    Symbol: literal -> Node#68
    Symbol: name -> Node#69
    Symbol: OPEN_PAREN -> Node#70
    Symbol: OPEN_SQUARE -> Node#71
    Symbol: OPEN_CURLY -> Node#72
    Symbol: LIT_INT -> Node#73
    Symbol: LIT_FLOAT -> Node#74
    Symbol: lit_set -> Node#75
    Symbol: lit_string -> Node#76
    Symbol: lit_list -> Node#77
    Symbol: lit_map -> Node#78
    Symbol: KW_NULL -> Node#79
    Symbol: NAME -> Node#80
    Symbol: DOUBLE_QUOTE_STR -> Node#81
    Symbol: SINGLE_QUOTE_STR -> Node#82

Node#118
  Rules:
    term = term OP_STAR . factor
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    factor = . factor OP_POW pow_term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    factor = . pow_term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    pow_term = . OP_MINUS inc_term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    pow_term = . KW_NOT inc_term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    pow_term = . inc_term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = . OP_INC bottom_val
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = . bottom_val OP_INC
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = . OP_DEC bottom_val
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = . bottom_val OP_DEC
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = . bottom_val
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . bottom_val OPEN_PAREN expr_list CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . bottom_val OPEN_PAREN CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . bottom_val OP_DOT name
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . bottom_val OPEN_SQUARE expression CLOSE_SQUARE
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . comprehension
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . literal
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . name
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . OPEN_PAREN expression CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    comprehension = . OPEN_SQUARE linear_comprehension CLOSE_SQUARE
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    comprehension = . OPEN_CURLY linear_comprehension CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression KW_IF expression CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . LIT_INT
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . LIT_FLOAT
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . lit_set
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . lit_string
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . lit_list
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . lit_map
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . KW_NULL
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    name = . NAME
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_set = . OPEN_CURLY expr_list CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_string = . DOUBLE_QUOTE_STR
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_string = . SINGLE_QUOTE_STR
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_list = . OPEN_SQUARE expr_list CLOSE_SQUARE
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_map = . OPEN_CURLY map_list CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}


  Transitions:
    Symbol: factor -> Node#171
    Symbol: pow_term -> Node#60
    Symbol: OP_MINUS -> Node#61
    Symbol: KW_NOT -> Node#62
    Symbol: inc_term -> Node#63
    Symbol: OP_INC -> Node#64
    Symbol: bottom_val -> Node#65
    Symbol: OP_DEC -> Node#66
    Symbol: comprehension -> Node#67
    Symbol: literal -> Node#68
    Symbol: name -> Node#69
    Symbol: OPEN_PAREN -> Node#70
    Symbol: OPEN_SQUARE -> Node#71
    Symbol: OPEN_CURLY -> Node#72
    Symbol: LIT_INT -> Node#73
    Symbol: LIT_FLOAT -> Node#74
    Symbol: lit_set -> Node#75
    Symbol: lit_string -> Node#76
    Symbol: lit_list -> Node#77
    Symbol: lit_map -> Node#78
    Symbol: KW_NULL -> Node#79
    Symbol: NAME -> Node#80
    Symbol: DOUBLE_QUOTE_STR -> Node#81
    Symbol: SINGLE_QUOTE_STR -> Node#82

Node#119
  Rules:
    term = term OP_SLASH . factor
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    factor = . factor OP_POW pow_term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    factor = . pow_term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    pow_term = . OP_MINUS inc_term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    pow_term = . KW_NOT inc_term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    pow_term = . inc_term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = . OP_INC bottom_val
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = . bottom_val OP_INC
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = . OP_DEC bottom_val
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = . bottom_val OP_DEC
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = . bottom_val
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . bottom_val OPEN_PAREN expr_list CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . bottom_val OPEN_PAREN CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . bottom_val OP_DOT name
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . bottom_val OPEN_SQUARE expression CLOSE_SQUARE
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . comprehension
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . literal
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . name
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . OPEN_PAREN expression CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    comprehension = . OPEN_SQUARE linear_comprehension CLOSE_SQUARE
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    comprehension = . OPEN_CURLY linear_comprehension CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression KW_IF expression CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . LIT_INT
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . LIT_FLOAT
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . lit_set
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . lit_string
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . lit_list
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . lit_map
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . KW_NULL
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    name = . NAME
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_set = . OPEN_CURLY expr_list CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_string = . DOUBLE_QUOTE_STR
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_string = . SINGLE_QUOTE_STR
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_list = . OPEN_SQUARE expr_list CLOSE_SQUARE
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_map = . OPEN_CURLY map_list CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}


  Transitions:
    Symbol: factor -> Node#172
    Symbol: pow_term -> Node#60
    Symbol: OP_MINUS -> Node#61
    Symbol: KW_NOT -> Node#62
    Symbol: inc_term -> Node#63
    Symbol: OP_INC -> Node#64
    Symbol: bottom_val -> Node#65
    Symbol: OP_DEC -> Node#66
    Symbol: comprehension -> Node#67
    Symbol: literal -> Node#68
    Symbol: name -> Node#69
    Symbol: OPEN_PAREN -> Node#70
    Symbol: OPEN_SQUARE -> Node#71
    Symbol: OPEN_CURLY -> Node#72
    Symbol: LIT_INT -> Node#73
    Symbol: LIT_FLOAT -> Node#74
    Symbol: lit_set -> Node#75
    Symbol: lit_string -> Node#76
    Symbol: lit_list -> Node#77
    Symbol: lit_map -> Node#78
    Symbol: KW_NULL -> Node#79
    Symbol: NAME -> Node#80
    Symbol: DOUBLE_QUOTE_STR -> Node#81
    Symbol: SINGLE_QUOTE_STR -> Node#82

Node#120
  Rules:
    term = term OP_MOD . factor
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    factor = . factor OP_POW pow_term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    factor = . pow_term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    pow_term = . OP_MINUS inc_term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    pow_term = . KW_NOT inc_term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    pow_term = . inc_term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = . OP_INC bottom_val
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = . bottom_val OP_INC
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = . OP_DEC bottom_val
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = . bottom_val OP_DEC
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = . bottom_val
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . bottom_val OPEN_PAREN expr_list CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . bottom_val OPEN_PAREN CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . bottom_val OP_DOT name
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . bottom_val OPEN_SQUARE expression CLOSE_SQUARE
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . comprehension
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . literal
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . name
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . OPEN_PAREN expression CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    comprehension = . OPEN_SQUARE linear_comprehension CLOSE_SQUARE
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    comprehension = . OPEN_CURLY linear_comprehension CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression KW_IF expression CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . LIT_INT
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . LIT_FLOAT
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . lit_set
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . lit_string
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . lit_list
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . lit_map
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . KW_NULL
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    name = . NAME
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_set = . OPEN_CURLY expr_list CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_string = . DOUBLE_QUOTE_STR
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_string = . SINGLE_QUOTE_STR
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_list = . OPEN_SQUARE expr_list CLOSE_SQUARE
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_map = . OPEN_CURLY map_list CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}


  Transitions:
    Symbol: factor -> Node#173
    Symbol: pow_term -> Node#60
    Symbol: OP_MINUS -> Node#61
    Symbol: KW_NOT -> Node#62
    Symbol: inc_term -> Node#63
    Symbol: OP_INC -> Node#64
    Symbol: bottom_val -> Node#65
    Symbol: OP_DEC -> Node#66
    Symbol: comprehension -> Node#67
    Symbol: literal -> Node#68
    Symbol: name -> Node#69
    Symbol: OPEN_PAREN -> Node#70
    Symbol: OPEN_SQUARE -> Node#71
    Symbol: OPEN_CURLY -> Node#72
    Symbol: LIT_INT -> Node#73
    Symbol: LIT_FLOAT -> Node#74
    Symbol: lit_set -> Node#75
    Symbol: lit_string -> Node#76
    Symbol: lit_list -> Node#77
    Symbol: lit_map -> Node#78
    Symbol: KW_NULL -> Node#79
    Symbol: NAME -> Node#80
    Symbol: DOUBLE_QUOTE_STR -> Node#81
    Symbol: SINGLE_QUOTE_STR -> Node#82

Node#121
  Rules:
    factor = factor OP_POW . pow_term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    pow_term = . OP_MINUS inc_term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    pow_term = . KW_NOT inc_term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    pow_term = . inc_term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = . OP_INC bottom_val
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = . bottom_val OP_INC
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = . OP_DEC bottom_val
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = . bottom_val OP_DEC
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = . bottom_val
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . bottom_val OPEN_PAREN expr_list CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . bottom_val OPEN_PAREN CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . bottom_val OP_DOT name
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . bottom_val OPEN_SQUARE expression CLOSE_SQUARE
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . comprehension
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . literal
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . name
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . OPEN_PAREN expression CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    comprehension = . OPEN_SQUARE linear_comprehension CLOSE_SQUARE
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    comprehension = . OPEN_CURLY linear_comprehension CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression KW_IF expression CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . LIT_INT
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . LIT_FLOAT
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . lit_set
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . lit_string
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . lit_list
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . lit_map
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . KW_NULL
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    name = . NAME
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_set = . OPEN_CURLY expr_list CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_string = . DOUBLE_QUOTE_STR
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_string = . SINGLE_QUOTE_STR
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_list = . OPEN_SQUARE expr_list CLOSE_SQUARE
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_map = . OPEN_CURLY map_list CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}


  Transitions:
    Symbol: pow_term -> Node#174
    Symbol: OP_MINUS -> Node#61
    Symbol: KW_NOT -> Node#62
    Symbol: inc_term -> Node#63
    Symbol: OP_INC -> Node#64
    Symbol: bottom_val -> Node#65
    Symbol: OP_DEC -> Node#66
    Symbol: comprehension -> Node#67
    Symbol: literal -> Node#68
    Symbol: name -> Node#69
    Symbol: OPEN_PAREN -> Node#70
    Symbol: OPEN_SQUARE -> Node#71
    Symbol: OPEN_CURLY -> Node#72
    Symbol: LIT_INT -> Node#73
    Symbol: LIT_FLOAT -> Node#74
    Symbol: lit_set -> Node#75
    Symbol: lit_string -> Node#76
    Symbol: lit_list -> Node#77
    Symbol: lit_map -> Node#78
    Symbol: KW_NULL -> Node#79
    Symbol: NAME -> Node#80
    Symbol: DOUBLE_QUOTE_STR -> Node#81
    Symbol: SINGLE_QUOTE_STR -> Node#82

Node#122
  Rules:
    pow_term = OP_MINUS inc_term .
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}


Node#123
  Rules:
    pow_term = KW_NOT inc_term .
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}


Node#124
  Rules:
    inc_term = OP_INC bottom_val .
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = bottom_val . OPEN_PAREN expr_list CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = bottom_val . OPEN_PAREN CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = bottom_val . OP_DOT name
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = bottom_val . OPEN_SQUARE expression CLOSE_SQUARE
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}


  Transitions:
    Symbol: OPEN_PAREN -> Node#127
    Symbol: OP_DOT -> Node#128
    Symbol: OPEN_SQUARE -> Node#129

Node#125
  Rules:
    inc_term = bottom_val OP_INC .
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}


Node#126
  Rules:
    inc_term = bottom_val OP_DEC .
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}


Node#127
  Rules:
    bottom_val = bottom_val OPEN_PAREN . expr_list CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'OP_ASSIGN', 'KW_ELSE', 'OP_AND_ASSIGN', 'CLOSE_PAREN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_OR_ASSIGN', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS', 'OP_SUB_ASSIGN'}

    bottom_val = bottom_val OPEN_PAREN . CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'OP_ASSIGN', 'KW_ELSE', 'OP_AND_ASSIGN', 'CLOSE_PAREN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_OR_ASSIGN', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS', 'OP_SUB_ASSIGN'}

    expr_list = . expression
    LA: {'CLOSE_PAREN'}

    expr_list = . expression COMMA expr_list
    LA: {'CLOSE_PAREN'}

    expression = . expression KW_OR log_and_expr
    LA: {'CLOSE_PAREN', 'COMMA', 'KW_OR'}

    expression = . log_and_expr
    LA: {'CLOSE_PAREN', 'COMMA', 'KW_OR'}

    log_and_expr = . log_and_expr KW_AND bit_or_expr
    LA: {'CLOSE_PAREN', 'COMMA', 'KW_OR', 'KW_AND'}

    log_and_expr = . bit_or_expr
    LA: {'CLOSE_PAREN', 'COMMA', 'KW_OR', 'KW_AND'}

    bit_or_expr = . bit_or_expr OP_BIT_OR bit_xor_expr
    LA: {'KW_OR', 'OP_BIT_OR', 'CLOSE_PAREN', 'COMMA', 'KW_AND'}

    bit_or_expr = . bit_xor_expr
    LA: {'KW_OR', 'OP_BIT_OR', 'CLOSE_PAREN', 'COMMA', 'KW_AND'}

    bit_xor_expr = . bit_xor_expr OP_BIT_XOR bit_and_expr
    LA: {'KW_OR', 'OP_BIT_OR', 'OP_BIT_XOR', 'CLOSE_PAREN', 'COMMA', 'KW_AND'}

    bit_xor_expr = . bit_and_expr
    LA: {'KW_OR', 'OP_BIT_OR', 'OP_BIT_XOR', 'CLOSE_PAREN', 'COMMA', 'KW_AND'}

    bit_and_expr = . bit_and_expr OP_BIT_AND equ_expr
    LA: {'KW_OR', 'OP_BIT_OR', 'OP_BIT_XOR', 'OP_BIT_AND', 'CLOSE_PAREN', 'COMMA', 'KW_AND'}

    bit_and_expr = . equ_expr
    LA: {'KW_OR', 'OP_BIT_OR', 'OP_BIT_XOR', 'OP_BIT_AND', 'CLOSE_PAREN', 'COMMA', 'KW_AND'}

    equ_expr = . equ_expr OP_EQ comp_expr
    LA: {'OP_BIT_AND', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'OP_NEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'COMMA'}

    equ_expr = . equ_expr OP_NEQ comp_expr
    LA: {'OP_BIT_AND', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'OP_NEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'COMMA'}

    equ_expr = . comp_expr
    LA: {'OP_BIT_AND', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'OP_NEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'COMMA'}

    comp_expr = . comp_expr OP_LT math_expr
    LA: {'OP_BIT_AND', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_NEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'COMMA', 'OP_LT'}

    comp_expr = . comp_expr OP_LTEQ math_expr
    LA: {'OP_BIT_AND', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_NEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'COMMA', 'OP_LT'}

    comp_expr = . comp_expr OP_GT math_expr
    LA: {'OP_BIT_AND', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_NEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'COMMA', 'OP_LT'}

    comp_expr = . comp_expr OP_GTEQ math_expr
    LA: {'OP_BIT_AND', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_NEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'COMMA', 'OP_LT'}

    comp_expr = . math_expr
    LA: {'OP_BIT_AND', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_NEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'COMMA', 'OP_LT'}

    math_expr = . math_expr OP_PLUS term
    LA: {'OP_BIT_AND', 'CLOSE_PAREN', 'OP_PLUS', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_MINUS', 'OP_NEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'COMMA', 'OP_LT'}

    math_expr = . math_expr OP_MINUS term
    LA: {'OP_BIT_AND', 'CLOSE_PAREN', 'OP_PLUS', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_MINUS', 'OP_NEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'COMMA', 'OP_LT'}

    math_expr = . term
    LA: {'OP_BIT_AND', 'CLOSE_PAREN', 'OP_PLUS', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_MINUS', 'OP_NEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'COMMA', 'OP_LT'}

    term = . term OP_STAR factor
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'COMMA', 'OP_LT', 'OP_SLASH'}

    term = . term OP_SLASH factor
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'COMMA', 'OP_LT', 'OP_SLASH'}

    term = . term OP_MOD factor
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'COMMA', 'OP_LT', 'OP_SLASH'}

    term = . factor
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'COMMA', 'OP_LT', 'OP_SLASH'}

    factor = . factor OP_POW pow_term
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'COMMA', 'OP_LT', 'OP_SLASH'}

    factor = . pow_term
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'COMMA', 'OP_LT', 'OP_SLASH'}

    pow_term = . OP_MINUS inc_term
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'COMMA', 'OP_LT', 'OP_SLASH'}

    pow_term = . KW_NOT inc_term
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'COMMA', 'OP_LT', 'OP_SLASH'}

    pow_term = . inc_term
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'COMMA', 'OP_LT', 'OP_SLASH'}

    inc_term = . OP_INC bottom_val
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'COMMA', 'OP_LT', 'OP_SLASH'}

    inc_term = . bottom_val OP_INC
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'COMMA', 'OP_LT', 'OP_SLASH'}

    inc_term = . OP_DEC bottom_val
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'COMMA', 'OP_LT', 'OP_SLASH'}

    inc_term = . bottom_val OP_DEC
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'COMMA', 'OP_LT', 'OP_SLASH'}

    inc_term = . bottom_val
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'COMMA', 'OP_LT', 'OP_SLASH'}

    bottom_val = . bottom_val OPEN_PAREN expr_list CLOSE_PAREN
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . bottom_val OPEN_PAREN CLOSE_PAREN
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . bottom_val OP_DOT name
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . bottom_val OPEN_SQUARE expression CLOSE_SQUARE
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . comprehension
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . literal
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . name
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . OPEN_PAREN expression CLOSE_PAREN
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    comprehension = . OPEN_SQUARE linear_comprehension CLOSE_SQUARE
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    comprehension = . OPEN_CURLY linear_comprehension CLOSE_CURLY
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression CLOSE_CURLY
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression KW_IF expression CLOSE_CURLY
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    literal = . LIT_INT
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    literal = . LIT_FLOAT
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    literal = . lit_set
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    literal = . lit_string
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    literal = . lit_list
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    literal = . lit_map
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    literal = . KW_NULL
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    name = . NAME
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    lit_set = . OPEN_CURLY expr_list CLOSE_CURLY
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    lit_string = . DOUBLE_QUOTE_STR
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    lit_string = . SINGLE_QUOTE_STR
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    lit_list = . OPEN_SQUARE expr_list CLOSE_SQUARE
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    lit_map = . OPEN_CURLY map_list CLOSE_CURLY
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}


  Transitions:
    Symbol: expr_list -> Node#175
    Symbol: CLOSE_PAREN -> Node#176
    Symbol: expression -> Node#177
    Symbol: log_and_expr -> Node#51
    Symbol: bit_or_expr -> Node#52
    Symbol: bit_xor_expr -> Node#53
    Symbol: bit_and_expr -> Node#54
    Symbol: equ_expr -> Node#55
    Symbol: comp_expr -> Node#56
    Symbol: math_expr -> Node#57
    Symbol: term -> Node#58
    Symbol: factor -> Node#59
    Symbol: pow_term -> Node#60
    Symbol: OP_MINUS -> Node#61
    Symbol: KW_NOT -> Node#62
    Symbol: inc_term -> Node#63
    Symbol: OP_INC -> Node#64
    Symbol: bottom_val -> Node#65
    Symbol: OP_DEC -> Node#66
    Symbol: comprehension -> Node#67
    Symbol: literal -> Node#68
    Symbol: name -> Node#69
    Symbol: OPEN_PAREN -> Node#70
    Symbol: OPEN_SQUARE -> Node#71
    Symbol: OPEN_CURLY -> Node#72
    Symbol: LIT_INT -> Node#73
    Symbol: LIT_FLOAT -> Node#74
    Symbol: lit_set -> Node#75
    Symbol: lit_string -> Node#76
    Symbol: lit_list -> Node#77
    Symbol: lit_map -> Node#78
    Symbol: KW_NULL -> Node#79
    Symbol: NAME -> Node#80
    Symbol: DOUBLE_QUOTE_STR -> Node#81
    Symbol: SINGLE_QUOTE_STR -> Node#82

Node#128
  Rules:
    bottom_val = bottom_val OP_DOT . name
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'OP_ASSIGN', 'KW_ELSE', 'OP_AND_ASSIGN', 'CLOSE_PAREN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_OR_ASSIGN', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS', 'OP_SUB_ASSIGN'}

    name = . NAME
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'OP_ASSIGN', 'KW_ELSE', 'OP_AND_ASSIGN', 'CLOSE_PAREN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_OR_ASSIGN', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS', 'OP_SUB_ASSIGN'}


  Transitions:
    Symbol: name -> Node#178
    Symbol: NAME -> Node#80

Node#129
  Rules:
    bottom_val = bottom_val OPEN_SQUARE . expression CLOSE_SQUARE
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'OP_ASSIGN', 'KW_ELSE', 'OP_AND_ASSIGN', 'CLOSE_PAREN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_OR_ASSIGN', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS', 'OP_SUB_ASSIGN'}

    expression = . expression KW_OR log_and_expr
    LA: {'KW_OR', 'CLOSE_SQUARE'}

    expression = . log_and_expr
    LA: {'KW_OR', 'CLOSE_SQUARE'}

    log_and_expr = . log_and_expr KW_AND bit_or_expr
    LA: {'KW_AND', 'KW_OR', 'CLOSE_SQUARE'}

    log_and_expr = . bit_or_expr
    LA: {'KW_AND', 'KW_OR', 'CLOSE_SQUARE'}

    bit_or_expr = . bit_or_expr OP_BIT_OR bit_xor_expr
    LA: {'KW_AND', 'KW_OR', 'CLOSE_SQUARE', 'OP_BIT_OR'}

    bit_or_expr = . bit_xor_expr
    LA: {'KW_AND', 'KW_OR', 'CLOSE_SQUARE', 'OP_BIT_OR'}

    bit_xor_expr = . bit_xor_expr OP_BIT_XOR bit_and_expr
    LA: {'KW_OR', 'OP_BIT_OR', 'KW_AND', 'CLOSE_SQUARE', 'OP_BIT_XOR'}

    bit_xor_expr = . bit_and_expr
    LA: {'KW_OR', 'OP_BIT_OR', 'KW_AND', 'CLOSE_SQUARE', 'OP_BIT_XOR'}

    bit_and_expr = . bit_and_expr OP_BIT_AND equ_expr
    LA: {'KW_OR', 'OP_BIT_OR', 'OP_BIT_AND', 'KW_AND', 'CLOSE_SQUARE', 'OP_BIT_XOR'}

    bit_and_expr = . equ_expr
    LA: {'KW_OR', 'OP_BIT_OR', 'OP_BIT_AND', 'KW_AND', 'CLOSE_SQUARE', 'OP_BIT_XOR'}

    equ_expr = . equ_expr OP_EQ comp_expr
    LA: {'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_BIT_AND', 'OP_NEQ', 'KW_AND', 'CLOSE_SQUARE', 'OP_BIT_XOR'}

    equ_expr = . equ_expr OP_NEQ comp_expr
    LA: {'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_BIT_AND', 'OP_NEQ', 'KW_AND', 'CLOSE_SQUARE', 'OP_BIT_XOR'}

    equ_expr = . comp_expr
    LA: {'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_BIT_AND', 'OP_NEQ', 'KW_AND', 'CLOSE_SQUARE', 'OP_BIT_XOR'}

    comp_expr = . comp_expr OP_LT math_expr
    LA: {'OP_BIT_AND', 'KW_AND', 'CLOSE_SQUARE', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    comp_expr = . comp_expr OP_LTEQ math_expr
    LA: {'OP_BIT_AND', 'KW_AND', 'CLOSE_SQUARE', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    comp_expr = . comp_expr OP_GT math_expr
    LA: {'OP_BIT_AND', 'KW_AND', 'CLOSE_SQUARE', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    comp_expr = . comp_expr OP_GTEQ math_expr
    LA: {'OP_BIT_AND', 'KW_AND', 'CLOSE_SQUARE', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    comp_expr = . math_expr
    LA: {'OP_BIT_AND', 'KW_AND', 'CLOSE_SQUARE', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    math_expr = . math_expr OP_PLUS term
    LA: {'OP_BIT_AND', 'OP_PLUS', 'KW_AND', 'CLOSE_SQUARE', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'OP_MINUS', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    math_expr = . math_expr OP_MINUS term
    LA: {'OP_BIT_AND', 'OP_PLUS', 'KW_AND', 'CLOSE_SQUARE', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'OP_MINUS', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    math_expr = . term
    LA: {'OP_BIT_AND', 'OP_PLUS', 'KW_AND', 'CLOSE_SQUARE', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'OP_MINUS', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    term = . term OP_STAR factor
    LA: {'OP_BIT_AND', 'CLOSE_SQUARE', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    term = . term OP_SLASH factor
    LA: {'OP_BIT_AND', 'CLOSE_SQUARE', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    term = . term OP_MOD factor
    LA: {'OP_BIT_AND', 'CLOSE_SQUARE', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    term = . factor
    LA: {'OP_BIT_AND', 'CLOSE_SQUARE', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    factor = . factor OP_POW pow_term
    LA: {'OP_BIT_AND', 'CLOSE_SQUARE', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    factor = . pow_term
    LA: {'OP_BIT_AND', 'CLOSE_SQUARE', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    pow_term = . OP_MINUS inc_term
    LA: {'OP_BIT_AND', 'CLOSE_SQUARE', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    pow_term = . KW_NOT inc_term
    LA: {'OP_BIT_AND', 'CLOSE_SQUARE', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    pow_term = . inc_term
    LA: {'OP_BIT_AND', 'CLOSE_SQUARE', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . OP_INC bottom_val
    LA: {'OP_BIT_AND', 'CLOSE_SQUARE', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . bottom_val OP_INC
    LA: {'OP_BIT_AND', 'CLOSE_SQUARE', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . OP_DEC bottom_val
    LA: {'OP_BIT_AND', 'CLOSE_SQUARE', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . bottom_val OP_DEC
    LA: {'OP_BIT_AND', 'CLOSE_SQUARE', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . bottom_val
    LA: {'OP_BIT_AND', 'CLOSE_SQUARE', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    bottom_val = . bottom_val OPEN_PAREN expr_list CLOSE_PAREN
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'CLOSE_SQUARE', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . bottom_val OPEN_PAREN CLOSE_PAREN
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'CLOSE_SQUARE', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . bottom_val OP_DOT name
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'CLOSE_SQUARE', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . bottom_val OPEN_SQUARE expression CLOSE_SQUARE
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'CLOSE_SQUARE', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . comprehension
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'CLOSE_SQUARE', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . literal
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'CLOSE_SQUARE', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . name
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'CLOSE_SQUARE', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . OPEN_PAREN expression CLOSE_PAREN
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'CLOSE_SQUARE', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    comprehension = . OPEN_SQUARE linear_comprehension CLOSE_SQUARE
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'CLOSE_SQUARE', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    comprehension = . OPEN_CURLY linear_comprehension CLOSE_CURLY
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'CLOSE_SQUARE', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression CLOSE_CURLY
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'CLOSE_SQUARE', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression KW_IF expression CLOSE_CURLY
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'CLOSE_SQUARE', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . LIT_INT
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'CLOSE_SQUARE', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . LIT_FLOAT
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'CLOSE_SQUARE', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . lit_set
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'CLOSE_SQUARE', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . lit_string
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'CLOSE_SQUARE', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . lit_list
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'CLOSE_SQUARE', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . lit_map
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'CLOSE_SQUARE', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . KW_NULL
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'CLOSE_SQUARE', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    name = . NAME
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'CLOSE_SQUARE', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    lit_set = . OPEN_CURLY expr_list CLOSE_CURLY
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'CLOSE_SQUARE', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    lit_string = . DOUBLE_QUOTE_STR
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'CLOSE_SQUARE', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    lit_string = . SINGLE_QUOTE_STR
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'CLOSE_SQUARE', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    lit_list = . OPEN_SQUARE expr_list CLOSE_SQUARE
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'CLOSE_SQUARE', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    lit_map = . OPEN_CURLY map_list CLOSE_CURLY
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'CLOSE_SQUARE', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}


  Transitions:
    Symbol: expression -> Node#179
    Symbol: log_and_expr -> Node#51
    Symbol: bit_or_expr -> Node#52
    Symbol: bit_xor_expr -> Node#53
    Symbol: bit_and_expr -> Node#54
    Symbol: equ_expr -> Node#55
    Symbol: comp_expr -> Node#56
    Symbol: math_expr -> Node#57
    Symbol: term -> Node#58
    Symbol: factor -> Node#59
    Symbol: pow_term -> Node#60
    Symbol: OP_MINUS -> Node#61
    Symbol: KW_NOT -> Node#62
    Symbol: inc_term -> Node#63
    Symbol: OP_INC -> Node#64
    Symbol: bottom_val -> Node#65
    Symbol: OP_DEC -> Node#66
    Symbol: comprehension -> Node#67
    Symbol: literal -> Node#68
    Symbol: name -> Node#69
    Symbol: OPEN_PAREN -> Node#70
    Symbol: OPEN_SQUARE -> Node#71
    Symbol: OPEN_CURLY -> Node#72
    Symbol: LIT_INT -> Node#73
    Symbol: LIT_FLOAT -> Node#74
    Symbol: lit_set -> Node#75
    Symbol: lit_string -> Node#76
    Symbol: lit_list -> Node#77
    Symbol: lit_map -> Node#78
    Symbol: KW_NULL -> Node#79
    Symbol: NAME -> Node#80
    Symbol: DOUBLE_QUOTE_STR -> Node#81
    Symbol: SINGLE_QUOTE_STR -> Node#82

Node#130
  Rules:
    inc_term = OP_DEC bottom_val .
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = bottom_val . OPEN_PAREN expr_list CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = bottom_val . OPEN_PAREN CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = bottom_val . OP_DOT name
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = bottom_val . OPEN_SQUARE expression CLOSE_SQUARE
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}


  Transitions:
    Symbol: OPEN_PAREN -> Node#127
    Symbol: OP_DOT -> Node#128
    Symbol: OPEN_SQUARE -> Node#129

Node#131
  Rules:
    bottom_val = OPEN_PAREN expression . CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_CURLY', 'OP_MINUS', 'OP_AND_ASSIGN', 'CLOSE_PAREN', 'OP_XOR_ASSIGN', 'KW_AND', 'KW_OR', 'OP_MOD_ASSIGN', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_ADD_ASSIGN', 'OP_OR_ASSIGN', 'OP_DOT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_NEQ', 'OP_PLUS', 'OP_SUB_ASSIGN', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_ASSIGN', 'KW_ELSE', 'OP_BIT_XOR', 'OP_BIT_OR', 'COMMA', 'OP_BIT_AND', 'OP_GT', 'OP_MUL_ASSIGN', 'KW_TO', 'OP_LTEQ'}

    expression = expression . KW_OR log_and_expr
    LA: {'CLOSE_PAREN', 'KW_OR'}


  Transitions:
    Symbol: CLOSE_PAREN -> Node#180
    Symbol: KW_OR -> Node#105

Node#132
  Rules:
    comprehension = OPEN_SQUARE linear_comprehension . CLOSE_SQUARE
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_CURLY', 'OP_MINUS', 'OP_AND_ASSIGN', 'CLOSE_PAREN', 'OP_XOR_ASSIGN', 'KW_AND', 'KW_OR', 'OP_MOD_ASSIGN', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_ADD_ASSIGN', 'OP_OR_ASSIGN', 'OP_DOT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_NEQ', 'OP_PLUS', 'OP_SUB_ASSIGN', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_ASSIGN', 'KW_ELSE', 'OP_BIT_XOR', 'OP_BIT_OR', 'COMMA', 'OP_BIT_AND', 'OP_GT', 'OP_MUL_ASSIGN', 'KW_TO', 'OP_LTEQ'}


  Transitions:
    Symbol: CLOSE_SQUARE -> Node#181

Node#133
  Rules:
    lit_list = OPEN_SQUARE expr_list . CLOSE_SQUARE
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_CURLY', 'OP_MINUS', 'OP_AND_ASSIGN', 'CLOSE_PAREN', 'OP_XOR_ASSIGN', 'KW_AND', 'KW_OR', 'OP_MOD_ASSIGN', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_ADD_ASSIGN', 'OP_OR_ASSIGN', 'OP_DOT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_NEQ', 'OP_PLUS', 'OP_SUB_ASSIGN', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_ASSIGN', 'KW_ELSE', 'OP_BIT_XOR', 'OP_BIT_OR', 'COMMA', 'OP_BIT_AND', 'OP_GT', 'OP_MUL_ASSIGN', 'KW_TO', 'OP_LTEQ'}


  Transitions:
    Symbol: CLOSE_SQUARE -> Node#182

Node#134
  Rules:
    linear_comprehension = expression . KW_FOR name KW_IN expression
    LA: {'CLOSE_SQUARE'}

    linear_comprehension = expression . KW_FOR name KW_IN expression KW_IF expression
    LA: {'CLOSE_SQUARE'}

    expr_list = expression .
    LA: {'CLOSE_SQUARE'}

    expr_list = expression . COMMA expr_list
    LA: {'CLOSE_SQUARE'}

    expression = expression . KW_OR log_and_expr
    LA: {'COMMA', 'KW_FOR', 'KW_OR', 'CLOSE_SQUARE'}


  Transitions:
    Symbol: KW_FOR -> Node#183
    Symbol: COMMA -> Node#184
    Symbol: KW_OR -> Node#105

Node#135
  Rules:
    comprehension = OPEN_CURLY linear_comprehension . CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'OP_ASSIGN', 'KW_ELSE', 'OP_AND_ASSIGN', 'CLOSE_PAREN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_NEQ', 'OP_OR_ASSIGN', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS', 'OP_SUB_ASSIGN'}


  Transitions:
    Symbol: CLOSE_CURLY -> Node#185

Node#136
  Rules:
    comprehension = OPEN_CURLY expression . COLON expression KW_FOR name KW_IN expression CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    comprehension = OPEN_CURLY expression . COLON expression KW_FOR name KW_IN expression KW_IF expression CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    linear_comprehension = expression . KW_FOR name KW_IN expression
    LA: {'CLOSE_CURLY'}

    linear_comprehension = expression . KW_FOR name KW_IN expression KW_IF expression
    LA: {'CLOSE_CURLY'}

    expression = expression . KW_OR log_and_expr
    LA: {'CLOSE_CURLY', 'KW_FOR', 'KW_OR', 'COLON', 'COMMA'}

    expr_list = expression .
    LA: {'CLOSE_CURLY'}

    expr_list = expression . COMMA expr_list
    LA: {'CLOSE_CURLY'}

    map_expression = expression . COLON expression
    LA: {'COMMA', 'CLOSE_CURLY'}


  Transitions:
    Symbol: COLON -> Node#186
    Symbol: KW_FOR -> Node#183
    Symbol: KW_OR -> Node#105
    Symbol: COMMA -> Node#184

Node#137
  Rules:
    lit_set = OPEN_CURLY expr_list . CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'OP_ASSIGN', 'KW_ELSE', 'OP_AND_ASSIGN', 'CLOSE_PAREN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_NEQ', 'OP_OR_ASSIGN', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS', 'OP_SUB_ASSIGN'}


  Transitions:
    Symbol: CLOSE_CURLY -> Node#187

Node#138
  Rules:
    lit_map = OPEN_CURLY map_list . CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'OP_ASSIGN', 'KW_ELSE', 'OP_AND_ASSIGN', 'CLOSE_PAREN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_NEQ', 'OP_OR_ASSIGN', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS', 'OP_SUB_ASSIGN'}


  Transitions:
    Symbol: CLOSE_CURLY -> Node#188

Node#139
  Rules:
    map_list = map_expression .
    LA: {'CLOSE_CURLY'}

    map_list = map_expression . COMMA map_list
    LA: {'CLOSE_CURLY'}


  Transitions:
    Symbol: COMMA -> Node#189

Node#140
  Rules:
    type = TYPE_ARRAY OP_LT type OP_GT .
    LA: {'COMMA', 'NAME', 'OP_GT'}


Node#141
  Rules:
    type = TYPE_LIST OP_LT type OP_GT .
    LA: {'COMMA', 'NAME', 'OP_GT'}


Node#142
  Rules:
    type = TYPE_MAP OP_LT type COMMA . type OP_GT
    LA: {'COMMA', 'NAME', 'OP_GT'}

    type = . TYPE_ARRAY OP_LT type OP_GT
    LA: {'OP_GT'}

    type = . TYPE_LIST OP_LT type OP_GT
    LA: {'OP_GT'}

    type = . TYPE_MAP OP_LT type COMMA type OP_GT
    LA: {'OP_GT'}

    type = . TYPE_SET OP_LT type OP_GT
    LA: {'OP_GT'}

    type = . TYPE_STR
    LA: {'OP_GT'}

    type = . TYPE_INT
    LA: {'OP_GT'}

    type = . TYPE_FLOAT
    LA: {'OP_GT'}

    type = . TYPE_BOOL
    LA: {'OP_GT'}

    type = . KW_NULL
    LA: {'OP_GT'}

    type = . NAME
    LA: {'OP_GT'}


  Transitions:
    Symbol: type -> Node#190
    Symbol: TYPE_ARRAY -> Node#22
    Symbol: TYPE_LIST -> Node#23
    Symbol: TYPE_MAP -> Node#24
    Symbol: TYPE_SET -> Node#25
    Symbol: TYPE_STR -> Node#26
    Symbol: TYPE_INT -> Node#27
    Symbol: TYPE_FLOAT -> Node#28
    Symbol: TYPE_BOOL -> Node#29
    Symbol: KW_NULL -> Node#30
    Symbol: NAME -> Node#84

Node#143
  Rules:
    type = TYPE_SET OP_LT type OP_GT .
    LA: {'COMMA', 'NAME', 'OP_GT'}


Node#144
  Rules:
    func_definition = access_modifier KW_INIT NAME OPEN_PAREN func_arg_definitions CLOSE_PAREN . body
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'CLOSE_CURLY', 'NAME', 'OPEN_CURLY', 'KW_DELETE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'TYPE_MAP', 'TYPE_BOOL', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'ACC_READONLY', 'ACC_PRIVATE', 'KW_NULL'}

    body = . OPEN_CURLY statements CLOSE_CURLY
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'CLOSE_CURLY', 'NAME', 'OPEN_CURLY', 'KW_DELETE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'TYPE_MAP', 'TYPE_BOOL', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'ACC_READONLY', 'ACC_PRIVATE', 'KW_NULL'}

    body = . OPEN_CURLY CLOSE_CURLY
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'CLOSE_CURLY', 'NAME', 'OPEN_CURLY', 'KW_DELETE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'TYPE_MAP', 'TYPE_BOOL', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'ACC_READONLY', 'ACC_PRIVATE', 'KW_NULL'}


  Transitions:
    Symbol: body -> Node#191
    Symbol: OPEN_CURLY -> Node#192

Node#145
  Rules:
    func_arg_def_list = func_arg_def COMMA . func_arg_def_list
    LA: {'CLOSE_PAREN'}

    func_arg_def_list = . func_arg_def
    LA: {'CLOSE_PAREN'}

    func_arg_def_list = . func_arg_def COMMA func_arg_def_list
    LA: {'CLOSE_PAREN'}

    func_arg_def = . type NAME OP_ASSIGN expression
    LA: {'CLOSE_PAREN', 'COMMA'}

    func_arg_def = . type NAME
    LA: {'CLOSE_PAREN', 'COMMA'}

    type = . TYPE_ARRAY OP_LT type OP_GT
    LA: {'NAME'}

    type = . TYPE_LIST OP_LT type OP_GT
    LA: {'NAME'}

    type = . TYPE_MAP OP_LT type COMMA type OP_GT
    LA: {'NAME'}

    type = . TYPE_SET OP_LT type OP_GT
    LA: {'NAME'}

    type = . TYPE_STR
    LA: {'NAME'}

    type = . TYPE_INT
    LA: {'NAME'}

    type = . TYPE_FLOAT
    LA: {'NAME'}

    type = . TYPE_BOOL
    LA: {'NAME'}

    type = . KW_NULL
    LA: {'NAME'}

    type = . NAME
    LA: {'NAME'}


  Transitions:
    Symbol: func_arg_def_list -> Node#193
    Symbol: func_arg_def -> Node#90
    Symbol: type -> Node#91
    Symbol: TYPE_ARRAY -> Node#22
    Symbol: TYPE_LIST -> Node#23
    Symbol: TYPE_MAP -> Node#24
    Symbol: TYPE_SET -> Node#25
    Symbol: TYPE_STR -> Node#26
    Symbol: TYPE_INT -> Node#27
    Symbol: TYPE_FLOAT -> Node#28
    Symbol: TYPE_BOOL -> Node#29
    Symbol: KW_NULL -> Node#30
    Symbol: NAME -> Node#84

Node#146
  Rules:
    func_arg_def = type NAME . OP_ASSIGN expression
    LA: {'CLOSE_PAREN', 'COMMA'}

    func_arg_def = type NAME .
    LA: {'CLOSE_PAREN', 'COMMA'}


  Transitions:
    Symbol: OP_ASSIGN -> Node#194

Node#147
  Rules:
    func_definition = access_modifier KW_DELETE NAME OPEN_PAREN func_arg_definitions CLOSE_PAREN . body
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'CLOSE_CURLY', 'NAME', 'OPEN_CURLY', 'KW_DELETE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'TYPE_MAP', 'TYPE_BOOL', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'ACC_READONLY', 'ACC_PRIVATE', 'KW_NULL'}

    body = . OPEN_CURLY statements CLOSE_CURLY
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'CLOSE_CURLY', 'NAME', 'OPEN_CURLY', 'KW_DELETE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'TYPE_MAP', 'TYPE_BOOL', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'ACC_READONLY', 'ACC_PRIVATE', 'KW_NULL'}

    body = . OPEN_CURLY CLOSE_CURLY
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'CLOSE_CURLY', 'NAME', 'OPEN_CURLY', 'KW_DELETE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'TYPE_MAP', 'TYPE_BOOL', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'ACC_READONLY', 'ACC_PRIVATE', 'KW_NULL'}


  Transitions:
    Symbol: body -> Node#195
    Symbol: OPEN_CURLY -> Node#192

Node#148
  Rules:
    class_definition = access_modifier KW_CLASS NAME OPEN_PAREN NAME CLOSE_PAREN . class_body
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'KW_DELETE', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    class_body = . OPEN_CURLY class_statements CLOSE_CURLY
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'KW_DELETE', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    class_body = . OPEN_CURLY CLOSE_CURLY
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'KW_DELETE', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}


  Transitions:
    Symbol: class_body -> Node#196
    Symbol: OPEN_CURLY -> Node#45

Node#149
  Rules:
    class_body = OPEN_CURLY class_statements CLOSE_CURLY .
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'KW_DELETE', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}


Node#150
  Rules:
    class_statements = class_statement class_statements .
    LA: {'CLOSE_CURLY'}


Node#151
  Rules:
    class_statement = access_modifier special_mod . OPEN_CURLY var_def_list CLOSE_CURLY
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'CLOSE_CURLY', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'OPEN_CURLY', 'ACC_PUBLIC', 'KW_DELETE', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    func_definition = access_modifier special_mod . type NAME OPEN_PAREN func_arg_definitions CLOSE_PAREN body
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'CLOSE_CURLY', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'OPEN_CURLY', 'ACC_PUBLIC', 'KW_DELETE', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    type = . TYPE_ARRAY OP_LT type OP_GT
    LA: {'NAME'}

    type = . TYPE_LIST OP_LT type OP_GT
    LA: {'NAME'}

    type = . TYPE_MAP OP_LT type COMMA type OP_GT
    LA: {'NAME'}

    type = . TYPE_SET OP_LT type OP_GT
    LA: {'NAME'}

    type = . TYPE_STR
    LA: {'NAME'}

    type = . TYPE_INT
    LA: {'NAME'}

    type = . TYPE_FLOAT
    LA: {'NAME'}

    type = . TYPE_BOOL
    LA: {'NAME'}

    type = . KW_NULL
    LA: {'NAME'}

    type = . NAME
    LA: {'NAME'}


  Transitions:
    Symbol: OPEN_CURLY -> Node#197
    Symbol: type -> Node#198
    Symbol: TYPE_ARRAY -> Node#22
    Symbol: TYPE_LIST -> Node#23
    Symbol: TYPE_MAP -> Node#24
    Symbol: TYPE_SET -> Node#25
    Symbol: TYPE_STR -> Node#26
    Symbol: TYPE_INT -> Node#27
    Symbol: TYPE_FLOAT -> Node#28
    Symbol: TYPE_BOOL -> Node#29
    Symbol: KW_NULL -> Node#30
    Symbol: NAME -> Node#84

Node#152
  Rules:
    enum_definition = access_modifier KW_ENUM NAME OPEN_CURLY enum_statements CLOSE_CURLY .
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'KW_DELETE', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}


Node#153
  Rules:
    enum_statements = enum_statement enum_statements .
    LA: {'CLOSE_CURLY'}


Node#154
  Rules:
    enum_statement = NAME SEMICOLON .
    LA: {'CLOSE_CURLY', 'NAME'}


Node#155
  Rules:
    enum_statement = NAME OP_ASSIGN . LIT_INT SEMICOLON
    LA: {'CLOSE_CURLY', 'NAME'}


  Transitions:
    Symbol: LIT_INT -> Node#199

Node#156
  Rules:
    func_definition = access_modifier special_mod type NAME OPEN_PAREN func_arg_definitions CLOSE_PAREN . body
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'CLOSE_CURLY', 'NAME', 'OPEN_CURLY', 'KW_DELETE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'TYPE_MAP', 'TYPE_BOOL', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'ACC_READONLY', 'ACC_PRIVATE', 'KW_NULL'}

    body = . OPEN_CURLY statements CLOSE_CURLY
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'CLOSE_CURLY', 'NAME', 'OPEN_CURLY', 'KW_DELETE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'TYPE_MAP', 'TYPE_BOOL', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'ACC_READONLY', 'ACC_PRIVATE', 'KW_NULL'}

    body = . OPEN_CURLY CLOSE_CURLY
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'CLOSE_CURLY', 'NAME', 'OPEN_CURLY', 'KW_DELETE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'TYPE_MAP', 'TYPE_BOOL', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'ACC_READONLY', 'ACC_PRIVATE', 'KW_NULL'}


  Transitions:
    Symbol: body -> Node#200
    Symbol: OPEN_CURLY -> Node#192

Node#157
  Rules:
    var_definition = access_modifier special_mod type NAME OP_ASSIGN expression SEMICOLON .
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'CLOSE_CURLY', 'NAME', 'KW_DELETE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'TYPE_MAP', 'TYPE_BOOL', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'ACC_READONLY', 'ACC_PRIVATE', 'KW_NULL'}


Node#158
  Rules:
    expression = expression KW_OR log_and_expr .
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'KW_IF', 'KW_ELSE', 'KW_TO', 'CLOSE_PAREN', 'KW_OR', 'COMMA'}

    log_and_expr = log_and_expr . KW_AND bit_or_expr
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'KW_IF', 'KW_ELSE', 'KW_TO', 'CLOSE_PAREN', 'KW_AND', 'KW_OR', 'COMMA'}


  Transitions:
    Symbol: KW_AND -> Node#106

Node#159
  Rules:
    log_and_expr = log_and_expr KW_AND bit_or_expr .
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'KW_IF', 'KW_ELSE', 'KW_TO', 'CLOSE_PAREN', 'KW_AND', 'KW_OR', 'COMMA'}

    bit_or_expr = bit_or_expr . OP_BIT_OR bit_xor_expr
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'KW_IF', 'KW_ELSE', 'KW_TO', 'CLOSE_PAREN', 'KW_AND', 'KW_OR', 'OP_BIT_OR', 'COMMA'}


  Transitions:
    Symbol: OP_BIT_OR -> Node#107

Node#160
  Rules:
    bit_or_expr = bit_or_expr OP_BIT_OR bit_xor_expr .
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'KW_IF', 'KW_ELSE', 'KW_TO', 'CLOSE_PAREN', 'KW_AND', 'KW_OR', 'OP_BIT_OR', 'COMMA'}

    bit_xor_expr = bit_xor_expr . OP_BIT_XOR bit_and_expr
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'KW_IF', 'KW_ELSE', 'KW_TO', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA'}


  Transitions:
    Symbol: OP_BIT_XOR -> Node#108

Node#161
  Rules:
    bit_xor_expr = bit_xor_expr OP_BIT_XOR bit_and_expr .
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'KW_IF', 'KW_ELSE', 'KW_TO', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA'}

    bit_and_expr = bit_and_expr . OP_BIT_AND equ_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'KW_IF', 'KW_ELSE', 'KW_TO', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA'}


  Transitions:
    Symbol: OP_BIT_AND -> Node#109

Node#162
  Rules:
    bit_and_expr = bit_and_expr OP_BIT_AND equ_expr .
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'KW_IF', 'KW_ELSE', 'KW_TO', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA'}

    equ_expr = equ_expr . OP_EQ comp_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'KW_ELSE', 'KW_TO', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA'}

    equ_expr = equ_expr . OP_NEQ comp_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'KW_ELSE', 'KW_TO', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA'}


  Transitions:
    Symbol: OP_EQ -> Node#110
    Symbol: OP_NEQ -> Node#111

Node#163
  Rules:
    equ_expr = equ_expr OP_EQ comp_expr .
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'KW_ELSE', 'KW_TO', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA'}

    comp_expr = comp_expr . OP_LT math_expr
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_BIT_AND', 'OP_GT', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ'}

    comp_expr = comp_expr . OP_LTEQ math_expr
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_BIT_AND', 'OP_GT', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ'}

    comp_expr = comp_expr . OP_GT math_expr
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_BIT_AND', 'OP_GT', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ'}

    comp_expr = comp_expr . OP_GTEQ math_expr
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_BIT_AND', 'OP_GT', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ'}


  Transitions:
    Symbol: OP_LT -> Node#112
    Symbol: OP_LTEQ -> Node#113
    Symbol: OP_GT -> Node#114
    Symbol: OP_GTEQ -> Node#115

Node#164
  Rules:
    equ_expr = equ_expr OP_NEQ comp_expr .
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'KW_ELSE', 'KW_TO', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA'}

    comp_expr = comp_expr . OP_LT math_expr
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_BIT_AND', 'OP_GT', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ'}

    comp_expr = comp_expr . OP_LTEQ math_expr
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_BIT_AND', 'OP_GT', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ'}

    comp_expr = comp_expr . OP_GT math_expr
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_BIT_AND', 'OP_GT', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ'}

    comp_expr = comp_expr . OP_GTEQ math_expr
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_BIT_AND', 'OP_GT', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ'}


  Transitions:
    Symbol: OP_LT -> Node#112
    Symbol: OP_LTEQ -> Node#113
    Symbol: OP_GT -> Node#114
    Symbol: OP_GTEQ -> Node#115

Node#165
  Rules:
    comp_expr = comp_expr OP_LT math_expr .
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_BIT_AND', 'OP_GT', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ'}

    math_expr = math_expr . OP_PLUS term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    math_expr = math_expr . OP_MINUS term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}


  Transitions:
    Symbol: OP_PLUS -> Node#116
    Symbol: OP_MINUS -> Node#117

Node#166
  Rules:
    comp_expr = comp_expr OP_LTEQ math_expr .
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_BIT_AND', 'OP_GT', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ'}

    math_expr = math_expr . OP_PLUS term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    math_expr = math_expr . OP_MINUS term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}


  Transitions:
    Symbol: OP_PLUS -> Node#116
    Symbol: OP_MINUS -> Node#117

Node#167
  Rules:
    comp_expr = comp_expr OP_GT math_expr .
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_BIT_AND', 'OP_GT', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ'}

    math_expr = math_expr . OP_PLUS term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    math_expr = math_expr . OP_MINUS term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}


  Transitions:
    Symbol: OP_PLUS -> Node#116
    Symbol: OP_MINUS -> Node#117

Node#168
  Rules:
    comp_expr = comp_expr OP_GTEQ math_expr .
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_BIT_AND', 'OP_GT', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ'}

    math_expr = math_expr . OP_PLUS term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    math_expr = math_expr . OP_MINUS term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}


  Transitions:
    Symbol: OP_PLUS -> Node#116
    Symbol: OP_MINUS -> Node#117

Node#169
  Rules:
    math_expr = math_expr OP_PLUS term .
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    term = term . OP_STAR factor
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    term = term . OP_SLASH factor
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    term = term . OP_MOD factor
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}


  Transitions:
    Symbol: OP_STAR -> Node#118
    Symbol: OP_SLASH -> Node#119
    Symbol: OP_MOD -> Node#120

Node#170
  Rules:
    math_expr = math_expr OP_MINUS term .
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    term = term . OP_STAR factor
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    term = term . OP_SLASH factor
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    term = term . OP_MOD factor
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}


  Transitions:
    Symbol: OP_STAR -> Node#118
    Symbol: OP_SLASH -> Node#119
    Symbol: OP_MOD -> Node#120

Node#171
  Rules:
    term = term OP_STAR factor .
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    factor = factor . OP_POW pow_term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}


  Transitions:
    Symbol: OP_POW -> Node#121

Node#172
  Rules:
    term = term OP_SLASH factor .
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    factor = factor . OP_POW pow_term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}


  Transitions:
    Symbol: OP_POW -> Node#121

Node#173
  Rules:
    term = term OP_MOD factor .
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    factor = factor . OP_POW pow_term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}


  Transitions:
    Symbol: OP_POW -> Node#121

Node#174
  Rules:
    factor = factor OP_POW pow_term .
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'KW_ELSE', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}


Node#175
  Rules:
    bottom_val = bottom_val OPEN_PAREN expr_list . CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_CURLY', 'OP_MINUS', 'OP_AND_ASSIGN', 'CLOSE_PAREN', 'OP_XOR_ASSIGN', 'KW_AND', 'KW_OR', 'OP_MOD_ASSIGN', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_ADD_ASSIGN', 'OP_OR_ASSIGN', 'OP_DOT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_PLUS', 'OP_NEQ', 'OP_SUB_ASSIGN', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_ASSIGN', 'KW_ELSE', 'OP_BIT_XOR', 'OP_BIT_OR', 'COMMA', 'OP_BIT_AND', 'OP_GT', 'OP_MUL_ASSIGN', 'KW_TO', 'OP_LTEQ'}


  Transitions:
    Symbol: CLOSE_PAREN -> Node#201

Node#176
  Rules:
    bottom_val = bottom_val OPEN_PAREN CLOSE_PAREN .
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_CURLY', 'OP_MINUS', 'OP_AND_ASSIGN', 'CLOSE_PAREN', 'OP_XOR_ASSIGN', 'KW_AND', 'KW_OR', 'OP_MOD_ASSIGN', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_ADD_ASSIGN', 'OP_OR_ASSIGN', 'OP_DOT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_PLUS', 'OP_NEQ', 'OP_SUB_ASSIGN', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_ASSIGN', 'KW_ELSE', 'OP_BIT_XOR', 'OP_BIT_OR', 'COMMA', 'OP_BIT_AND', 'OP_GT', 'OP_MUL_ASSIGN', 'KW_TO', 'OP_LTEQ'}


Node#177
  Rules:
    expr_list = expression .
    LA: {'CLOSE_PAREN', 'CLOSE_CURLY', 'CLOSE_SQUARE'}

    expr_list = expression . COMMA expr_list
    LA: {'CLOSE_PAREN', 'CLOSE_CURLY', 'CLOSE_SQUARE'}

    expression = expression . KW_OR log_and_expr
    LA: {'CLOSE_CURLY', 'CLOSE_PAREN', 'CLOSE_SQUARE', 'KW_OR', 'COMMA'}


  Transitions:
    Symbol: COMMA -> Node#184
    Symbol: KW_OR -> Node#105

Node#178
  Rules:
    bottom_val = bottom_val OP_DOT name .
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_CURLY', 'OP_MINUS', 'OP_AND_ASSIGN', 'CLOSE_PAREN', 'OP_XOR_ASSIGN', 'KW_AND', 'KW_OR', 'OP_MOD_ASSIGN', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_ADD_ASSIGN', 'OP_OR_ASSIGN', 'OP_DOT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_PLUS', 'OP_NEQ', 'OP_SUB_ASSIGN', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_ASSIGN', 'KW_ELSE', 'OP_BIT_XOR', 'OP_BIT_OR', 'COMMA', 'OP_BIT_AND', 'OP_GT', 'OP_MUL_ASSIGN', 'KW_TO', 'OP_LTEQ'}


Node#179
  Rules:
    bottom_val = bottom_val OPEN_SQUARE expression . CLOSE_SQUARE
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_CURLY', 'OP_MINUS', 'OP_AND_ASSIGN', 'CLOSE_PAREN', 'OP_XOR_ASSIGN', 'KW_AND', 'KW_OR', 'OP_MOD_ASSIGN', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_ADD_ASSIGN', 'OP_OR_ASSIGN', 'OP_DOT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_PLUS', 'OP_NEQ', 'OP_SUB_ASSIGN', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_ASSIGN', 'KW_ELSE', 'OP_BIT_XOR', 'OP_BIT_OR', 'COMMA', 'OP_BIT_AND', 'OP_GT', 'OP_MUL_ASSIGN', 'KW_TO', 'OP_LTEQ'}

    expression = expression . KW_OR log_and_expr
    LA: {'KW_OR', 'CLOSE_SQUARE'}


  Transitions:
    Symbol: CLOSE_SQUARE -> Node#202
    Symbol: KW_OR -> Node#105

Node#180
  Rules:
    bottom_val = OPEN_PAREN expression CLOSE_PAREN .
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_CURLY', 'OP_MINUS', 'OP_AND_ASSIGN', 'CLOSE_PAREN', 'OP_XOR_ASSIGN', 'KW_AND', 'KW_OR', 'OP_MOD_ASSIGN', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_ADD_ASSIGN', 'OP_OR_ASSIGN', 'OP_DOT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_NEQ', 'OP_PLUS', 'OP_SUB_ASSIGN', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_ASSIGN', 'KW_ELSE', 'OP_BIT_XOR', 'OP_BIT_OR', 'COMMA', 'OP_BIT_AND', 'OP_GT', 'OP_MUL_ASSIGN', 'KW_TO', 'OP_LTEQ'}


Node#181
  Rules:
    comprehension = OPEN_SQUARE linear_comprehension CLOSE_SQUARE .
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_CURLY', 'OP_MINUS', 'OP_AND_ASSIGN', 'CLOSE_PAREN', 'OP_XOR_ASSIGN', 'KW_AND', 'KW_OR', 'OP_MOD_ASSIGN', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_ADD_ASSIGN', 'OP_OR_ASSIGN', 'OP_DOT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_NEQ', 'OP_PLUS', 'OP_SUB_ASSIGN', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_ASSIGN', 'KW_ELSE', 'OP_BIT_XOR', 'OP_BIT_OR', 'COMMA', 'OP_BIT_AND', 'OP_GT', 'OP_MUL_ASSIGN', 'KW_TO', 'OP_LTEQ'}


Node#182
  Rules:
    lit_list = OPEN_SQUARE expr_list CLOSE_SQUARE .
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_CURLY', 'OP_MINUS', 'OP_AND_ASSIGN', 'CLOSE_PAREN', 'OP_XOR_ASSIGN', 'KW_AND', 'KW_OR', 'OP_MOD_ASSIGN', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_ADD_ASSIGN', 'OP_OR_ASSIGN', 'OP_DOT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_NEQ', 'OP_PLUS', 'OP_SUB_ASSIGN', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_ASSIGN', 'KW_ELSE', 'OP_BIT_XOR', 'OP_BIT_OR', 'COMMA', 'OP_BIT_AND', 'OP_GT', 'OP_MUL_ASSIGN', 'KW_TO', 'OP_LTEQ'}


Node#183
  Rules:
    linear_comprehension = expression KW_FOR . name KW_IN expression
    LA: {'CLOSE_CURLY', 'CLOSE_SQUARE'}

    linear_comprehension = expression KW_FOR . name KW_IN expression KW_IF expression
    LA: {'CLOSE_CURLY', 'CLOSE_SQUARE'}

    name = . NAME
    LA: {'KW_IN'}


  Transitions:
    Symbol: name -> Node#203
    Symbol: NAME -> Node#80

Node#184
  Rules:
    expr_list = expression COMMA . expr_list
    LA: {'CLOSE_PAREN', 'CLOSE_CURLY', 'CLOSE_SQUARE'}

    expr_list = . expression
    LA: {'CLOSE_PAREN', 'CLOSE_CURLY', 'CLOSE_SQUARE'}

    expr_list = . expression COMMA expr_list
    LA: {'CLOSE_PAREN', 'CLOSE_CURLY', 'CLOSE_SQUARE'}

    expression = . expression KW_OR log_and_expr
    LA: {'CLOSE_CURLY', 'KW_OR', 'COMMA', 'CLOSE_SQUARE', 'CLOSE_PAREN'}

    expression = . log_and_expr
    LA: {'CLOSE_CURLY', 'KW_OR', 'COMMA', 'CLOSE_SQUARE', 'CLOSE_PAREN'}

    log_and_expr = . log_and_expr KW_AND bit_or_expr
    LA: {'CLOSE_CURLY', 'CLOSE_PAREN', 'KW_AND', 'CLOSE_SQUARE', 'KW_OR', 'COMMA'}

    log_and_expr = . bit_or_expr
    LA: {'CLOSE_CURLY', 'CLOSE_PAREN', 'KW_AND', 'CLOSE_SQUARE', 'KW_OR', 'COMMA'}

    bit_or_expr = . bit_or_expr OP_BIT_OR bit_xor_expr
    LA: {'CLOSE_CURLY', 'CLOSE_PAREN', 'KW_AND', 'CLOSE_SQUARE', 'KW_OR', 'OP_BIT_OR', 'COMMA'}

    bit_or_expr = . bit_xor_expr
    LA: {'CLOSE_CURLY', 'CLOSE_PAREN', 'KW_AND', 'CLOSE_SQUARE', 'KW_OR', 'OP_BIT_OR', 'COMMA'}

    bit_xor_expr = . bit_xor_expr OP_BIT_XOR bit_and_expr
    LA: {'CLOSE_CURLY', 'CLOSE_PAREN', 'KW_AND', 'CLOSE_SQUARE', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA'}

    bit_xor_expr = . bit_and_expr
    LA: {'CLOSE_CURLY', 'CLOSE_PAREN', 'KW_AND', 'CLOSE_SQUARE', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA'}

    bit_and_expr = . bit_and_expr OP_BIT_AND equ_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'CLOSE_PAREN', 'KW_AND', 'CLOSE_SQUARE', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA'}

    bit_and_expr = . equ_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'CLOSE_PAREN', 'KW_AND', 'CLOSE_SQUARE', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA'}

    equ_expr = . equ_expr OP_EQ comp_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'CLOSE_SQUARE', 'OP_EQ', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA'}

    equ_expr = . equ_expr OP_NEQ comp_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'CLOSE_SQUARE', 'OP_EQ', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA'}

    equ_expr = . comp_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'CLOSE_SQUARE', 'OP_EQ', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA'}

    comp_expr = . comp_expr OP_LT math_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'CLOSE_SQUARE', 'OP_EQ', 'OP_GT', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_LT'}

    comp_expr = . comp_expr OP_LTEQ math_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'CLOSE_SQUARE', 'OP_EQ', 'OP_GT', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_LT'}

    comp_expr = . comp_expr OP_GT math_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'CLOSE_SQUARE', 'OP_EQ', 'OP_GT', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_LT'}

    comp_expr = . comp_expr OP_GTEQ math_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'CLOSE_SQUARE', 'OP_EQ', 'OP_GT', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_LT'}

    comp_expr = . math_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'CLOSE_SQUARE', 'OP_EQ', 'OP_GT', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_LT'}

    math_expr = . math_expr OP_PLUS term
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'CLOSE_SQUARE', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'COMMA', 'OP_LT'}

    math_expr = . math_expr OP_MINUS term
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'CLOSE_SQUARE', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'COMMA', 'OP_LT'}

    math_expr = . term
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'CLOSE_SQUARE', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'COMMA', 'OP_LT'}

    term = . term OP_STAR factor
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'CLOSE_SQUARE', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'COMMA', 'OP_LT', 'OP_SLASH'}

    term = . term OP_SLASH factor
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'CLOSE_SQUARE', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'COMMA', 'OP_LT', 'OP_SLASH'}

    term = . term OP_MOD factor
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'CLOSE_SQUARE', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'COMMA', 'OP_LT', 'OP_SLASH'}

    term = . factor
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'CLOSE_SQUARE', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'COMMA', 'OP_LT', 'OP_SLASH'}

    factor = . factor OP_POW pow_term
    LA: {'CLOSE_CURLY', 'CLOSE_SQUARE', 'OP_EQ', 'OP_MINUS', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    factor = . pow_term
    LA: {'CLOSE_CURLY', 'CLOSE_SQUARE', 'OP_EQ', 'OP_MINUS', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    pow_term = . OP_MINUS inc_term
    LA: {'CLOSE_CURLY', 'CLOSE_SQUARE', 'OP_EQ', 'OP_MINUS', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    pow_term = . KW_NOT inc_term
    LA: {'CLOSE_CURLY', 'CLOSE_SQUARE', 'OP_EQ', 'OP_MINUS', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    pow_term = . inc_term
    LA: {'CLOSE_CURLY', 'CLOSE_SQUARE', 'OP_EQ', 'OP_MINUS', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = . OP_INC bottom_val
    LA: {'CLOSE_CURLY', 'CLOSE_SQUARE', 'OP_EQ', 'OP_MINUS', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = . bottom_val OP_INC
    LA: {'CLOSE_CURLY', 'CLOSE_SQUARE', 'OP_EQ', 'OP_MINUS', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = . OP_DEC bottom_val
    LA: {'CLOSE_CURLY', 'CLOSE_SQUARE', 'OP_EQ', 'OP_MINUS', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = . bottom_val OP_DEC
    LA: {'CLOSE_CURLY', 'CLOSE_SQUARE', 'OP_EQ', 'OP_MINUS', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    inc_term = . bottom_val
    LA: {'CLOSE_CURLY', 'CLOSE_SQUARE', 'OP_EQ', 'OP_MINUS', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_LT', 'OP_POW', 'OP_MOD', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_GT', 'OP_STAR', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . bottom_val OPEN_PAREN expr_list CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'CLOSE_SQUARE', 'OP_INC', 'OPEN_SQUARE', 'OP_EQ', 'OP_MINUS', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . bottom_val OPEN_PAREN CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'CLOSE_SQUARE', 'OP_INC', 'OPEN_SQUARE', 'OP_EQ', 'OP_MINUS', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . bottom_val OP_DOT name
    LA: {'CLOSE_CURLY', 'CLOSE_SQUARE', 'OP_INC', 'OPEN_SQUARE', 'OP_EQ', 'OP_MINUS', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . bottom_val OPEN_SQUARE expression CLOSE_SQUARE
    LA: {'CLOSE_CURLY', 'CLOSE_SQUARE', 'OP_INC', 'OPEN_SQUARE', 'OP_EQ', 'OP_MINUS', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . comprehension
    LA: {'CLOSE_CURLY', 'CLOSE_SQUARE', 'OP_INC', 'OPEN_SQUARE', 'OP_EQ', 'OP_MINUS', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . literal
    LA: {'CLOSE_CURLY', 'CLOSE_SQUARE', 'OP_INC', 'OPEN_SQUARE', 'OP_EQ', 'OP_MINUS', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . name
    LA: {'CLOSE_CURLY', 'CLOSE_SQUARE', 'OP_INC', 'OPEN_SQUARE', 'OP_EQ', 'OP_MINUS', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    bottom_val = . OPEN_PAREN expression CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'CLOSE_SQUARE', 'OP_INC', 'OPEN_SQUARE', 'OP_EQ', 'OP_MINUS', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    comprehension = . OPEN_SQUARE linear_comprehension CLOSE_SQUARE
    LA: {'CLOSE_CURLY', 'CLOSE_SQUARE', 'OP_INC', 'OPEN_SQUARE', 'OP_EQ', 'OP_MINUS', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    comprehension = . OPEN_CURLY linear_comprehension CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'CLOSE_SQUARE', 'OP_INC', 'OPEN_SQUARE', 'OP_EQ', 'OP_MINUS', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'CLOSE_SQUARE', 'OP_INC', 'OPEN_SQUARE', 'OP_EQ', 'OP_MINUS', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression KW_IF expression CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'CLOSE_SQUARE', 'OP_INC', 'OPEN_SQUARE', 'OP_EQ', 'OP_MINUS', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . LIT_INT
    LA: {'CLOSE_CURLY', 'CLOSE_SQUARE', 'OP_INC', 'OPEN_SQUARE', 'OP_EQ', 'OP_MINUS', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . LIT_FLOAT
    LA: {'CLOSE_CURLY', 'CLOSE_SQUARE', 'OP_INC', 'OPEN_SQUARE', 'OP_EQ', 'OP_MINUS', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . lit_set
    LA: {'CLOSE_CURLY', 'CLOSE_SQUARE', 'OP_INC', 'OPEN_SQUARE', 'OP_EQ', 'OP_MINUS', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . lit_string
    LA: {'CLOSE_CURLY', 'CLOSE_SQUARE', 'OP_INC', 'OPEN_SQUARE', 'OP_EQ', 'OP_MINUS', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . lit_list
    LA: {'CLOSE_CURLY', 'CLOSE_SQUARE', 'OP_INC', 'OPEN_SQUARE', 'OP_EQ', 'OP_MINUS', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . lit_map
    LA: {'CLOSE_CURLY', 'CLOSE_SQUARE', 'OP_INC', 'OPEN_SQUARE', 'OP_EQ', 'OP_MINUS', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    literal = . KW_NULL
    LA: {'CLOSE_CURLY', 'CLOSE_SQUARE', 'OP_INC', 'OPEN_SQUARE', 'OP_EQ', 'OP_MINUS', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    name = . NAME
    LA: {'CLOSE_CURLY', 'CLOSE_SQUARE', 'OP_INC', 'OPEN_SQUARE', 'OP_EQ', 'OP_MINUS', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_set = . OPEN_CURLY expr_list CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'CLOSE_SQUARE', 'OP_INC', 'OPEN_SQUARE', 'OP_EQ', 'OP_MINUS', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_string = . DOUBLE_QUOTE_STR
    LA: {'CLOSE_CURLY', 'CLOSE_SQUARE', 'OP_INC', 'OPEN_SQUARE', 'OP_EQ', 'OP_MINUS', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_string = . SINGLE_QUOTE_STR
    LA: {'CLOSE_CURLY', 'CLOSE_SQUARE', 'OP_INC', 'OPEN_SQUARE', 'OP_EQ', 'OP_MINUS', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_list = . OPEN_SQUARE expr_list CLOSE_SQUARE
    LA: {'CLOSE_CURLY', 'CLOSE_SQUARE', 'OP_INC', 'OPEN_SQUARE', 'OP_EQ', 'OP_MINUS', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}

    lit_map = . OPEN_CURLY map_list CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'CLOSE_SQUARE', 'OP_INC', 'OPEN_SQUARE', 'OP_EQ', 'OP_MINUS', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS'}


  Transitions:
    Symbol: expr_list -> Node#204
    Symbol: expression -> Node#177
    Symbol: log_and_expr -> Node#51
    Symbol: bit_or_expr -> Node#52
    Symbol: bit_xor_expr -> Node#53
    Symbol: bit_and_expr -> Node#54
    Symbol: equ_expr -> Node#55
    Symbol: comp_expr -> Node#56
    Symbol: math_expr -> Node#57
    Symbol: term -> Node#58
    Symbol: factor -> Node#59
    Symbol: pow_term -> Node#60
    Symbol: OP_MINUS -> Node#61
    Symbol: KW_NOT -> Node#62
    Symbol: inc_term -> Node#63
    Symbol: OP_INC -> Node#64
    Symbol: bottom_val -> Node#65
    Symbol: OP_DEC -> Node#66
    Symbol: comprehension -> Node#67
    Symbol: literal -> Node#68
    Symbol: name -> Node#69
    Symbol: OPEN_PAREN -> Node#70
    Symbol: OPEN_SQUARE -> Node#71
    Symbol: OPEN_CURLY -> Node#72
    Symbol: LIT_INT -> Node#73
    Symbol: LIT_FLOAT -> Node#74
    Symbol: lit_set -> Node#75
    Symbol: lit_string -> Node#76
    Symbol: lit_list -> Node#77
    Symbol: lit_map -> Node#78
    Symbol: KW_NULL -> Node#79
    Symbol: NAME -> Node#80
    Symbol: DOUBLE_QUOTE_STR -> Node#81
    Symbol: SINGLE_QUOTE_STR -> Node#82

Node#185
  Rules:
    comprehension = OPEN_CURLY linear_comprehension CLOSE_CURLY .
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_CURLY', 'OP_MINUS', 'OP_AND_ASSIGN', 'CLOSE_PAREN', 'OP_XOR_ASSIGN', 'KW_AND', 'KW_OR', 'OP_MOD_ASSIGN', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_ADD_ASSIGN', 'OP_OR_ASSIGN', 'OP_DOT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_NEQ', 'OP_PLUS', 'OP_SUB_ASSIGN', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_ASSIGN', 'KW_ELSE', 'OP_BIT_XOR', 'OP_BIT_OR', 'COMMA', 'OP_BIT_AND', 'OP_GT', 'OP_MUL_ASSIGN', 'KW_TO', 'OP_LTEQ'}


Node#186
  Rules:
    comprehension = OPEN_CURLY expression COLON . expression KW_FOR name KW_IN expression CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'OP_ASSIGN', 'KW_ELSE', 'OP_AND_ASSIGN', 'CLOSE_PAREN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_NEQ', 'OP_OR_ASSIGN', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS', 'OP_SUB_ASSIGN'}

    comprehension = OPEN_CURLY expression COLON . expression KW_FOR name KW_IN expression KW_IF expression CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'KW_IF', 'OP_MINUS', 'OP_ASSIGN', 'KW_ELSE', 'OP_AND_ASSIGN', 'CLOSE_PAREN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_NEQ', 'OP_OR_ASSIGN', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'KW_TO', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS', 'OP_SUB_ASSIGN'}

    map_expression = expression COLON . expression
    LA: {'COMMA', 'CLOSE_CURLY'}

    expression = . expression KW_OR log_and_expr
    LA: {'COMMA', 'KW_FOR', 'CLOSE_CURLY', 'KW_OR'}

    expression = . log_and_expr
    LA: {'COMMA', 'KW_FOR', 'CLOSE_CURLY', 'KW_OR'}

    log_and_expr = . log_and_expr KW_AND bit_or_expr
    LA: {'KW_FOR', 'CLOSE_CURLY', 'KW_OR', 'COMMA', 'KW_AND'}

    log_and_expr = . bit_or_expr
    LA: {'KW_FOR', 'CLOSE_CURLY', 'KW_OR', 'COMMA', 'KW_AND'}

    bit_or_expr = . bit_or_expr OP_BIT_OR bit_xor_expr
    LA: {'KW_FOR', 'CLOSE_CURLY', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'KW_AND'}

    bit_or_expr = . bit_xor_expr
    LA: {'KW_FOR', 'CLOSE_CURLY', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'KW_AND'}

    bit_xor_expr = . bit_xor_expr OP_BIT_XOR bit_and_expr
    LA: {'KW_FOR', 'CLOSE_CURLY', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'KW_AND', 'OP_BIT_XOR'}

    bit_xor_expr = . bit_and_expr
    LA: {'KW_FOR', 'CLOSE_CURLY', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'KW_AND', 'OP_BIT_XOR'}

    bit_and_expr = . bit_and_expr OP_BIT_AND equ_expr
    LA: {'KW_FOR', 'CLOSE_CURLY', 'KW_OR', 'OP_BIT_OR', 'OP_BIT_AND', 'COMMA', 'KW_AND', 'OP_BIT_XOR'}

    bit_and_expr = . equ_expr
    LA: {'KW_FOR', 'CLOSE_CURLY', 'KW_OR', 'OP_BIT_OR', 'OP_BIT_AND', 'COMMA', 'KW_AND', 'OP_BIT_XOR'}

    equ_expr = . equ_expr OP_EQ comp_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'KW_AND', 'OP_BIT_XOR', 'OP_NEQ', 'KW_FOR', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'COMMA'}

    equ_expr = . equ_expr OP_NEQ comp_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'KW_AND', 'OP_BIT_XOR', 'OP_NEQ', 'KW_FOR', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'COMMA'}

    equ_expr = . comp_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'KW_AND', 'OP_BIT_XOR', 'OP_NEQ', 'KW_FOR', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'COMMA'}

    comp_expr = . comp_expr OP_LT math_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_NEQ', 'KW_FOR', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'COMMA', 'OP_LT'}

    comp_expr = . comp_expr OP_LTEQ math_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_NEQ', 'KW_FOR', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'COMMA', 'OP_LT'}

    comp_expr = . comp_expr OP_GT math_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_NEQ', 'KW_FOR', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'COMMA', 'OP_LT'}

    comp_expr = . comp_expr OP_GTEQ math_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_NEQ', 'KW_FOR', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'COMMA', 'OP_LT'}

    comp_expr = . math_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_NEQ', 'KW_FOR', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'COMMA', 'OP_LT'}

    math_expr = . math_expr OP_PLUS term
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'OP_PLUS', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_MINUS', 'OP_NEQ', 'KW_FOR', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'COMMA', 'OP_LT'}

    math_expr = . math_expr OP_MINUS term
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'OP_PLUS', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_MINUS', 'OP_NEQ', 'KW_FOR', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'COMMA', 'OP_LT'}

    math_expr = . term
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'OP_PLUS', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_MINUS', 'OP_NEQ', 'KW_FOR', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'COMMA', 'OP_LT'}

    term = . term OP_STAR factor
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'OP_NEQ', 'KW_FOR', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'COMMA', 'OP_LT', 'OP_SLASH'}

    term = . term OP_SLASH factor
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'OP_NEQ', 'KW_FOR', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'COMMA', 'OP_LT', 'OP_SLASH'}

    term = . term OP_MOD factor
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'OP_NEQ', 'KW_FOR', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'COMMA', 'OP_LT', 'OP_SLASH'}

    term = . factor
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'OP_NEQ', 'KW_FOR', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'COMMA', 'OP_LT', 'OP_SLASH'}

    factor = . factor OP_POW pow_term
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'OP_NEQ', 'KW_FOR', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'COMMA', 'OP_LT', 'OP_SLASH'}

    factor = . pow_term
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'OP_NEQ', 'KW_FOR', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'COMMA', 'OP_LT', 'OP_SLASH'}

    pow_term = . OP_MINUS inc_term
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'OP_NEQ', 'KW_FOR', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'COMMA', 'OP_LT', 'OP_SLASH'}

    pow_term = . KW_NOT inc_term
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'OP_NEQ', 'KW_FOR', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'COMMA', 'OP_LT', 'OP_SLASH'}

    pow_term = . inc_term
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'OP_NEQ', 'KW_FOR', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'COMMA', 'OP_LT', 'OP_SLASH'}

    inc_term = . OP_INC bottom_val
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'OP_NEQ', 'KW_FOR', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'COMMA', 'OP_LT', 'OP_SLASH'}

    inc_term = . bottom_val OP_INC
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'OP_NEQ', 'KW_FOR', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'COMMA', 'OP_LT', 'OP_SLASH'}

    inc_term = . OP_DEC bottom_val
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'OP_NEQ', 'KW_FOR', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'COMMA', 'OP_LT', 'OP_SLASH'}

    inc_term = . bottom_val OP_DEC
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'OP_NEQ', 'KW_FOR', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'COMMA', 'OP_LT', 'OP_SLASH'}

    inc_term = . bottom_val
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'OP_NEQ', 'KW_FOR', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'COMMA', 'OP_LT', 'OP_SLASH'}

    bottom_val = . bottom_val OPEN_PAREN expr_list CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . bottom_val OPEN_PAREN CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . bottom_val OP_DOT name
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . bottom_val OPEN_SQUARE expression CLOSE_SQUARE
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . comprehension
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . literal
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . name
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . OPEN_PAREN expression CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    comprehension = . OPEN_SQUARE linear_comprehension CLOSE_SQUARE
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    comprehension = . OPEN_CURLY linear_comprehension CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression KW_IF expression CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    literal = . LIT_INT
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    literal = . LIT_FLOAT
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    literal = . lit_set
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    literal = . lit_string
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    literal = . lit_list
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    literal = . lit_map
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    literal = . KW_NULL
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    name = . NAME
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    lit_set = . OPEN_CURLY expr_list CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    lit_string = . DOUBLE_QUOTE_STR
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    lit_string = . SINGLE_QUOTE_STR
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    lit_list = . OPEN_SQUARE expr_list CLOSE_SQUARE
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    lit_map = . OPEN_CURLY map_list CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'KW_FOR', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}


  Transitions:
    Symbol: expression -> Node#205
    Symbol: log_and_expr -> Node#51
    Symbol: bit_or_expr -> Node#52
    Symbol: bit_xor_expr -> Node#53
    Symbol: bit_and_expr -> Node#54
    Symbol: equ_expr -> Node#55
    Symbol: comp_expr -> Node#56
    Symbol: math_expr -> Node#57
    Symbol: term -> Node#58
    Symbol: factor -> Node#59
    Symbol: pow_term -> Node#60
    Symbol: OP_MINUS -> Node#61
    Symbol: KW_NOT -> Node#62
    Symbol: inc_term -> Node#63
    Symbol: OP_INC -> Node#64
    Symbol: bottom_val -> Node#65
    Symbol: OP_DEC -> Node#66
    Symbol: comprehension -> Node#67
    Symbol: literal -> Node#68
    Symbol: name -> Node#69
    Symbol: OPEN_PAREN -> Node#70
    Symbol: OPEN_SQUARE -> Node#71
    Symbol: OPEN_CURLY -> Node#72
    Symbol: LIT_INT -> Node#73
    Symbol: LIT_FLOAT -> Node#74
    Symbol: lit_set -> Node#75
    Symbol: lit_string -> Node#76
    Symbol: lit_list -> Node#77
    Symbol: lit_map -> Node#78
    Symbol: KW_NULL -> Node#79
    Symbol: NAME -> Node#80
    Symbol: DOUBLE_QUOTE_STR -> Node#81
    Symbol: SINGLE_QUOTE_STR -> Node#82

Node#187
  Rules:
    lit_set = OPEN_CURLY expr_list CLOSE_CURLY .
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_CURLY', 'OP_MINUS', 'OP_AND_ASSIGN', 'CLOSE_PAREN', 'OP_XOR_ASSIGN', 'KW_AND', 'KW_OR', 'OP_MOD_ASSIGN', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_ADD_ASSIGN', 'OP_OR_ASSIGN', 'OP_DOT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_NEQ', 'OP_PLUS', 'OP_SUB_ASSIGN', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_ASSIGN', 'KW_ELSE', 'OP_BIT_XOR', 'OP_BIT_OR', 'COMMA', 'OP_BIT_AND', 'OP_GT', 'OP_MUL_ASSIGN', 'KW_TO', 'OP_LTEQ'}


Node#188
  Rules:
    lit_map = OPEN_CURLY map_list CLOSE_CURLY .
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_CURLY', 'OP_MINUS', 'OP_AND_ASSIGN', 'CLOSE_PAREN', 'OP_XOR_ASSIGN', 'KW_AND', 'KW_OR', 'OP_MOD_ASSIGN', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_ADD_ASSIGN', 'OP_OR_ASSIGN', 'OP_DOT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_NEQ', 'OP_PLUS', 'OP_SUB_ASSIGN', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_ASSIGN', 'KW_ELSE', 'OP_BIT_XOR', 'OP_BIT_OR', 'COMMA', 'OP_BIT_AND', 'OP_GT', 'OP_MUL_ASSIGN', 'KW_TO', 'OP_LTEQ'}


Node#189
  Rules:
    map_list = map_expression COMMA . map_list
    LA: {'CLOSE_CURLY'}

    map_list = . map_expression
    LA: {'CLOSE_CURLY'}

    map_list = . map_expression COMMA map_list
    LA: {'CLOSE_CURLY'}

    map_expression = . expression COLON expression
    LA: {'COMMA', 'CLOSE_CURLY'}

    expression = . expression KW_OR log_and_expr
    LA: {'COLON', 'KW_OR'}

    expression = . log_and_expr
    LA: {'COLON', 'KW_OR'}

    log_and_expr = . log_and_expr KW_AND bit_or_expr
    LA: {'COLON', 'KW_AND', 'KW_OR'}

    log_and_expr = . bit_or_expr
    LA: {'COLON', 'KW_AND', 'KW_OR'}

    bit_or_expr = . bit_or_expr OP_BIT_OR bit_xor_expr
    LA: {'COLON', 'KW_AND', 'KW_OR', 'OP_BIT_OR'}

    bit_or_expr = . bit_xor_expr
    LA: {'COLON', 'KW_AND', 'KW_OR', 'OP_BIT_OR'}

    bit_xor_expr = . bit_xor_expr OP_BIT_XOR bit_and_expr
    LA: {'KW_OR', 'OP_BIT_OR', 'COLON', 'KW_AND', 'OP_BIT_XOR'}

    bit_xor_expr = . bit_and_expr
    LA: {'KW_OR', 'OP_BIT_OR', 'COLON', 'KW_AND', 'OP_BIT_XOR'}

    bit_and_expr = . bit_and_expr OP_BIT_AND equ_expr
    LA: {'KW_OR', 'OP_BIT_OR', 'OP_BIT_AND', 'COLON', 'KW_AND', 'OP_BIT_XOR'}

    bit_and_expr = . equ_expr
    LA: {'KW_OR', 'OP_BIT_OR', 'OP_BIT_AND', 'COLON', 'KW_AND', 'OP_BIT_XOR'}

    equ_expr = . equ_expr OP_EQ comp_expr
    LA: {'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_BIT_AND', 'COLON', 'OP_NEQ', 'KW_AND', 'OP_BIT_XOR'}

    equ_expr = . equ_expr OP_NEQ comp_expr
    LA: {'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_BIT_AND', 'COLON', 'OP_NEQ', 'KW_AND', 'OP_BIT_XOR'}

    equ_expr = . comp_expr
    LA: {'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_BIT_AND', 'COLON', 'OP_NEQ', 'KW_AND', 'OP_BIT_XOR'}

    comp_expr = . comp_expr OP_LT math_expr
    LA: {'OP_BIT_AND', 'COLON', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    comp_expr = . comp_expr OP_LTEQ math_expr
    LA: {'OP_BIT_AND', 'COLON', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    comp_expr = . comp_expr OP_GT math_expr
    LA: {'OP_BIT_AND', 'COLON', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    comp_expr = . comp_expr OP_GTEQ math_expr
    LA: {'OP_BIT_AND', 'COLON', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    comp_expr = . math_expr
    LA: {'OP_BIT_AND', 'COLON', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    math_expr = . math_expr OP_PLUS term
    LA: {'OP_BIT_AND', 'COLON', 'OP_PLUS', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_MINUS', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    math_expr = . math_expr OP_MINUS term
    LA: {'OP_BIT_AND', 'COLON', 'OP_PLUS', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_MINUS', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    math_expr = . term
    LA: {'OP_BIT_AND', 'COLON', 'OP_PLUS', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_MINUS', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    term = . term OP_STAR factor
    LA: {'OP_BIT_AND', 'COLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    term = . term OP_SLASH factor
    LA: {'OP_BIT_AND', 'COLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    term = . term OP_MOD factor
    LA: {'OP_BIT_AND', 'COLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    term = . factor
    LA: {'OP_BIT_AND', 'COLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    factor = . factor OP_POW pow_term
    LA: {'OP_BIT_AND', 'COLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    factor = . pow_term
    LA: {'OP_BIT_AND', 'COLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    pow_term = . OP_MINUS inc_term
    LA: {'OP_BIT_AND', 'COLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    pow_term = . KW_NOT inc_term
    LA: {'OP_BIT_AND', 'COLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    pow_term = . inc_term
    LA: {'OP_BIT_AND', 'COLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . OP_INC bottom_val
    LA: {'OP_BIT_AND', 'COLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . bottom_val OP_INC
    LA: {'OP_BIT_AND', 'COLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . OP_DEC bottom_val
    LA: {'OP_BIT_AND', 'COLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . bottom_val OP_DEC
    LA: {'OP_BIT_AND', 'COLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . bottom_val
    LA: {'OP_BIT_AND', 'COLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    bottom_val = . bottom_val OPEN_PAREN expr_list CLOSE_PAREN
    LA: {'OP_LT', 'OP_BIT_AND', 'COLON', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . bottom_val OPEN_PAREN CLOSE_PAREN
    LA: {'OP_LT', 'OP_BIT_AND', 'COLON', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . bottom_val OP_DOT name
    LA: {'OP_LT', 'OP_BIT_AND', 'COLON', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . bottom_val OPEN_SQUARE expression CLOSE_SQUARE
    LA: {'OP_LT', 'OP_BIT_AND', 'COLON', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . comprehension
    LA: {'OP_LT', 'OP_BIT_AND', 'COLON', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . literal
    LA: {'OP_LT', 'OP_BIT_AND', 'COLON', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . name
    LA: {'OP_LT', 'OP_BIT_AND', 'COLON', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . OPEN_PAREN expression CLOSE_PAREN
    LA: {'OP_LT', 'OP_BIT_AND', 'COLON', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    comprehension = . OPEN_SQUARE linear_comprehension CLOSE_SQUARE
    LA: {'OP_LT', 'OP_BIT_AND', 'COLON', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    comprehension = . OPEN_CURLY linear_comprehension CLOSE_CURLY
    LA: {'OP_LT', 'OP_BIT_AND', 'COLON', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression CLOSE_CURLY
    LA: {'OP_LT', 'OP_BIT_AND', 'COLON', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression KW_IF expression CLOSE_CURLY
    LA: {'OP_LT', 'OP_BIT_AND', 'COLON', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . LIT_INT
    LA: {'OP_LT', 'OP_BIT_AND', 'COLON', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . LIT_FLOAT
    LA: {'OP_LT', 'OP_BIT_AND', 'COLON', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . lit_set
    LA: {'OP_LT', 'OP_BIT_AND', 'COLON', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . lit_string
    LA: {'OP_LT', 'OP_BIT_AND', 'COLON', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . lit_list
    LA: {'OP_LT', 'OP_BIT_AND', 'COLON', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . lit_map
    LA: {'OP_LT', 'OP_BIT_AND', 'COLON', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . KW_NULL
    LA: {'OP_LT', 'OP_BIT_AND', 'COLON', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    name = . NAME
    LA: {'OP_LT', 'OP_BIT_AND', 'COLON', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    lit_set = . OPEN_CURLY expr_list CLOSE_CURLY
    LA: {'OP_LT', 'OP_BIT_AND', 'COLON', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    lit_string = . DOUBLE_QUOTE_STR
    LA: {'OP_LT', 'OP_BIT_AND', 'COLON', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    lit_string = . SINGLE_QUOTE_STR
    LA: {'OP_LT', 'OP_BIT_AND', 'COLON', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    lit_list = . OPEN_SQUARE expr_list CLOSE_SQUARE
    LA: {'OP_LT', 'OP_BIT_AND', 'COLON', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    lit_map = . OPEN_CURLY map_list CLOSE_CURLY
    LA: {'OP_LT', 'OP_BIT_AND', 'COLON', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}


  Transitions:
    Symbol: map_list -> Node#206
    Symbol: map_expression -> Node#139
    Symbol: expression -> Node#207
    Symbol: log_and_expr -> Node#51
    Symbol: bit_or_expr -> Node#52
    Symbol: bit_xor_expr -> Node#53
    Symbol: bit_and_expr -> Node#54
    Symbol: equ_expr -> Node#55
    Symbol: comp_expr -> Node#56
    Symbol: math_expr -> Node#57
    Symbol: term -> Node#58
    Symbol: factor -> Node#59
    Symbol: pow_term -> Node#60
    Symbol: OP_MINUS -> Node#61
    Symbol: KW_NOT -> Node#62
    Symbol: inc_term -> Node#63
    Symbol: OP_INC -> Node#64
    Symbol: bottom_val -> Node#65
    Symbol: OP_DEC -> Node#66
    Symbol: comprehension -> Node#67
    Symbol: literal -> Node#68
    Symbol: name -> Node#69
    Symbol: OPEN_PAREN -> Node#70
    Symbol: OPEN_SQUARE -> Node#71
    Symbol: OPEN_CURLY -> Node#72
    Symbol: LIT_INT -> Node#73
    Symbol: LIT_FLOAT -> Node#74
    Symbol: lit_set -> Node#75
    Symbol: lit_string -> Node#76
    Symbol: lit_list -> Node#77
    Symbol: lit_map -> Node#78
    Symbol: KW_NULL -> Node#79
    Symbol: NAME -> Node#80
    Symbol: DOUBLE_QUOTE_STR -> Node#81
    Symbol: SINGLE_QUOTE_STR -> Node#82

Node#190
  Rules:
    type = TYPE_MAP OP_LT type COMMA type . OP_GT
    LA: {'COMMA', 'NAME', 'OP_GT'}


  Transitions:
    Symbol: OP_GT -> Node#208

Node#191
  Rules:
    func_definition = access_modifier KW_INIT NAME OPEN_PAREN func_arg_definitions CLOSE_PAREN body .
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'CLOSE_CURLY', 'NAME', 'OPEN_CURLY', 'KW_DELETE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'TYPE_MAP', 'TYPE_BOOL', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'ACC_READONLY', 'ACC_PRIVATE', 'KW_NULL'}


Node#192
  Rules:
    body = OPEN_CURLY . statements CLOSE_CURLY
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'CLOSE_CURLY', 'NAME', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'KW_CATCH', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'OP_MINUS', 'KW_RETURN', 'KW_ELSE', 'DOUBLE_QUOTE_STR', 'KW_DELETE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'TYPE_MAP', 'KW_WHILE', 'TYPE_BOOL', 'KW_STATIC', 'KW_DO', 'TYPE_STR', 'KW_INIT', 'LIT_FLOAT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'ACC_READONLY', 'KW_THROW', 'ACC_PRIVATE', 'KW_TRY', 'KW_NULL'}

    body = OPEN_CURLY . CLOSE_CURLY
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'CLOSE_CURLY', 'NAME', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'KW_CATCH', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'OP_MINUS', 'KW_RETURN', 'KW_ELSE', 'DOUBLE_QUOTE_STR', 'KW_DELETE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'TYPE_MAP', 'KW_WHILE', 'TYPE_BOOL', 'KW_STATIC', 'KW_DO', 'TYPE_STR', 'KW_INIT', 'LIT_FLOAT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'ACC_READONLY', 'KW_THROW', 'ACC_PRIVATE', 'KW_TRY', 'KW_NULL'}

    statements = . statement
    LA: {'CLOSE_CURLY'}

    statements = . statement statements
    LA: {'CLOSE_CURLY'}

    statement = . statement_body SEMICOLON
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    statement = . body
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    statement = . if_statement
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    statement = . while_statement
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    statement = . do_while_statement
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    statement = . for_statement
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    statement = . try_catch_statement
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    statement_body = . assignment
    LA: {'SEMICOLON'}

    statement_body = . return_statement
    LA: {'SEMICOLON'}

    statement_body = . expression
    LA: {'SEMICOLON'}

    statement_body = . throw_statement
    LA: {'SEMICOLON'}

    body = . OPEN_CURLY statements CLOSE_CURLY
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    body = . OPEN_CURLY CLOSE_CURLY
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    if_statement = . KW_IF expression body else_statement
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    while_statement = . KW_WHILE expression body
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    do_while_statement = . KW_DO body KW_WHILE expression SEMICOLON
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    for_statement = . KW_FOR name KW_IN expression body
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    for_statement = . KW_FOR name KW_IN expression KW_TO expression body
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    try_catch_statement = . KW_TRY body catch_statements
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    assignment = . bottom_val assign_op assign_expr
    LA: {'SEMICOLON'}

    assignment = . type name assign_op assign_expr
    LA: {'SEMICOLON'}

    return_statement = . KW_RETURN expression
    LA: {'SEMICOLON'}

    expression = . expression KW_OR log_and_expr
    LA: {'KW_OR', 'SEMICOLON'}

    expression = . log_and_expr
    LA: {'KW_OR', 'SEMICOLON'}

    throw_statement = . KW_THROW expression
    LA: {'SEMICOLON'}

    bottom_val = . bottom_val OPEN_PAREN expr_list CLOSE_PAREN
    LA: {'SEMICOLON', 'OPEN_SQUARE', 'OP_INC', 'OP_EQ', 'OP_MINUS', 'OP_ASSIGN', 'OP_AND_ASSIGN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_PLUS', 'OP_OR_ASSIGN', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ', 'OP_SUB_ASSIGN'}

    bottom_val = . bottom_val OPEN_PAREN CLOSE_PAREN
    LA: {'SEMICOLON', 'OPEN_SQUARE', 'OP_INC', 'OP_EQ', 'OP_MINUS', 'OP_ASSIGN', 'OP_AND_ASSIGN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_PLUS', 'OP_OR_ASSIGN', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ', 'OP_SUB_ASSIGN'}

    bottom_val = . bottom_val OP_DOT name
    LA: {'SEMICOLON', 'OPEN_SQUARE', 'OP_INC', 'OP_EQ', 'OP_MINUS', 'OP_ASSIGN', 'OP_AND_ASSIGN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_PLUS', 'OP_OR_ASSIGN', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ', 'OP_SUB_ASSIGN'}

    bottom_val = . bottom_val OPEN_SQUARE expression CLOSE_SQUARE
    LA: {'SEMICOLON', 'OPEN_SQUARE', 'OP_INC', 'OP_EQ', 'OP_MINUS', 'OP_ASSIGN', 'OP_AND_ASSIGN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_PLUS', 'OP_OR_ASSIGN', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ', 'OP_SUB_ASSIGN'}

    bottom_val = . comprehension
    LA: {'SEMICOLON', 'OPEN_SQUARE', 'OP_INC', 'OP_EQ', 'OP_MINUS', 'OP_ASSIGN', 'OP_AND_ASSIGN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_PLUS', 'OP_OR_ASSIGN', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ', 'OP_SUB_ASSIGN'}

    bottom_val = . literal
    LA: {'SEMICOLON', 'OPEN_SQUARE', 'OP_INC', 'OP_EQ', 'OP_MINUS', 'OP_ASSIGN', 'OP_AND_ASSIGN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_PLUS', 'OP_OR_ASSIGN', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ', 'OP_SUB_ASSIGN'}

    bottom_val = . name
    LA: {'SEMICOLON', 'OPEN_SQUARE', 'OP_INC', 'OP_EQ', 'OP_MINUS', 'OP_ASSIGN', 'OP_AND_ASSIGN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_PLUS', 'OP_OR_ASSIGN', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ', 'OP_SUB_ASSIGN'}

    bottom_val = . OPEN_PAREN expression CLOSE_PAREN
    LA: {'SEMICOLON', 'OPEN_SQUARE', 'OP_INC', 'OP_EQ', 'OP_MINUS', 'OP_ASSIGN', 'OP_AND_ASSIGN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_PLUS', 'OP_OR_ASSIGN', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ', 'OP_SUB_ASSIGN'}

    type = . TYPE_ARRAY OP_LT type OP_GT
    LA: {'NAME'}

    type = . TYPE_LIST OP_LT type OP_GT
    LA: {'NAME'}

    type = . TYPE_MAP OP_LT type COMMA type OP_GT
    LA: {'NAME'}

    type = . TYPE_SET OP_LT type OP_GT
    LA: {'NAME'}

    type = . TYPE_STR
    LA: {'NAME'}

    type = . TYPE_INT
    LA: {'NAME'}

    type = . TYPE_FLOAT
    LA: {'NAME'}

    type = . TYPE_BOOL
    LA: {'NAME'}

    type = . KW_NULL
    LA: {'NAME'}

    type = . NAME
    LA: {'NAME'}

    log_and_expr = . log_and_expr KW_AND bit_or_expr
    LA: {'KW_OR', 'SEMICOLON', 'KW_AND'}

    log_and_expr = . bit_or_expr
    LA: {'KW_OR', 'SEMICOLON', 'KW_AND'}

    comprehension = . OPEN_SQUARE linear_comprehension CLOSE_SQUARE
    LA: {'SEMICOLON', 'OPEN_SQUARE', 'OP_INC', 'OP_EQ', 'OP_MINUS', 'OP_ASSIGN', 'OP_AND_ASSIGN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_OR_ASSIGN', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_DEC', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS', 'OP_SUB_ASSIGN'}

    comprehension = . OPEN_CURLY linear_comprehension CLOSE_CURLY
    LA: {'SEMICOLON', 'OPEN_SQUARE', 'OP_INC', 'OP_EQ', 'OP_MINUS', 'OP_ASSIGN', 'OP_AND_ASSIGN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_OR_ASSIGN', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_DEC', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS', 'OP_SUB_ASSIGN'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression CLOSE_CURLY
    LA: {'SEMICOLON', 'OPEN_SQUARE', 'OP_INC', 'OP_EQ', 'OP_MINUS', 'OP_ASSIGN', 'OP_AND_ASSIGN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_OR_ASSIGN', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_DEC', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS', 'OP_SUB_ASSIGN'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression KW_IF expression CLOSE_CURLY
    LA: {'SEMICOLON', 'OPEN_SQUARE', 'OP_INC', 'OP_EQ', 'OP_MINUS', 'OP_ASSIGN', 'OP_AND_ASSIGN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_OR_ASSIGN', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_DEC', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS', 'OP_SUB_ASSIGN'}

    literal = . LIT_INT
    LA: {'SEMICOLON', 'OPEN_SQUARE', 'OP_INC', 'OP_EQ', 'OP_MINUS', 'OP_ASSIGN', 'OP_AND_ASSIGN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_OR_ASSIGN', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_DEC', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS', 'OP_SUB_ASSIGN'}

    literal = . LIT_FLOAT
    LA: {'SEMICOLON', 'OPEN_SQUARE', 'OP_INC', 'OP_EQ', 'OP_MINUS', 'OP_ASSIGN', 'OP_AND_ASSIGN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_OR_ASSIGN', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_DEC', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS', 'OP_SUB_ASSIGN'}

    literal = . lit_set
    LA: {'SEMICOLON', 'OPEN_SQUARE', 'OP_INC', 'OP_EQ', 'OP_MINUS', 'OP_ASSIGN', 'OP_AND_ASSIGN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_OR_ASSIGN', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_DEC', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS', 'OP_SUB_ASSIGN'}

    literal = . lit_string
    LA: {'SEMICOLON', 'OPEN_SQUARE', 'OP_INC', 'OP_EQ', 'OP_MINUS', 'OP_ASSIGN', 'OP_AND_ASSIGN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_OR_ASSIGN', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_DEC', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS', 'OP_SUB_ASSIGN'}

    literal = . lit_list
    LA: {'SEMICOLON', 'OPEN_SQUARE', 'OP_INC', 'OP_EQ', 'OP_MINUS', 'OP_ASSIGN', 'OP_AND_ASSIGN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_OR_ASSIGN', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_DEC', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS', 'OP_SUB_ASSIGN'}

    literal = . lit_map
    LA: {'SEMICOLON', 'OPEN_SQUARE', 'OP_INC', 'OP_EQ', 'OP_MINUS', 'OP_ASSIGN', 'OP_AND_ASSIGN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_OR_ASSIGN', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_DEC', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS', 'OP_SUB_ASSIGN'}

    literal = . KW_NULL
    LA: {'SEMICOLON', 'OPEN_SQUARE', 'OP_INC', 'OP_EQ', 'OP_MINUS', 'OP_ASSIGN', 'OP_AND_ASSIGN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_OR_ASSIGN', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_DEC', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS', 'OP_SUB_ASSIGN'}

    name = . NAME
    LA: {'SEMICOLON', 'OPEN_SQUARE', 'OP_INC', 'OP_EQ', 'OP_MINUS', 'OP_ASSIGN', 'OP_AND_ASSIGN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_OR_ASSIGN', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_DEC', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS', 'OP_SUB_ASSIGN'}

    bit_or_expr = . bit_or_expr OP_BIT_OR bit_xor_expr
    LA: {'KW_OR', 'SEMICOLON', 'OP_BIT_OR', 'KW_AND'}

    bit_or_expr = . bit_xor_expr
    LA: {'KW_OR', 'SEMICOLON', 'OP_BIT_OR', 'KW_AND'}

    lit_set = . OPEN_CURLY expr_list CLOSE_CURLY
    LA: {'SEMICOLON', 'OPEN_SQUARE', 'OP_INC', 'OP_EQ', 'OP_MINUS', 'OP_ASSIGN', 'OP_AND_ASSIGN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_PLUS', 'OP_OR_ASSIGN', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_DEC', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ', 'OP_SUB_ASSIGN'}

    lit_string = . DOUBLE_QUOTE_STR
    LA: {'SEMICOLON', 'OPEN_SQUARE', 'OP_INC', 'OP_EQ', 'OP_MINUS', 'OP_ASSIGN', 'OP_AND_ASSIGN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_PLUS', 'OP_OR_ASSIGN', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_DEC', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ', 'OP_SUB_ASSIGN'}

    lit_string = . SINGLE_QUOTE_STR
    LA: {'SEMICOLON', 'OPEN_SQUARE', 'OP_INC', 'OP_EQ', 'OP_MINUS', 'OP_ASSIGN', 'OP_AND_ASSIGN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_PLUS', 'OP_OR_ASSIGN', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_DEC', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ', 'OP_SUB_ASSIGN'}

    lit_list = . OPEN_SQUARE expr_list CLOSE_SQUARE
    LA: {'SEMICOLON', 'OPEN_SQUARE', 'OP_INC', 'OP_EQ', 'OP_MINUS', 'OP_ASSIGN', 'OP_AND_ASSIGN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_PLUS', 'OP_OR_ASSIGN', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_DEC', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ', 'OP_SUB_ASSIGN'}

    lit_map = . OPEN_CURLY map_list CLOSE_CURLY
    LA: {'SEMICOLON', 'OPEN_SQUARE', 'OP_INC', 'OP_EQ', 'OP_MINUS', 'OP_ASSIGN', 'OP_AND_ASSIGN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_PLUS', 'OP_OR_ASSIGN', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_DEC', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ', 'OP_SUB_ASSIGN'}

    bit_xor_expr = . bit_xor_expr OP_BIT_XOR bit_and_expr
    LA: {'KW_OR', 'OP_BIT_OR', 'KW_AND', 'SEMICOLON', 'OP_BIT_XOR'}

    bit_xor_expr = . bit_and_expr
    LA: {'KW_OR', 'OP_BIT_OR', 'KW_AND', 'SEMICOLON', 'OP_BIT_XOR'}

    bit_and_expr = . bit_and_expr OP_BIT_AND equ_expr
    LA: {'KW_OR', 'OP_BIT_OR', 'OP_BIT_AND', 'KW_AND', 'SEMICOLON', 'OP_BIT_XOR'}

    bit_and_expr = . equ_expr
    LA: {'KW_OR', 'OP_BIT_OR', 'OP_BIT_AND', 'KW_AND', 'SEMICOLON', 'OP_BIT_XOR'}

    equ_expr = . equ_expr OP_EQ comp_expr
    LA: {'OP_NEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_BIT_AND', 'KW_AND', 'SEMICOLON', 'OP_BIT_XOR'}

    equ_expr = . equ_expr OP_NEQ comp_expr
    LA: {'OP_NEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_BIT_AND', 'KW_AND', 'SEMICOLON', 'OP_BIT_XOR'}

    equ_expr = . comp_expr
    LA: {'OP_NEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_BIT_AND', 'KW_AND', 'SEMICOLON', 'OP_BIT_XOR'}

    comp_expr = . comp_expr OP_LT math_expr
    LA: {'OP_BIT_AND', 'KW_AND', 'SEMICOLON', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    comp_expr = . comp_expr OP_LTEQ math_expr
    LA: {'OP_BIT_AND', 'KW_AND', 'SEMICOLON', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    comp_expr = . comp_expr OP_GT math_expr
    LA: {'OP_BIT_AND', 'KW_AND', 'SEMICOLON', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    comp_expr = . comp_expr OP_GTEQ math_expr
    LA: {'OP_BIT_AND', 'KW_AND', 'SEMICOLON', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    comp_expr = . math_expr
    LA: {'OP_BIT_AND', 'KW_AND', 'SEMICOLON', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    math_expr = . math_expr OP_PLUS term
    LA: {'OP_BIT_AND', 'OP_PLUS', 'KW_AND', 'SEMICOLON', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'OP_MINUS', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    math_expr = . math_expr OP_MINUS term
    LA: {'OP_BIT_AND', 'OP_PLUS', 'KW_AND', 'SEMICOLON', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'OP_MINUS', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    math_expr = . term
    LA: {'OP_BIT_AND', 'OP_PLUS', 'KW_AND', 'SEMICOLON', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'OP_MINUS', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    term = . term OP_STAR factor
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    term = . term OP_SLASH factor
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    term = . term OP_MOD factor
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    term = . factor
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    factor = . factor OP_POW pow_term
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    factor = . pow_term
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    pow_term = . OP_MINUS inc_term
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    pow_term = . KW_NOT inc_term
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    pow_term = . inc_term
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . OP_INC bottom_val
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . bottom_val OP_INC
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . OP_DEC bottom_val
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . bottom_val OP_DEC
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . bottom_val
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}


  Transitions:
    Symbol: statements -> Node#209
    Symbol: CLOSE_CURLY -> Node#210
    Symbol: statement -> Node#211
    Symbol: statement_body -> Node#212
    Symbol: body -> Node#213
    Symbol: if_statement -> Node#214
    Symbol: while_statement -> Node#215
    Symbol: do_while_statement -> Node#216
    Symbol: for_statement -> Node#217
    Symbol: try_catch_statement -> Node#218
    Symbol: assignment -> Node#219
    Symbol: return_statement -> Node#220
    Symbol: expression -> Node#221
    Symbol: throw_statement -> Node#222
    Symbol: OPEN_CURLY -> Node#223
    Symbol: KW_IF -> Node#224
    Symbol: KW_WHILE -> Node#225
    Symbol: KW_DO -> Node#226
    Symbol: KW_FOR -> Node#227
    Symbol: KW_TRY -> Node#228
    Symbol: bottom_val -> Node#229
    Symbol: type -> Node#230
    Symbol: KW_RETURN -> Node#231
    Symbol: log_and_expr -> Node#51
    Symbol: KW_THROW -> Node#232
    Symbol: comprehension -> Node#67
    Symbol: literal -> Node#68
    Symbol: name -> Node#69
    Symbol: OPEN_PAREN -> Node#70
    Symbol: TYPE_ARRAY -> Node#22
    Symbol: TYPE_LIST -> Node#23
    Symbol: TYPE_MAP -> Node#24
    Symbol: TYPE_SET -> Node#25
    Symbol: TYPE_STR -> Node#26
    Symbol: TYPE_INT -> Node#27
    Symbol: TYPE_FLOAT -> Node#28
    Symbol: TYPE_BOOL -> Node#29
    Symbol: KW_NULL -> Node#233
    Symbol: NAME -> Node#234
    Symbol: bit_or_expr -> Node#52
    Symbol: OPEN_SQUARE -> Node#71
    Symbol: LIT_INT -> Node#73
    Symbol: LIT_FLOAT -> Node#74
    Symbol: lit_set -> Node#75
    Symbol: lit_string -> Node#76
    Symbol: lit_list -> Node#77
    Symbol: lit_map -> Node#78
    Symbol: bit_xor_expr -> Node#53
    Symbol: DOUBLE_QUOTE_STR -> Node#81
    Symbol: SINGLE_QUOTE_STR -> Node#82
    Symbol: bit_and_expr -> Node#54
    Symbol: equ_expr -> Node#55
    Symbol: comp_expr -> Node#56
    Symbol: math_expr -> Node#57
    Symbol: term -> Node#58
    Symbol: factor -> Node#59
    Symbol: pow_term -> Node#60
    Symbol: OP_MINUS -> Node#61
    Symbol: KW_NOT -> Node#62
    Symbol: inc_term -> Node#63
    Symbol: OP_INC -> Node#64
    Symbol: OP_DEC -> Node#66

Node#193
  Rules:
    func_arg_def_list = func_arg_def COMMA func_arg_def_list .
    LA: {'CLOSE_PAREN'}


Node#194
  Rules:
    func_arg_def = type NAME OP_ASSIGN . expression
    LA: {'CLOSE_PAREN', 'COMMA'}

    expression = . expression KW_OR log_and_expr
    LA: {'CLOSE_PAREN', 'COMMA', 'KW_OR'}

    expression = . log_and_expr
    LA: {'CLOSE_PAREN', 'COMMA', 'KW_OR'}

    log_and_expr = . log_and_expr KW_AND bit_or_expr
    LA: {'CLOSE_PAREN', 'COMMA', 'KW_OR', 'KW_AND'}

    log_and_expr = . bit_or_expr
    LA: {'CLOSE_PAREN', 'COMMA', 'KW_OR', 'KW_AND'}

    bit_or_expr = . bit_or_expr OP_BIT_OR bit_xor_expr
    LA: {'KW_OR', 'OP_BIT_OR', 'CLOSE_PAREN', 'COMMA', 'KW_AND'}

    bit_or_expr = . bit_xor_expr
    LA: {'KW_OR', 'OP_BIT_OR', 'CLOSE_PAREN', 'COMMA', 'KW_AND'}

    bit_xor_expr = . bit_xor_expr OP_BIT_XOR bit_and_expr
    LA: {'KW_OR', 'OP_BIT_OR', 'OP_BIT_XOR', 'CLOSE_PAREN', 'COMMA', 'KW_AND'}

    bit_xor_expr = . bit_and_expr
    LA: {'KW_OR', 'OP_BIT_OR', 'OP_BIT_XOR', 'CLOSE_PAREN', 'COMMA', 'KW_AND'}

    bit_and_expr = . bit_and_expr OP_BIT_AND equ_expr
    LA: {'KW_OR', 'OP_BIT_OR', 'OP_BIT_XOR', 'OP_BIT_AND', 'CLOSE_PAREN', 'COMMA', 'KW_AND'}

    bit_and_expr = . equ_expr
    LA: {'KW_OR', 'OP_BIT_OR', 'OP_BIT_XOR', 'OP_BIT_AND', 'CLOSE_PAREN', 'COMMA', 'KW_AND'}

    equ_expr = . equ_expr OP_EQ comp_expr
    LA: {'OP_BIT_AND', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'OP_NEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'COMMA'}

    equ_expr = . equ_expr OP_NEQ comp_expr
    LA: {'OP_BIT_AND', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'OP_NEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'COMMA'}

    equ_expr = . comp_expr
    LA: {'OP_BIT_AND', 'CLOSE_PAREN', 'KW_AND', 'OP_BIT_XOR', 'OP_NEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'COMMA'}

    comp_expr = . comp_expr OP_LT math_expr
    LA: {'OP_BIT_AND', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_NEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'COMMA', 'OP_LT'}

    comp_expr = . comp_expr OP_LTEQ math_expr
    LA: {'OP_BIT_AND', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_NEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'COMMA', 'OP_LT'}

    comp_expr = . comp_expr OP_GT math_expr
    LA: {'OP_BIT_AND', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_NEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'COMMA', 'OP_LT'}

    comp_expr = . comp_expr OP_GTEQ math_expr
    LA: {'OP_BIT_AND', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_NEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'COMMA', 'OP_LT'}

    comp_expr = . math_expr
    LA: {'OP_BIT_AND', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_NEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'COMMA', 'OP_LT'}

    math_expr = . math_expr OP_PLUS term
    LA: {'OP_BIT_AND', 'CLOSE_PAREN', 'OP_PLUS', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_MINUS', 'OP_NEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'COMMA', 'OP_LT'}

    math_expr = . math_expr OP_MINUS term
    LA: {'OP_BIT_AND', 'CLOSE_PAREN', 'OP_PLUS', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_MINUS', 'OP_NEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'COMMA', 'OP_LT'}

    math_expr = . term
    LA: {'OP_BIT_AND', 'CLOSE_PAREN', 'OP_PLUS', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_MINUS', 'OP_NEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'COMMA', 'OP_LT'}

    term = . term OP_STAR factor
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'COMMA', 'OP_LT', 'OP_SLASH'}

    term = . term OP_SLASH factor
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'COMMA', 'OP_LT', 'OP_SLASH'}

    term = . term OP_MOD factor
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'COMMA', 'OP_LT', 'OP_SLASH'}

    term = . factor
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'COMMA', 'OP_LT', 'OP_SLASH'}

    factor = . factor OP_POW pow_term
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'COMMA', 'OP_LT', 'OP_SLASH'}

    factor = . pow_term
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'COMMA', 'OP_LT', 'OP_SLASH'}

    pow_term = . OP_MINUS inc_term
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'COMMA', 'OP_LT', 'OP_SLASH'}

    pow_term = . KW_NOT inc_term
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'COMMA', 'OP_LT', 'OP_SLASH'}

    pow_term = . inc_term
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'COMMA', 'OP_LT', 'OP_SLASH'}

    inc_term = . OP_INC bottom_val
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'COMMA', 'OP_LT', 'OP_SLASH'}

    inc_term = . bottom_val OP_INC
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'COMMA', 'OP_LT', 'OP_SLASH'}

    inc_term = . OP_DEC bottom_val
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'COMMA', 'OP_LT', 'OP_SLASH'}

    inc_term = . bottom_val OP_DEC
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'COMMA', 'OP_LT', 'OP_SLASH'}

    inc_term = . bottom_val
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'COMMA', 'OP_LT', 'OP_SLASH'}

    bottom_val = . bottom_val OPEN_PAREN expr_list CLOSE_PAREN
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . bottom_val OPEN_PAREN CLOSE_PAREN
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . bottom_val OP_DOT name
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . bottom_val OPEN_SQUARE expression CLOSE_SQUARE
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . comprehension
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . literal
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . name
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . OPEN_PAREN expression CLOSE_PAREN
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    comprehension = . OPEN_SQUARE linear_comprehension CLOSE_SQUARE
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    comprehension = . OPEN_CURLY linear_comprehension CLOSE_CURLY
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression CLOSE_CURLY
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression KW_IF expression CLOSE_CURLY
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    literal = . LIT_INT
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    literal = . LIT_FLOAT
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    literal = . lit_set
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    literal = . lit_string
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    literal = . lit_list
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    literal = . lit_map
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    literal = . KW_NULL
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    name = . NAME
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    lit_set = . OPEN_CURLY expr_list CLOSE_CURLY
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    lit_string = . DOUBLE_QUOTE_STR
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    lit_string = . SINGLE_QUOTE_STR
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    lit_list = . OPEN_SQUARE expr_list CLOSE_SQUARE
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    lit_map = . OPEN_CURLY map_list CLOSE_CURLY
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'CLOSE_PAREN', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}


  Transitions:
    Symbol: expression -> Node#235
    Symbol: log_and_expr -> Node#51
    Symbol: bit_or_expr -> Node#52
    Symbol: bit_xor_expr -> Node#53
    Symbol: bit_and_expr -> Node#54
    Symbol: equ_expr -> Node#55
    Symbol: comp_expr -> Node#56
    Symbol: math_expr -> Node#57
    Symbol: term -> Node#58
    Symbol: factor -> Node#59
    Symbol: pow_term -> Node#60
    Symbol: OP_MINUS -> Node#61
    Symbol: KW_NOT -> Node#62
    Symbol: inc_term -> Node#63
    Symbol: OP_INC -> Node#64
    Symbol: bottom_val -> Node#65
    Symbol: OP_DEC -> Node#66
    Symbol: comprehension -> Node#67
    Symbol: literal -> Node#68
    Symbol: name -> Node#69
    Symbol: OPEN_PAREN -> Node#70
    Symbol: OPEN_SQUARE -> Node#71
    Symbol: OPEN_CURLY -> Node#72
    Symbol: LIT_INT -> Node#73
    Symbol: LIT_FLOAT -> Node#74
    Symbol: lit_set -> Node#75
    Symbol: lit_string -> Node#76
    Symbol: lit_list -> Node#77
    Symbol: lit_map -> Node#78
    Symbol: KW_NULL -> Node#79
    Symbol: NAME -> Node#80
    Symbol: DOUBLE_QUOTE_STR -> Node#81
    Symbol: SINGLE_QUOTE_STR -> Node#82

Node#195
  Rules:
    func_definition = access_modifier KW_DELETE NAME OPEN_PAREN func_arg_definitions CLOSE_PAREN body .
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'CLOSE_CURLY', 'NAME', 'OPEN_CURLY', 'KW_DELETE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'TYPE_MAP', 'TYPE_BOOL', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'ACC_READONLY', 'ACC_PRIVATE', 'KW_NULL'}


Node#196
  Rules:
    class_definition = access_modifier KW_CLASS NAME OPEN_PAREN NAME CLOSE_PAREN class_body .
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'KW_DELETE', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}


Node#197
  Rules:
    class_statement = access_modifier special_mod OPEN_CURLY . var_def_list CLOSE_CURLY
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'CLOSE_CURLY', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'OPEN_CURLY', 'ACC_PUBLIC', 'KW_DELETE', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    var_def_list = . var_definition
    LA: {'CLOSE_CURLY'}

    var_def_list = . var_definition var_def_list
    LA: {'CLOSE_CURLY'}

    var_definition = . access_modifier special_mod type NAME SEMICOLON
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'CLOSE_CURLY', 'TYPE_MAP', 'NAME', 'TYPE_BOOL', 'KW_STATIC', 'TYPE_STR', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'ACC_PUBLIC', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    var_definition = . access_modifier special_mod type NAME OP_ASSIGN expression SEMICOLON
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'CLOSE_CURLY', 'TYPE_MAP', 'NAME', 'TYPE_BOOL', 'KW_STATIC', 'TYPE_STR', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'ACC_PUBLIC', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    var_definition = . access_modifier special_mod NAME OP_ASSIGN expression SEMICOLON
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'CLOSE_CURLY', 'TYPE_MAP', 'NAME', 'TYPE_BOOL', 'KW_STATIC', 'TYPE_STR', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'ACC_PUBLIC', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    access_modifier = . ACC_PUBLIC
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    access_modifier = . ACC_PRIVATE
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    access_modifier = . ACC_READONLY
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    access_modifier = . ACC_SHARED
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    access_modifier = .
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}


  Transitions:
    Symbol: var_def_list -> Node#236
    Symbol: var_definition -> Node#237
    Symbol: access_modifier -> Node#238
    Symbol: ACC_PUBLIC -> Node#8
    Symbol: ACC_PRIVATE -> Node#9
    Symbol: ACC_READONLY -> Node#10
    Symbol: ACC_SHARED -> Node#11

Node#198
  Rules:
    func_definition = access_modifier special_mod type . NAME OPEN_PAREN func_arg_definitions CLOSE_PAREN body
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'CLOSE_CURLY', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'OPEN_CURLY', 'ACC_PUBLIC', 'KW_DELETE', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}


  Transitions:
    Symbol: NAME -> Node#239

Node#199
  Rules:
    enum_statement = NAME OP_ASSIGN LIT_INT . SEMICOLON
    LA: {'CLOSE_CURLY', 'NAME'}


  Transitions:
    Symbol: SEMICOLON -> Node#240

Node#200
  Rules:
    func_definition = access_modifier special_mod type NAME OPEN_PAREN func_arg_definitions CLOSE_PAREN body .
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'CLOSE_CURLY', 'NAME', 'OPEN_CURLY', 'KW_DELETE', 'ACC_SHARED', 'KW_ENUM', 'TYPE_SET', 'TYPE_INT', 'TYPE_MAP', 'TYPE_BOOL', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'KW_CLASS', 'ACC_PUBLIC', '__EOF__', 'ACC_READONLY', 'ACC_PRIVATE', 'KW_NULL'}


Node#201
  Rules:
    bottom_val = bottom_val OPEN_PAREN expr_list CLOSE_PAREN .
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_CURLY', 'OP_MINUS', 'OP_AND_ASSIGN', 'CLOSE_PAREN', 'OP_XOR_ASSIGN', 'KW_AND', 'KW_OR', 'OP_MOD_ASSIGN', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_ADD_ASSIGN', 'OP_OR_ASSIGN', 'OP_DOT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_PLUS', 'OP_NEQ', 'OP_SUB_ASSIGN', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_ASSIGN', 'KW_ELSE', 'OP_BIT_XOR', 'OP_BIT_OR', 'COMMA', 'OP_BIT_AND', 'OP_GT', 'OP_MUL_ASSIGN', 'KW_TO', 'OP_LTEQ'}


Node#202
  Rules:
    bottom_val = bottom_val OPEN_SQUARE expression CLOSE_SQUARE .
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_CURLY', 'OP_MINUS', 'OP_AND_ASSIGN', 'CLOSE_PAREN', 'OP_XOR_ASSIGN', 'KW_AND', 'KW_OR', 'OP_MOD_ASSIGN', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_ADD_ASSIGN', 'OP_OR_ASSIGN', 'OP_DOT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_PLUS', 'OP_NEQ', 'OP_SUB_ASSIGN', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_ASSIGN', 'KW_ELSE', 'OP_BIT_XOR', 'OP_BIT_OR', 'COMMA', 'OP_BIT_AND', 'OP_GT', 'OP_MUL_ASSIGN', 'KW_TO', 'OP_LTEQ'}


Node#203
  Rules:
    linear_comprehension = expression KW_FOR name . KW_IN expression
    LA: {'CLOSE_CURLY', 'CLOSE_SQUARE'}

    linear_comprehension = expression KW_FOR name . KW_IN expression KW_IF expression
    LA: {'CLOSE_CURLY', 'CLOSE_SQUARE'}


  Transitions:
    Symbol: KW_IN -> Node#241

Node#204
  Rules:
    expr_list = expression COMMA expr_list .
    LA: {'CLOSE_PAREN', 'CLOSE_CURLY', 'CLOSE_SQUARE'}


Node#205
  Rules:
    comprehension = OPEN_CURLY expression COLON expression . KW_FOR name KW_IN expression CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_CURLY', 'OP_MINUS', 'OP_AND_ASSIGN', 'CLOSE_PAREN', 'OP_XOR_ASSIGN', 'KW_AND', 'KW_OR', 'OP_MOD_ASSIGN', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_ADD_ASSIGN', 'OP_OR_ASSIGN', 'OP_DOT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_NEQ', 'OP_PLUS', 'OP_SUB_ASSIGN', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_ASSIGN', 'KW_ELSE', 'OP_BIT_XOR', 'OP_BIT_OR', 'COMMA', 'OP_BIT_AND', 'OP_GT', 'OP_MUL_ASSIGN', 'KW_TO', 'OP_LTEQ'}

    comprehension = OPEN_CURLY expression COLON expression . KW_FOR name KW_IN expression KW_IF expression CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_CURLY', 'OP_MINUS', 'OP_AND_ASSIGN', 'CLOSE_PAREN', 'OP_XOR_ASSIGN', 'KW_AND', 'KW_OR', 'OP_MOD_ASSIGN', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_ADD_ASSIGN', 'OP_OR_ASSIGN', 'OP_DOT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_NEQ', 'OP_PLUS', 'OP_SUB_ASSIGN', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_ASSIGN', 'KW_ELSE', 'OP_BIT_XOR', 'OP_BIT_OR', 'COMMA', 'OP_BIT_AND', 'OP_GT', 'OP_MUL_ASSIGN', 'KW_TO', 'OP_LTEQ'}

    map_expression = expression COLON expression .
    LA: {'COMMA', 'CLOSE_CURLY'}

    expression = expression . KW_OR log_and_expr
    LA: {'COMMA', 'KW_FOR', 'CLOSE_CURLY', 'KW_OR'}


  Transitions:
    Symbol: KW_FOR -> Node#242
    Symbol: KW_OR -> Node#105

Node#206
  Rules:
    map_list = map_expression COMMA map_list .
    LA: {'CLOSE_CURLY'}


Node#207
  Rules:
    map_expression = expression . COLON expression
    LA: {'COMMA', 'CLOSE_CURLY'}

    expression = expression . KW_OR log_and_expr
    LA: {'COLON', 'KW_OR'}


  Transitions:
    Symbol: COLON -> Node#243
    Symbol: KW_OR -> Node#105

Node#208
  Rules:
    type = TYPE_MAP OP_LT type COMMA type OP_GT .
    LA: {'COMMA', 'NAME', 'OP_GT'}


Node#209
  Rules:
    body = OPEN_CURLY statements . CLOSE_CURLY
    LA: {'KW_ABSTRACT', 'CLOSE_CURLY', 'NAME', 'KW_FOR', 'OP_INC', 'OPEN_CURLY', 'KW_CATCH', 'OP_MINUS', 'KW_RETURN', 'DOUBLE_QUOTE_STR', 'KW_DELETE', 'KW_ENUM', 'TYPE_INT', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_LIST', 'KW_NOT', 'OPEN_PAREN', 'OP_DEC', 'KW_CLASS', 'ACC_READONLY', 'KW_THROW', 'ACC_PRIVATE', 'KW_NULL', '__EMPTY__', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'KW_IF', 'KW_ELSE', 'ACC_SHARED', 'TYPE_SET', 'TYPE_MAP', 'KW_WHILE', 'KW_STATIC', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'LIT_INT', 'ACC_PUBLIC', '__EOF__', 'KW_TRY'}


  Transitions:
    Symbol: CLOSE_CURLY -> Node#244

Node#210
  Rules:
    body = OPEN_CURLY CLOSE_CURLY .
    LA: {'KW_ABSTRACT', 'CLOSE_CURLY', 'NAME', 'KW_FOR', 'OP_INC', 'OPEN_CURLY', 'KW_CATCH', 'OP_MINUS', 'KW_RETURN', 'DOUBLE_QUOTE_STR', 'KW_DELETE', 'KW_ENUM', 'TYPE_INT', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_LIST', 'KW_NOT', 'OPEN_PAREN', 'OP_DEC', 'KW_CLASS', 'ACC_READONLY', 'KW_THROW', 'ACC_PRIVATE', 'KW_NULL', '__EMPTY__', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'KW_IF', 'KW_ELSE', 'ACC_SHARED', 'TYPE_SET', 'TYPE_MAP', 'KW_WHILE', 'KW_STATIC', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'LIT_INT', 'ACC_PUBLIC', '__EOF__', 'KW_TRY'}


Node#211
  Rules:
    statements = statement .
    LA: {'CLOSE_CURLY'}

    statements = statement . statements
    LA: {'CLOSE_CURLY'}

    statements = . statement
    LA: {'CLOSE_CURLY'}

    statements = . statement statements
    LA: {'CLOSE_CURLY'}

    statement = . statement_body SEMICOLON
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    statement = . body
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    statement = . if_statement
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    statement = . while_statement
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    statement = . do_while_statement
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    statement = . for_statement
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    statement = . try_catch_statement
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    statement_body = . assignment
    LA: {'SEMICOLON'}

    statement_body = . return_statement
    LA: {'SEMICOLON'}

    statement_body = . expression
    LA: {'SEMICOLON'}

    statement_body = . throw_statement
    LA: {'SEMICOLON'}

    body = . OPEN_CURLY statements CLOSE_CURLY
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    body = . OPEN_CURLY CLOSE_CURLY
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    if_statement = . KW_IF expression body else_statement
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    while_statement = . KW_WHILE expression body
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    do_while_statement = . KW_DO body KW_WHILE expression SEMICOLON
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    for_statement = . KW_FOR name KW_IN expression body
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    for_statement = . KW_FOR name KW_IN expression KW_TO expression body
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    try_catch_statement = . KW_TRY body catch_statements
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    assignment = . bottom_val assign_op assign_expr
    LA: {'SEMICOLON'}

    assignment = . type name assign_op assign_expr
    LA: {'SEMICOLON'}

    return_statement = . KW_RETURN expression
    LA: {'SEMICOLON'}

    expression = . expression KW_OR log_and_expr
    LA: {'KW_OR', 'SEMICOLON'}

    expression = . log_and_expr
    LA: {'KW_OR', 'SEMICOLON'}

    throw_statement = . KW_THROW expression
    LA: {'SEMICOLON'}

    bottom_val = . bottom_val OPEN_PAREN expr_list CLOSE_PAREN
    LA: {'SEMICOLON', 'OPEN_SQUARE', 'OP_INC', 'OP_EQ', 'OP_MINUS', 'OP_ASSIGN', 'OP_AND_ASSIGN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_PLUS', 'OP_OR_ASSIGN', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ', 'OP_SUB_ASSIGN'}

    bottom_val = . bottom_val OPEN_PAREN CLOSE_PAREN
    LA: {'SEMICOLON', 'OPEN_SQUARE', 'OP_INC', 'OP_EQ', 'OP_MINUS', 'OP_ASSIGN', 'OP_AND_ASSIGN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_PLUS', 'OP_OR_ASSIGN', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ', 'OP_SUB_ASSIGN'}

    bottom_val = . bottom_val OP_DOT name
    LA: {'SEMICOLON', 'OPEN_SQUARE', 'OP_INC', 'OP_EQ', 'OP_MINUS', 'OP_ASSIGN', 'OP_AND_ASSIGN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_PLUS', 'OP_OR_ASSIGN', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ', 'OP_SUB_ASSIGN'}

    bottom_val = . bottom_val OPEN_SQUARE expression CLOSE_SQUARE
    LA: {'SEMICOLON', 'OPEN_SQUARE', 'OP_INC', 'OP_EQ', 'OP_MINUS', 'OP_ASSIGN', 'OP_AND_ASSIGN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_PLUS', 'OP_OR_ASSIGN', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ', 'OP_SUB_ASSIGN'}

    bottom_val = . comprehension
    LA: {'SEMICOLON', 'OPEN_SQUARE', 'OP_INC', 'OP_EQ', 'OP_MINUS', 'OP_ASSIGN', 'OP_AND_ASSIGN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_PLUS', 'OP_OR_ASSIGN', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ', 'OP_SUB_ASSIGN'}

    bottom_val = . literal
    LA: {'SEMICOLON', 'OPEN_SQUARE', 'OP_INC', 'OP_EQ', 'OP_MINUS', 'OP_ASSIGN', 'OP_AND_ASSIGN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_PLUS', 'OP_OR_ASSIGN', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ', 'OP_SUB_ASSIGN'}

    bottom_val = . name
    LA: {'SEMICOLON', 'OPEN_SQUARE', 'OP_INC', 'OP_EQ', 'OP_MINUS', 'OP_ASSIGN', 'OP_AND_ASSIGN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_PLUS', 'OP_OR_ASSIGN', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ', 'OP_SUB_ASSIGN'}

    bottom_val = . OPEN_PAREN expression CLOSE_PAREN
    LA: {'SEMICOLON', 'OPEN_SQUARE', 'OP_INC', 'OP_EQ', 'OP_MINUS', 'OP_ASSIGN', 'OP_AND_ASSIGN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_PLUS', 'OP_OR_ASSIGN', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ', 'OP_SUB_ASSIGN'}

    type = . TYPE_ARRAY OP_LT type OP_GT
    LA: {'NAME'}

    type = . TYPE_LIST OP_LT type OP_GT
    LA: {'NAME'}

    type = . TYPE_MAP OP_LT type COMMA type OP_GT
    LA: {'NAME'}

    type = . TYPE_SET OP_LT type OP_GT
    LA: {'NAME'}

    type = . TYPE_STR
    LA: {'NAME'}

    type = . TYPE_INT
    LA: {'NAME'}

    type = . TYPE_FLOAT
    LA: {'NAME'}

    type = . TYPE_BOOL
    LA: {'NAME'}

    type = . KW_NULL
    LA: {'NAME'}

    type = . NAME
    LA: {'NAME'}

    log_and_expr = . log_and_expr KW_AND bit_or_expr
    LA: {'KW_OR', 'SEMICOLON', 'KW_AND'}

    log_and_expr = . bit_or_expr
    LA: {'KW_OR', 'SEMICOLON', 'KW_AND'}

    comprehension = . OPEN_SQUARE linear_comprehension CLOSE_SQUARE
    LA: {'SEMICOLON', 'OPEN_SQUARE', 'OP_INC', 'OP_EQ', 'OP_MINUS', 'OP_ASSIGN', 'OP_AND_ASSIGN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_OR_ASSIGN', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_DEC', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS', 'OP_SUB_ASSIGN'}

    comprehension = . OPEN_CURLY linear_comprehension CLOSE_CURLY
    LA: {'SEMICOLON', 'OPEN_SQUARE', 'OP_INC', 'OP_EQ', 'OP_MINUS', 'OP_ASSIGN', 'OP_AND_ASSIGN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_OR_ASSIGN', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_DEC', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS', 'OP_SUB_ASSIGN'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression CLOSE_CURLY
    LA: {'SEMICOLON', 'OPEN_SQUARE', 'OP_INC', 'OP_EQ', 'OP_MINUS', 'OP_ASSIGN', 'OP_AND_ASSIGN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_OR_ASSIGN', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_DEC', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS', 'OP_SUB_ASSIGN'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression KW_IF expression CLOSE_CURLY
    LA: {'SEMICOLON', 'OPEN_SQUARE', 'OP_INC', 'OP_EQ', 'OP_MINUS', 'OP_ASSIGN', 'OP_AND_ASSIGN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_OR_ASSIGN', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_DEC', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS', 'OP_SUB_ASSIGN'}

    literal = . LIT_INT
    LA: {'SEMICOLON', 'OPEN_SQUARE', 'OP_INC', 'OP_EQ', 'OP_MINUS', 'OP_ASSIGN', 'OP_AND_ASSIGN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_OR_ASSIGN', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_DEC', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS', 'OP_SUB_ASSIGN'}

    literal = . LIT_FLOAT
    LA: {'SEMICOLON', 'OPEN_SQUARE', 'OP_INC', 'OP_EQ', 'OP_MINUS', 'OP_ASSIGN', 'OP_AND_ASSIGN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_OR_ASSIGN', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_DEC', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS', 'OP_SUB_ASSIGN'}

    literal = . lit_set
    LA: {'SEMICOLON', 'OPEN_SQUARE', 'OP_INC', 'OP_EQ', 'OP_MINUS', 'OP_ASSIGN', 'OP_AND_ASSIGN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_OR_ASSIGN', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_DEC', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS', 'OP_SUB_ASSIGN'}

    literal = . lit_string
    LA: {'SEMICOLON', 'OPEN_SQUARE', 'OP_INC', 'OP_EQ', 'OP_MINUS', 'OP_ASSIGN', 'OP_AND_ASSIGN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_OR_ASSIGN', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_DEC', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS', 'OP_SUB_ASSIGN'}

    literal = . lit_list
    LA: {'SEMICOLON', 'OPEN_SQUARE', 'OP_INC', 'OP_EQ', 'OP_MINUS', 'OP_ASSIGN', 'OP_AND_ASSIGN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_OR_ASSIGN', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_DEC', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS', 'OP_SUB_ASSIGN'}

    literal = . lit_map
    LA: {'SEMICOLON', 'OPEN_SQUARE', 'OP_INC', 'OP_EQ', 'OP_MINUS', 'OP_ASSIGN', 'OP_AND_ASSIGN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_OR_ASSIGN', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_DEC', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS', 'OP_SUB_ASSIGN'}

    literal = . KW_NULL
    LA: {'SEMICOLON', 'OPEN_SQUARE', 'OP_INC', 'OP_EQ', 'OP_MINUS', 'OP_ASSIGN', 'OP_AND_ASSIGN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_OR_ASSIGN', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_DEC', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS', 'OP_SUB_ASSIGN'}

    name = . NAME
    LA: {'SEMICOLON', 'OPEN_SQUARE', 'OP_INC', 'OP_EQ', 'OP_MINUS', 'OP_ASSIGN', 'OP_AND_ASSIGN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_OR_ASSIGN', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_DEC', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS', 'OP_SUB_ASSIGN'}

    bit_or_expr = . bit_or_expr OP_BIT_OR bit_xor_expr
    LA: {'KW_OR', 'SEMICOLON', 'OP_BIT_OR', 'KW_AND'}

    bit_or_expr = . bit_xor_expr
    LA: {'KW_OR', 'SEMICOLON', 'OP_BIT_OR', 'KW_AND'}

    lit_set = . OPEN_CURLY expr_list CLOSE_CURLY
    LA: {'SEMICOLON', 'OPEN_SQUARE', 'OP_INC', 'OP_EQ', 'OP_MINUS', 'OP_ASSIGN', 'OP_AND_ASSIGN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_PLUS', 'OP_OR_ASSIGN', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_DEC', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ', 'OP_SUB_ASSIGN'}

    lit_string = . DOUBLE_QUOTE_STR
    LA: {'SEMICOLON', 'OPEN_SQUARE', 'OP_INC', 'OP_EQ', 'OP_MINUS', 'OP_ASSIGN', 'OP_AND_ASSIGN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_PLUS', 'OP_OR_ASSIGN', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_DEC', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ', 'OP_SUB_ASSIGN'}

    lit_string = . SINGLE_QUOTE_STR
    LA: {'SEMICOLON', 'OPEN_SQUARE', 'OP_INC', 'OP_EQ', 'OP_MINUS', 'OP_ASSIGN', 'OP_AND_ASSIGN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_PLUS', 'OP_OR_ASSIGN', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_DEC', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ', 'OP_SUB_ASSIGN'}

    lit_list = . OPEN_SQUARE expr_list CLOSE_SQUARE
    LA: {'SEMICOLON', 'OPEN_SQUARE', 'OP_INC', 'OP_EQ', 'OP_MINUS', 'OP_ASSIGN', 'OP_AND_ASSIGN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_PLUS', 'OP_OR_ASSIGN', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_DEC', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ', 'OP_SUB_ASSIGN'}

    lit_map = . OPEN_CURLY map_list CLOSE_CURLY
    LA: {'SEMICOLON', 'OPEN_SQUARE', 'OP_INC', 'OP_EQ', 'OP_MINUS', 'OP_ASSIGN', 'OP_AND_ASSIGN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_PLUS', 'OP_OR_ASSIGN', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_DEC', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ', 'OP_SUB_ASSIGN'}

    bit_xor_expr = . bit_xor_expr OP_BIT_XOR bit_and_expr
    LA: {'KW_OR', 'OP_BIT_OR', 'KW_AND', 'SEMICOLON', 'OP_BIT_XOR'}

    bit_xor_expr = . bit_and_expr
    LA: {'KW_OR', 'OP_BIT_OR', 'KW_AND', 'SEMICOLON', 'OP_BIT_XOR'}

    bit_and_expr = . bit_and_expr OP_BIT_AND equ_expr
    LA: {'KW_OR', 'OP_BIT_OR', 'OP_BIT_AND', 'KW_AND', 'SEMICOLON', 'OP_BIT_XOR'}

    bit_and_expr = . equ_expr
    LA: {'KW_OR', 'OP_BIT_OR', 'OP_BIT_AND', 'KW_AND', 'SEMICOLON', 'OP_BIT_XOR'}

    equ_expr = . equ_expr OP_EQ comp_expr
    LA: {'OP_NEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_BIT_AND', 'KW_AND', 'SEMICOLON', 'OP_BIT_XOR'}

    equ_expr = . equ_expr OP_NEQ comp_expr
    LA: {'OP_NEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_BIT_AND', 'KW_AND', 'SEMICOLON', 'OP_BIT_XOR'}

    equ_expr = . comp_expr
    LA: {'OP_NEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_BIT_AND', 'KW_AND', 'SEMICOLON', 'OP_BIT_XOR'}

    comp_expr = . comp_expr OP_LT math_expr
    LA: {'OP_BIT_AND', 'KW_AND', 'SEMICOLON', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    comp_expr = . comp_expr OP_LTEQ math_expr
    LA: {'OP_BIT_AND', 'KW_AND', 'SEMICOLON', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    comp_expr = . comp_expr OP_GT math_expr
    LA: {'OP_BIT_AND', 'KW_AND', 'SEMICOLON', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    comp_expr = . comp_expr OP_GTEQ math_expr
    LA: {'OP_BIT_AND', 'KW_AND', 'SEMICOLON', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    comp_expr = . math_expr
    LA: {'OP_BIT_AND', 'KW_AND', 'SEMICOLON', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    math_expr = . math_expr OP_PLUS term
    LA: {'OP_BIT_AND', 'OP_PLUS', 'KW_AND', 'SEMICOLON', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'OP_MINUS', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    math_expr = . math_expr OP_MINUS term
    LA: {'OP_BIT_AND', 'OP_PLUS', 'KW_AND', 'SEMICOLON', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'OP_MINUS', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    math_expr = . term
    LA: {'OP_BIT_AND', 'OP_PLUS', 'KW_AND', 'SEMICOLON', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'OP_MINUS', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    term = . term OP_STAR factor
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    term = . term OP_SLASH factor
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    term = . term OP_MOD factor
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    term = . factor
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    factor = . factor OP_POW pow_term
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    factor = . pow_term
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    pow_term = . OP_MINUS inc_term
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    pow_term = . KW_NOT inc_term
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    pow_term = . inc_term
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . OP_INC bottom_val
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . bottom_val OP_INC
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . OP_DEC bottom_val
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . bottom_val OP_DEC
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . bottom_val
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}


  Transitions:
    Symbol: statements -> Node#245
    Symbol: statement -> Node#211
    Symbol: statement_body -> Node#212
    Symbol: body -> Node#213
    Symbol: if_statement -> Node#214
    Symbol: while_statement -> Node#215
    Symbol: do_while_statement -> Node#216
    Symbol: for_statement -> Node#217
    Symbol: try_catch_statement -> Node#218
    Symbol: assignment -> Node#219
    Symbol: return_statement -> Node#220
    Symbol: expression -> Node#221
    Symbol: throw_statement -> Node#222
    Symbol: OPEN_CURLY -> Node#223
    Symbol: KW_IF -> Node#224
    Symbol: KW_WHILE -> Node#225
    Symbol: KW_DO -> Node#226
    Symbol: KW_FOR -> Node#227
    Symbol: KW_TRY -> Node#228
    Symbol: bottom_val -> Node#229
    Symbol: type -> Node#230
    Symbol: KW_RETURN -> Node#231
    Symbol: log_and_expr -> Node#51
    Symbol: KW_THROW -> Node#232
    Symbol: comprehension -> Node#67
    Symbol: literal -> Node#68
    Symbol: name -> Node#69
    Symbol: OPEN_PAREN -> Node#70
    Symbol: TYPE_ARRAY -> Node#22
    Symbol: TYPE_LIST -> Node#23
    Symbol: TYPE_MAP -> Node#24
    Symbol: TYPE_SET -> Node#25
    Symbol: TYPE_STR -> Node#26
    Symbol: TYPE_INT -> Node#27
    Symbol: TYPE_FLOAT -> Node#28
    Symbol: TYPE_BOOL -> Node#29
    Symbol: KW_NULL -> Node#233
    Symbol: NAME -> Node#234
    Symbol: bit_or_expr -> Node#52
    Symbol: OPEN_SQUARE -> Node#71
    Symbol: LIT_INT -> Node#73
    Symbol: LIT_FLOAT -> Node#74
    Symbol: lit_set -> Node#75
    Symbol: lit_string -> Node#76
    Symbol: lit_list -> Node#77
    Symbol: lit_map -> Node#78
    Symbol: bit_xor_expr -> Node#53
    Symbol: DOUBLE_QUOTE_STR -> Node#81
    Symbol: SINGLE_QUOTE_STR -> Node#82
    Symbol: bit_and_expr -> Node#54
    Symbol: equ_expr -> Node#55
    Symbol: comp_expr -> Node#56
    Symbol: math_expr -> Node#57
    Symbol: term -> Node#58
    Symbol: factor -> Node#59
    Symbol: pow_term -> Node#60
    Symbol: OP_MINUS -> Node#61
    Symbol: KW_NOT -> Node#62
    Symbol: inc_term -> Node#63
    Symbol: OP_INC -> Node#64
    Symbol: OP_DEC -> Node#66

Node#212
  Rules:
    statement = statement_body . SEMICOLON
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}


  Transitions:
    Symbol: SEMICOLON -> Node#246

Node#213
  Rules:
    statement = body .
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}


Node#214
  Rules:
    statement = if_statement .
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}


Node#215
  Rules:
    statement = while_statement .
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}


Node#216
  Rules:
    statement = do_while_statement .
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}


Node#217
  Rules:
    statement = for_statement .
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}


Node#218
  Rules:
    statement = try_catch_statement .
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}


Node#219
  Rules:
    statement_body = assignment .
    LA: {'SEMICOLON'}


Node#220
  Rules:
    statement_body = return_statement .
    LA: {'SEMICOLON'}


Node#221
  Rules:
    statement_body = expression .
    LA: {'SEMICOLON'}

    expression = expression . KW_OR log_and_expr
    LA: {'KW_OR', 'SEMICOLON'}


  Transitions:
    Symbol: KW_OR -> Node#105

Node#222
  Rules:
    statement_body = throw_statement .
    LA: {'SEMICOLON'}


Node#223
  Rules:
    body = OPEN_CURLY . statements CLOSE_CURLY
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    body = OPEN_CURLY . CLOSE_CURLY
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    comprehension = OPEN_CURLY . linear_comprehension CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'KW_FOR', 'OPEN_SQUARE', 'OP_INC', 'OP_EQ', 'OP_MINUS', 'OP_ASSIGN', 'OP_AND_ASSIGN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_OR_ASSIGN', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_DEC', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS', 'OP_SUB_ASSIGN'}

    comprehension = OPEN_CURLY . expression COLON expression KW_FOR name KW_IN expression CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'KW_FOR', 'OPEN_SQUARE', 'OP_INC', 'OP_EQ', 'OP_MINUS', 'OP_ASSIGN', 'OP_AND_ASSIGN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_OR_ASSIGN', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_DEC', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS', 'OP_SUB_ASSIGN'}

    comprehension = OPEN_CURLY . expression COLON expression KW_FOR name KW_IN expression KW_IF expression CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'KW_FOR', 'OPEN_SQUARE', 'OP_INC', 'OP_EQ', 'OP_MINUS', 'OP_ASSIGN', 'OP_AND_ASSIGN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_OR_ASSIGN', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_DEC', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS', 'OP_SUB_ASSIGN'}

    lit_set = OPEN_CURLY . expr_list CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'KW_FOR', 'OPEN_SQUARE', 'OP_INC', 'OP_EQ', 'OP_MINUS', 'OP_ASSIGN', 'OP_AND_ASSIGN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_PLUS', 'OP_OR_ASSIGN', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_DEC', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ', 'OP_SUB_ASSIGN'}

    lit_map = OPEN_CURLY . map_list CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'KW_FOR', 'OPEN_SQUARE', 'OP_INC', 'OP_EQ', 'OP_MINUS', 'OP_ASSIGN', 'OP_AND_ASSIGN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_PLUS', 'OP_OR_ASSIGN', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_DEC', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ', 'OP_SUB_ASSIGN'}

    statements = . statement
    LA: {'CLOSE_CURLY'}

    statements = . statement statements
    LA: {'CLOSE_CURLY'}

    linear_comprehension = . expression KW_FOR name KW_IN expression
    LA: {'CLOSE_CURLY'}

    linear_comprehension = . expression KW_FOR name KW_IN expression KW_IF expression
    LA: {'CLOSE_CURLY'}

    expression = . expression KW_OR log_and_expr
    LA: {'CLOSE_CURLY', 'KW_FOR', 'KW_OR', 'COLON', 'COMMA', 'SEMICOLON'}

    expression = . log_and_expr
    LA: {'CLOSE_CURLY', 'KW_FOR', 'KW_OR', 'COLON', 'COMMA', 'SEMICOLON'}

    expr_list = . expression
    LA: {'CLOSE_CURLY'}

    expr_list = . expression COMMA expr_list
    LA: {'CLOSE_CURLY'}

    map_list = . map_expression
    LA: {'CLOSE_CURLY'}

    map_list = . map_expression COMMA map_list
    LA: {'CLOSE_CURLY'}

    statement = . statement_body SEMICOLON
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    statement = . body
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    statement = . if_statement
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    statement = . while_statement
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    statement = . do_while_statement
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    statement = . for_statement
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    statement = . try_catch_statement
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    log_and_expr = . log_and_expr KW_AND bit_or_expr
    LA: {'CLOSE_CURLY', 'COLON', 'KW_AND', 'SEMICOLON', 'KW_FOR', 'KW_OR', 'COMMA'}

    log_and_expr = . bit_or_expr
    LA: {'CLOSE_CURLY', 'COLON', 'KW_AND', 'SEMICOLON', 'KW_FOR', 'KW_OR', 'COMMA'}

    map_expression = . expression COLON expression
    LA: {'COMMA', 'CLOSE_CURLY'}

    statement_body = . assignment
    LA: {'SEMICOLON'}

    statement_body = . return_statement
    LA: {'SEMICOLON'}

    statement_body = . expression
    LA: {'SEMICOLON'}

    statement_body = . throw_statement
    LA: {'SEMICOLON'}

    body = . OPEN_CURLY statements CLOSE_CURLY
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    body = . OPEN_CURLY CLOSE_CURLY
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    if_statement = . KW_IF expression body else_statement
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    while_statement = . KW_WHILE expression body
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    do_while_statement = . KW_DO body KW_WHILE expression SEMICOLON
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    for_statement = . KW_FOR name KW_IN expression body
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    for_statement = . KW_FOR name KW_IN expression KW_TO expression body
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    try_catch_statement = . KW_TRY body catch_statements
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    bit_or_expr = . bit_or_expr OP_BIT_OR bit_xor_expr
    LA: {'CLOSE_CURLY', 'COLON', 'KW_AND', 'SEMICOLON', 'KW_FOR', 'KW_OR', 'OP_BIT_OR', 'COMMA'}

    bit_or_expr = . bit_xor_expr
    LA: {'CLOSE_CURLY', 'COLON', 'KW_AND', 'SEMICOLON', 'KW_FOR', 'KW_OR', 'OP_BIT_OR', 'COMMA'}

    assignment = . bottom_val assign_op assign_expr
    LA: {'SEMICOLON'}

    assignment = . type name assign_op assign_expr
    LA: {'SEMICOLON'}

    return_statement = . KW_RETURN expression
    LA: {'SEMICOLON'}

    throw_statement = . KW_THROW expression
    LA: {'SEMICOLON'}

    bit_xor_expr = . bit_xor_expr OP_BIT_XOR bit_and_expr
    LA: {'CLOSE_CURLY', 'COLON', 'KW_AND', 'SEMICOLON', 'OP_BIT_XOR', 'KW_FOR', 'KW_OR', 'OP_BIT_OR', 'COMMA'}

    bit_xor_expr = . bit_and_expr
    LA: {'CLOSE_CURLY', 'COLON', 'KW_AND', 'SEMICOLON', 'OP_BIT_XOR', 'KW_FOR', 'KW_OR', 'OP_BIT_OR', 'COMMA'}

    bottom_val = . bottom_val OPEN_PAREN expr_list CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'KW_FOR', 'OPEN_SQUARE', 'OP_INC', 'OP_EQ', 'OP_MINUS', 'OP_ASSIGN', 'OP_AND_ASSIGN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_PLUS', 'OP_OR_ASSIGN', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ', 'OP_SUB_ASSIGN'}

    bottom_val = . bottom_val OPEN_PAREN CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'KW_FOR', 'OPEN_SQUARE', 'OP_INC', 'OP_EQ', 'OP_MINUS', 'OP_ASSIGN', 'OP_AND_ASSIGN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_PLUS', 'OP_OR_ASSIGN', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ', 'OP_SUB_ASSIGN'}

    bottom_val = . bottom_val OP_DOT name
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'KW_FOR', 'OPEN_SQUARE', 'OP_INC', 'OP_EQ', 'OP_MINUS', 'OP_ASSIGN', 'OP_AND_ASSIGN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_PLUS', 'OP_OR_ASSIGN', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ', 'OP_SUB_ASSIGN'}

    bottom_val = . bottom_val OPEN_SQUARE expression CLOSE_SQUARE
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'KW_FOR', 'OPEN_SQUARE', 'OP_INC', 'OP_EQ', 'OP_MINUS', 'OP_ASSIGN', 'OP_AND_ASSIGN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_PLUS', 'OP_OR_ASSIGN', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ', 'OP_SUB_ASSIGN'}

    bottom_val = . comprehension
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'KW_FOR', 'OPEN_SQUARE', 'OP_INC', 'OP_EQ', 'OP_MINUS', 'OP_ASSIGN', 'OP_AND_ASSIGN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_PLUS', 'OP_OR_ASSIGN', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ', 'OP_SUB_ASSIGN'}

    bottom_val = . literal
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'KW_FOR', 'OPEN_SQUARE', 'OP_INC', 'OP_EQ', 'OP_MINUS', 'OP_ASSIGN', 'OP_AND_ASSIGN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_PLUS', 'OP_OR_ASSIGN', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ', 'OP_SUB_ASSIGN'}

    bottom_val = . name
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'KW_FOR', 'OPEN_SQUARE', 'OP_INC', 'OP_EQ', 'OP_MINUS', 'OP_ASSIGN', 'OP_AND_ASSIGN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_PLUS', 'OP_OR_ASSIGN', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ', 'OP_SUB_ASSIGN'}

    bottom_val = . OPEN_PAREN expression CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'KW_FOR', 'OPEN_SQUARE', 'OP_INC', 'OP_EQ', 'OP_MINUS', 'OP_ASSIGN', 'OP_AND_ASSIGN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_PLUS', 'OP_OR_ASSIGN', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ', 'OP_SUB_ASSIGN'}

    type = . TYPE_ARRAY OP_LT type OP_GT
    LA: {'NAME'}

    type = . TYPE_LIST OP_LT type OP_GT
    LA: {'NAME'}

    type = . TYPE_MAP OP_LT type COMMA type OP_GT
    LA: {'NAME'}

    type = . TYPE_SET OP_LT type OP_GT
    LA: {'NAME'}

    type = . TYPE_STR
    LA: {'NAME'}

    type = . TYPE_INT
    LA: {'NAME'}

    type = . TYPE_FLOAT
    LA: {'NAME'}

    type = . TYPE_BOOL
    LA: {'NAME'}

    type = . KW_NULL
    LA: {'NAME'}

    type = . NAME
    LA: {'NAME'}

    bit_and_expr = . bit_and_expr OP_BIT_AND equ_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'COLON', 'SEMICOLON', 'KW_FOR', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA'}

    bit_and_expr = . equ_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'COLON', 'SEMICOLON', 'KW_FOR', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA'}

    comprehension = . OPEN_SQUARE linear_comprehension CLOSE_SQUARE
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'KW_FOR', 'OPEN_SQUARE', 'OP_INC', 'OP_EQ', 'OP_MINUS', 'OP_ASSIGN', 'OP_AND_ASSIGN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_OR_ASSIGN', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_DEC', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS', 'OP_SUB_ASSIGN'}

    comprehension = . OPEN_CURLY linear_comprehension CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'KW_FOR', 'OPEN_SQUARE', 'OP_INC', 'OP_EQ', 'OP_MINUS', 'OP_ASSIGN', 'OP_AND_ASSIGN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_OR_ASSIGN', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_DEC', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS', 'OP_SUB_ASSIGN'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'KW_FOR', 'OPEN_SQUARE', 'OP_INC', 'OP_EQ', 'OP_MINUS', 'OP_ASSIGN', 'OP_AND_ASSIGN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_OR_ASSIGN', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_DEC', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS', 'OP_SUB_ASSIGN'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression KW_IF expression CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'KW_FOR', 'OPEN_SQUARE', 'OP_INC', 'OP_EQ', 'OP_MINUS', 'OP_ASSIGN', 'OP_AND_ASSIGN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_OR_ASSIGN', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_DEC', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS', 'OP_SUB_ASSIGN'}

    literal = . LIT_INT
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'KW_FOR', 'OPEN_SQUARE', 'OP_INC', 'OP_EQ', 'OP_MINUS', 'OP_ASSIGN', 'OP_AND_ASSIGN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_OR_ASSIGN', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_DEC', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS', 'OP_SUB_ASSIGN'}

    literal = . LIT_FLOAT
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'KW_FOR', 'OPEN_SQUARE', 'OP_INC', 'OP_EQ', 'OP_MINUS', 'OP_ASSIGN', 'OP_AND_ASSIGN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_OR_ASSIGN', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_DEC', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS', 'OP_SUB_ASSIGN'}

    literal = . lit_set
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'KW_FOR', 'OPEN_SQUARE', 'OP_INC', 'OP_EQ', 'OP_MINUS', 'OP_ASSIGN', 'OP_AND_ASSIGN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_OR_ASSIGN', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_DEC', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS', 'OP_SUB_ASSIGN'}

    literal = . lit_string
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'KW_FOR', 'OPEN_SQUARE', 'OP_INC', 'OP_EQ', 'OP_MINUS', 'OP_ASSIGN', 'OP_AND_ASSIGN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_OR_ASSIGN', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_DEC', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS', 'OP_SUB_ASSIGN'}

    literal = . lit_list
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'KW_FOR', 'OPEN_SQUARE', 'OP_INC', 'OP_EQ', 'OP_MINUS', 'OP_ASSIGN', 'OP_AND_ASSIGN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_OR_ASSIGN', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_DEC', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS', 'OP_SUB_ASSIGN'}

    literal = . lit_map
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'KW_FOR', 'OPEN_SQUARE', 'OP_INC', 'OP_EQ', 'OP_MINUS', 'OP_ASSIGN', 'OP_AND_ASSIGN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_OR_ASSIGN', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_DEC', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS', 'OP_SUB_ASSIGN'}

    literal = . KW_NULL
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'KW_FOR', 'OPEN_SQUARE', 'OP_INC', 'OP_EQ', 'OP_MINUS', 'OP_ASSIGN', 'OP_AND_ASSIGN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_OR_ASSIGN', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_DEC', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS', 'OP_SUB_ASSIGN'}

    name = . NAME
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'KW_FOR', 'OPEN_SQUARE', 'OP_INC', 'OP_EQ', 'OP_MINUS', 'OP_ASSIGN', 'OP_AND_ASSIGN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_OR_ASSIGN', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_DEC', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS', 'OP_SUB_ASSIGN'}

    equ_expr = . equ_expr OP_EQ comp_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'COLON', 'SEMICOLON', 'KW_FOR', 'OP_EQ', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA'}

    equ_expr = . equ_expr OP_NEQ comp_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'COLON', 'SEMICOLON', 'KW_FOR', 'OP_EQ', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA'}

    equ_expr = . comp_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'COLON', 'SEMICOLON', 'KW_FOR', 'OP_EQ', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA'}

    lit_set = . OPEN_CURLY expr_list CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'KW_FOR', 'OPEN_SQUARE', 'OP_INC', 'OP_EQ', 'OP_MINUS', 'OP_ASSIGN', 'OP_AND_ASSIGN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_PLUS', 'OP_OR_ASSIGN', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_DEC', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ', 'OP_SUB_ASSIGN'}

    lit_string = . DOUBLE_QUOTE_STR
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'KW_FOR', 'OPEN_SQUARE', 'OP_INC', 'OP_EQ', 'OP_MINUS', 'OP_ASSIGN', 'OP_AND_ASSIGN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_PLUS', 'OP_OR_ASSIGN', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_DEC', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ', 'OP_SUB_ASSIGN'}

    lit_string = . SINGLE_QUOTE_STR
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'KW_FOR', 'OPEN_SQUARE', 'OP_INC', 'OP_EQ', 'OP_MINUS', 'OP_ASSIGN', 'OP_AND_ASSIGN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_PLUS', 'OP_OR_ASSIGN', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_DEC', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ', 'OP_SUB_ASSIGN'}

    lit_list = . OPEN_SQUARE expr_list CLOSE_SQUARE
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'KW_FOR', 'OPEN_SQUARE', 'OP_INC', 'OP_EQ', 'OP_MINUS', 'OP_ASSIGN', 'OP_AND_ASSIGN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_PLUS', 'OP_OR_ASSIGN', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_DEC', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ', 'OP_SUB_ASSIGN'}

    lit_map = . OPEN_CURLY map_list CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'KW_FOR', 'OPEN_SQUARE', 'OP_INC', 'OP_EQ', 'OP_MINUS', 'OP_ASSIGN', 'OP_AND_ASSIGN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_PLUS', 'OP_OR_ASSIGN', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_DEC', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ', 'OP_SUB_ASSIGN'}

    comp_expr = . comp_expr OP_LT math_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'COLON', 'SEMICOLON', 'KW_FOR', 'OP_EQ', 'OP_GT', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_LT'}

    comp_expr = . comp_expr OP_LTEQ math_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'COLON', 'SEMICOLON', 'KW_FOR', 'OP_EQ', 'OP_GT', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_LT'}

    comp_expr = . comp_expr OP_GT math_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'COLON', 'SEMICOLON', 'KW_FOR', 'OP_EQ', 'OP_GT', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_LT'}

    comp_expr = . comp_expr OP_GTEQ math_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'COLON', 'SEMICOLON', 'KW_FOR', 'OP_EQ', 'OP_GT', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_LT'}

    comp_expr = . math_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'COLON', 'SEMICOLON', 'KW_FOR', 'OP_EQ', 'OP_GT', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_LT'}

    math_expr = . math_expr OP_PLUS term
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'COLON', 'SEMICOLON', 'OP_NEQ', 'KW_FOR', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'COMMA', 'OP_LT'}

    math_expr = . math_expr OP_MINUS term
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'COLON', 'SEMICOLON', 'OP_NEQ', 'KW_FOR', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'COMMA', 'OP_LT'}

    math_expr = . term
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'COLON', 'SEMICOLON', 'OP_NEQ', 'KW_FOR', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'COMMA', 'OP_LT'}

    term = . term OP_STAR factor
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'COLON', 'SEMICOLON', 'OP_NEQ', 'KW_FOR', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'COMMA', 'OP_LT', 'OP_SLASH'}

    term = . term OP_SLASH factor
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'COLON', 'SEMICOLON', 'OP_NEQ', 'KW_FOR', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'COMMA', 'OP_LT', 'OP_SLASH'}

    term = . term OP_MOD factor
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'COLON', 'SEMICOLON', 'OP_NEQ', 'KW_FOR', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'COMMA', 'OP_LT', 'OP_SLASH'}

    term = . factor
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'COLON', 'SEMICOLON', 'OP_NEQ', 'KW_FOR', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'COMMA', 'OP_LT', 'OP_SLASH'}

    factor = . factor OP_POW pow_term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'KW_FOR', 'OP_EQ', 'OP_MINUS', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_PLUS', 'OP_GT', 'OP_STAR', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ'}

    factor = . pow_term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'KW_FOR', 'OP_EQ', 'OP_MINUS', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_PLUS', 'OP_GT', 'OP_STAR', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ'}

    pow_term = . OP_MINUS inc_term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'KW_FOR', 'OP_EQ', 'OP_MINUS', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_PLUS', 'OP_GT', 'OP_STAR', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ'}

    pow_term = . KW_NOT inc_term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'KW_FOR', 'OP_EQ', 'OP_MINUS', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_PLUS', 'OP_GT', 'OP_STAR', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ'}

    pow_term = . inc_term
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'KW_FOR', 'OP_EQ', 'OP_MINUS', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_PLUS', 'OP_GT', 'OP_STAR', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ'}

    inc_term = . OP_INC bottom_val
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'KW_FOR', 'OP_EQ', 'OP_MINUS', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_PLUS', 'OP_GT', 'OP_STAR', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ'}

    inc_term = . bottom_val OP_INC
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'KW_FOR', 'OP_EQ', 'OP_MINUS', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_PLUS', 'OP_GT', 'OP_STAR', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ'}

    inc_term = . OP_DEC bottom_val
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'KW_FOR', 'OP_EQ', 'OP_MINUS', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_PLUS', 'OP_GT', 'OP_STAR', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ'}

    inc_term = . bottom_val OP_DEC
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'KW_FOR', 'OP_EQ', 'OP_MINUS', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_PLUS', 'OP_GT', 'OP_STAR', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ'}

    inc_term = . bottom_val
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'KW_FOR', 'OP_EQ', 'OP_MINUS', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_PLUS', 'OP_GT', 'OP_STAR', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ'}


  Transitions:
    Symbol: statements -> Node#209
    Symbol: CLOSE_CURLY -> Node#210
    Symbol: linear_comprehension -> Node#135
    Symbol: expression -> Node#247
    Symbol: expr_list -> Node#137
    Symbol: map_list -> Node#138
    Symbol: statement -> Node#211
    Symbol: log_and_expr -> Node#51
    Symbol: map_expression -> Node#139
    Symbol: statement_body -> Node#212
    Symbol: body -> Node#213
    Symbol: if_statement -> Node#214
    Symbol: while_statement -> Node#215
    Symbol: do_while_statement -> Node#216
    Symbol: for_statement -> Node#217
    Symbol: try_catch_statement -> Node#218
    Symbol: bit_or_expr -> Node#52
    Symbol: assignment -> Node#219
    Symbol: return_statement -> Node#220
    Symbol: throw_statement -> Node#222
    Symbol: OPEN_CURLY -> Node#223
    Symbol: KW_IF -> Node#224
    Symbol: KW_WHILE -> Node#225
    Symbol: KW_DO -> Node#226
    Symbol: KW_FOR -> Node#227
    Symbol: KW_TRY -> Node#228
    Symbol: bit_xor_expr -> Node#53
    Symbol: bottom_val -> Node#229
    Symbol: type -> Node#230
    Symbol: KW_RETURN -> Node#231
    Symbol: KW_THROW -> Node#232
    Symbol: bit_and_expr -> Node#54
    Symbol: comprehension -> Node#67
    Symbol: literal -> Node#68
    Symbol: name -> Node#69
    Symbol: OPEN_PAREN -> Node#70
    Symbol: TYPE_ARRAY -> Node#22
    Symbol: TYPE_LIST -> Node#23
    Symbol: TYPE_MAP -> Node#24
    Symbol: TYPE_SET -> Node#25
    Symbol: TYPE_STR -> Node#26
    Symbol: TYPE_INT -> Node#27
    Symbol: TYPE_FLOAT -> Node#28
    Symbol: TYPE_BOOL -> Node#29
    Symbol: KW_NULL -> Node#233
    Symbol: NAME -> Node#234
    Symbol: equ_expr -> Node#55
    Symbol: OPEN_SQUARE -> Node#71
    Symbol: LIT_INT -> Node#73
    Symbol: LIT_FLOAT -> Node#74
    Symbol: lit_set -> Node#75
    Symbol: lit_string -> Node#76
    Symbol: lit_list -> Node#77
    Symbol: lit_map -> Node#78
    Symbol: comp_expr -> Node#56
    Symbol: DOUBLE_QUOTE_STR -> Node#81
    Symbol: SINGLE_QUOTE_STR -> Node#82
    Symbol: math_expr -> Node#57
    Symbol: term -> Node#58
    Symbol: factor -> Node#59
    Symbol: pow_term -> Node#60
    Symbol: OP_MINUS -> Node#61
    Symbol: KW_NOT -> Node#62
    Symbol: inc_term -> Node#63
    Symbol: OP_INC -> Node#64
    Symbol: OP_DEC -> Node#66

Node#224
  Rules:
    if_statement = KW_IF . expression body else_statement
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    expression = . expression KW_OR log_and_expr
    LA: {'KW_OR', 'OPEN_CURLY'}

    expression = . log_and_expr
    LA: {'KW_OR', 'OPEN_CURLY'}

    log_and_expr = . log_and_expr KW_AND bit_or_expr
    LA: {'KW_AND', 'KW_OR', 'OPEN_CURLY'}

    log_and_expr = . bit_or_expr
    LA: {'KW_AND', 'KW_OR', 'OPEN_CURLY'}

    bit_or_expr = . bit_or_expr OP_BIT_OR bit_xor_expr
    LA: {'KW_AND', 'OP_BIT_OR', 'KW_OR', 'OPEN_CURLY'}

    bit_or_expr = . bit_xor_expr
    LA: {'KW_AND', 'OP_BIT_OR', 'KW_OR', 'OPEN_CURLY'}

    bit_xor_expr = . bit_xor_expr OP_BIT_XOR bit_and_expr
    LA: {'OP_BIT_OR', 'KW_OR', 'OPEN_CURLY', 'KW_AND', 'OP_BIT_XOR'}

    bit_xor_expr = . bit_and_expr
    LA: {'OP_BIT_OR', 'KW_OR', 'OPEN_CURLY', 'KW_AND', 'OP_BIT_XOR'}

    bit_and_expr = . bit_and_expr OP_BIT_AND equ_expr
    LA: {'OP_BIT_OR', 'KW_OR', 'OPEN_CURLY', 'OP_BIT_AND', 'KW_AND', 'OP_BIT_XOR'}

    bit_and_expr = . equ_expr
    LA: {'OP_BIT_OR', 'KW_OR', 'OPEN_CURLY', 'OP_BIT_AND', 'KW_AND', 'OP_BIT_XOR'}

    equ_expr = . equ_expr OP_EQ comp_expr
    LA: {'OP_BIT_OR', 'KW_OR', 'OPEN_CURLY', 'OP_EQ', 'OP_BIT_AND', 'OP_NEQ', 'KW_AND', 'OP_BIT_XOR'}

    equ_expr = . equ_expr OP_NEQ comp_expr
    LA: {'OP_BIT_OR', 'KW_OR', 'OPEN_CURLY', 'OP_EQ', 'OP_BIT_AND', 'OP_NEQ', 'KW_AND', 'OP_BIT_XOR'}

    equ_expr = . comp_expr
    LA: {'OP_BIT_OR', 'KW_OR', 'OPEN_CURLY', 'OP_EQ', 'OP_BIT_AND', 'OP_NEQ', 'KW_AND', 'OP_BIT_XOR'}

    comp_expr = . comp_expr OP_LT math_expr
    LA: {'OP_BIT_AND', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_BIT_OR', 'KW_OR', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    comp_expr = . comp_expr OP_LTEQ math_expr
    LA: {'OP_BIT_AND', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_BIT_OR', 'KW_OR', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    comp_expr = . comp_expr OP_GT math_expr
    LA: {'OP_BIT_AND', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_BIT_OR', 'KW_OR', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    comp_expr = . comp_expr OP_GTEQ math_expr
    LA: {'OP_BIT_AND', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_BIT_OR', 'KW_OR', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    comp_expr = . math_expr
    LA: {'OP_BIT_AND', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_BIT_OR', 'KW_OR', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    math_expr = . math_expr OP_PLUS term
    LA: {'OP_BIT_AND', 'OP_PLUS', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_MINUS', 'OP_BIT_OR', 'KW_OR', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    math_expr = . math_expr OP_MINUS term
    LA: {'OP_BIT_AND', 'OP_PLUS', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_MINUS', 'OP_BIT_OR', 'KW_OR', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    math_expr = . term
    LA: {'OP_BIT_AND', 'OP_PLUS', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_MINUS', 'OP_BIT_OR', 'KW_OR', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    term = . term OP_STAR factor
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_BIT_OR', 'KW_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    term = . term OP_SLASH factor
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_BIT_OR', 'KW_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    term = . term OP_MOD factor
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_BIT_OR', 'KW_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    term = . factor
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_BIT_OR', 'KW_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    factor = . factor OP_POW pow_term
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    factor = . pow_term
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    pow_term = . OP_MINUS inc_term
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    pow_term = . KW_NOT inc_term
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    pow_term = . inc_term
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . OP_INC bottom_val
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . bottom_val OP_INC
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . OP_DEC bottom_val
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . bottom_val OP_DEC
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . bottom_val
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    bottom_val = . bottom_val OPEN_PAREN expr_list CLOSE_PAREN
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . bottom_val OPEN_PAREN CLOSE_PAREN
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . bottom_val OP_DOT name
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . bottom_val OPEN_SQUARE expression CLOSE_SQUARE
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . comprehension
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . literal
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . name
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . OPEN_PAREN expression CLOSE_PAREN
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    comprehension = . OPEN_SQUARE linear_comprehension CLOSE_SQUARE
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    comprehension = . OPEN_CURLY linear_comprehension CLOSE_CURLY
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression CLOSE_CURLY
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression KW_IF expression CLOSE_CURLY
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . LIT_INT
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . LIT_FLOAT
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . lit_set
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . lit_string
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . lit_list
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . lit_map
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . KW_NULL
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    name = . NAME
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    lit_set = . OPEN_CURLY expr_list CLOSE_CURLY
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    lit_string = . DOUBLE_QUOTE_STR
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    lit_string = . SINGLE_QUOTE_STR
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    lit_list = . OPEN_SQUARE expr_list CLOSE_SQUARE
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    lit_map = . OPEN_CURLY map_list CLOSE_CURLY
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}


  Transitions:
    Symbol: expression -> Node#248
    Symbol: log_and_expr -> Node#51
    Symbol: bit_or_expr -> Node#52
    Symbol: bit_xor_expr -> Node#53
    Symbol: bit_and_expr -> Node#54
    Symbol: equ_expr -> Node#55
    Symbol: comp_expr -> Node#56
    Symbol: math_expr -> Node#57
    Symbol: term -> Node#58
    Symbol: factor -> Node#59
    Symbol: pow_term -> Node#60
    Symbol: OP_MINUS -> Node#61
    Symbol: KW_NOT -> Node#62
    Symbol: inc_term -> Node#63
    Symbol: OP_INC -> Node#64
    Symbol: bottom_val -> Node#65
    Symbol: OP_DEC -> Node#66
    Symbol: comprehension -> Node#67
    Symbol: literal -> Node#68
    Symbol: name -> Node#69
    Symbol: OPEN_PAREN -> Node#70
    Symbol: OPEN_SQUARE -> Node#71
    Symbol: OPEN_CURLY -> Node#72
    Symbol: LIT_INT -> Node#73
    Symbol: LIT_FLOAT -> Node#74
    Symbol: lit_set -> Node#75
    Symbol: lit_string -> Node#76
    Symbol: lit_list -> Node#77
    Symbol: lit_map -> Node#78
    Symbol: KW_NULL -> Node#79
    Symbol: NAME -> Node#80
    Symbol: DOUBLE_QUOTE_STR -> Node#81
    Symbol: SINGLE_QUOTE_STR -> Node#82

Node#225
  Rules:
    while_statement = KW_WHILE . expression body
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    expression = . expression KW_OR log_and_expr
    LA: {'KW_OR', 'OPEN_CURLY'}

    expression = . log_and_expr
    LA: {'KW_OR', 'OPEN_CURLY'}

    log_and_expr = . log_and_expr KW_AND bit_or_expr
    LA: {'KW_AND', 'KW_OR', 'OPEN_CURLY'}

    log_and_expr = . bit_or_expr
    LA: {'KW_AND', 'KW_OR', 'OPEN_CURLY'}

    bit_or_expr = . bit_or_expr OP_BIT_OR bit_xor_expr
    LA: {'KW_AND', 'OP_BIT_OR', 'KW_OR', 'OPEN_CURLY'}

    bit_or_expr = . bit_xor_expr
    LA: {'KW_AND', 'OP_BIT_OR', 'KW_OR', 'OPEN_CURLY'}

    bit_xor_expr = . bit_xor_expr OP_BIT_XOR bit_and_expr
    LA: {'OP_BIT_OR', 'KW_OR', 'OPEN_CURLY', 'KW_AND', 'OP_BIT_XOR'}

    bit_xor_expr = . bit_and_expr
    LA: {'OP_BIT_OR', 'KW_OR', 'OPEN_CURLY', 'KW_AND', 'OP_BIT_XOR'}

    bit_and_expr = . bit_and_expr OP_BIT_AND equ_expr
    LA: {'OP_BIT_OR', 'KW_OR', 'OPEN_CURLY', 'OP_BIT_AND', 'KW_AND', 'OP_BIT_XOR'}

    bit_and_expr = . equ_expr
    LA: {'OP_BIT_OR', 'KW_OR', 'OPEN_CURLY', 'OP_BIT_AND', 'KW_AND', 'OP_BIT_XOR'}

    equ_expr = . equ_expr OP_EQ comp_expr
    LA: {'OP_BIT_OR', 'KW_OR', 'OPEN_CURLY', 'OP_EQ', 'OP_BIT_AND', 'OP_NEQ', 'KW_AND', 'OP_BIT_XOR'}

    equ_expr = . equ_expr OP_NEQ comp_expr
    LA: {'OP_BIT_OR', 'KW_OR', 'OPEN_CURLY', 'OP_EQ', 'OP_BIT_AND', 'OP_NEQ', 'KW_AND', 'OP_BIT_XOR'}

    equ_expr = . comp_expr
    LA: {'OP_BIT_OR', 'KW_OR', 'OPEN_CURLY', 'OP_EQ', 'OP_BIT_AND', 'OP_NEQ', 'KW_AND', 'OP_BIT_XOR'}

    comp_expr = . comp_expr OP_LT math_expr
    LA: {'OP_BIT_AND', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_BIT_OR', 'KW_OR', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    comp_expr = . comp_expr OP_LTEQ math_expr
    LA: {'OP_BIT_AND', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_BIT_OR', 'KW_OR', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    comp_expr = . comp_expr OP_GT math_expr
    LA: {'OP_BIT_AND', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_BIT_OR', 'KW_OR', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    comp_expr = . comp_expr OP_GTEQ math_expr
    LA: {'OP_BIT_AND', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_BIT_OR', 'KW_OR', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    comp_expr = . math_expr
    LA: {'OP_BIT_AND', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_BIT_OR', 'KW_OR', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    math_expr = . math_expr OP_PLUS term
    LA: {'OP_BIT_AND', 'OP_PLUS', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_MINUS', 'OP_BIT_OR', 'KW_OR', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    math_expr = . math_expr OP_MINUS term
    LA: {'OP_BIT_AND', 'OP_PLUS', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_MINUS', 'OP_BIT_OR', 'KW_OR', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    math_expr = . term
    LA: {'OP_BIT_AND', 'OP_PLUS', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_MINUS', 'OP_BIT_OR', 'KW_OR', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    term = . term OP_STAR factor
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_BIT_OR', 'KW_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    term = . term OP_SLASH factor
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_BIT_OR', 'KW_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    term = . term OP_MOD factor
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_BIT_OR', 'KW_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    term = . factor
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_BIT_OR', 'KW_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    factor = . factor OP_POW pow_term
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    factor = . pow_term
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    pow_term = . OP_MINUS inc_term
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    pow_term = . KW_NOT inc_term
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    pow_term = . inc_term
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . OP_INC bottom_val
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . bottom_val OP_INC
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . OP_DEC bottom_val
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . bottom_val OP_DEC
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . bottom_val
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    bottom_val = . bottom_val OPEN_PAREN expr_list CLOSE_PAREN
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . bottom_val OPEN_PAREN CLOSE_PAREN
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . bottom_val OP_DOT name
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . bottom_val OPEN_SQUARE expression CLOSE_SQUARE
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . comprehension
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . literal
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . name
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . OPEN_PAREN expression CLOSE_PAREN
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    comprehension = . OPEN_SQUARE linear_comprehension CLOSE_SQUARE
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    comprehension = . OPEN_CURLY linear_comprehension CLOSE_CURLY
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression CLOSE_CURLY
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression KW_IF expression CLOSE_CURLY
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . LIT_INT
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . LIT_FLOAT
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . lit_set
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . lit_string
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . lit_list
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . lit_map
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . KW_NULL
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    name = . NAME
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    lit_set = . OPEN_CURLY expr_list CLOSE_CURLY
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    lit_string = . DOUBLE_QUOTE_STR
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    lit_string = . SINGLE_QUOTE_STR
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    lit_list = . OPEN_SQUARE expr_list CLOSE_SQUARE
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    lit_map = . OPEN_CURLY map_list CLOSE_CURLY
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}


  Transitions:
    Symbol: expression -> Node#249
    Symbol: log_and_expr -> Node#51
    Symbol: bit_or_expr -> Node#52
    Symbol: bit_xor_expr -> Node#53
    Symbol: bit_and_expr -> Node#54
    Symbol: equ_expr -> Node#55
    Symbol: comp_expr -> Node#56
    Symbol: math_expr -> Node#57
    Symbol: term -> Node#58
    Symbol: factor -> Node#59
    Symbol: pow_term -> Node#60
    Symbol: OP_MINUS -> Node#61
    Symbol: KW_NOT -> Node#62
    Symbol: inc_term -> Node#63
    Symbol: OP_INC -> Node#64
    Symbol: bottom_val -> Node#65
    Symbol: OP_DEC -> Node#66
    Symbol: comprehension -> Node#67
    Symbol: literal -> Node#68
    Symbol: name -> Node#69
    Symbol: OPEN_PAREN -> Node#70
    Symbol: OPEN_SQUARE -> Node#71
    Symbol: OPEN_CURLY -> Node#72
    Symbol: LIT_INT -> Node#73
    Symbol: LIT_FLOAT -> Node#74
    Symbol: lit_set -> Node#75
    Symbol: lit_string -> Node#76
    Symbol: lit_list -> Node#77
    Symbol: lit_map -> Node#78
    Symbol: KW_NULL -> Node#79
    Symbol: NAME -> Node#80
    Symbol: DOUBLE_QUOTE_STR -> Node#81
    Symbol: SINGLE_QUOTE_STR -> Node#82

Node#226
  Rules:
    do_while_statement = KW_DO . body KW_WHILE expression SEMICOLON
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    body = . OPEN_CURLY statements CLOSE_CURLY
    LA: {'KW_WHILE'}

    body = . OPEN_CURLY CLOSE_CURLY
    LA: {'KW_WHILE'}


  Transitions:
    Symbol: body -> Node#250
    Symbol: OPEN_CURLY -> Node#192

Node#227
  Rules:
    for_statement = KW_FOR . name KW_IN expression body
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    for_statement = KW_FOR . name KW_IN expression KW_TO expression body
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    name = . NAME
    LA: {'KW_IN'}


  Transitions:
    Symbol: name -> Node#251
    Symbol: NAME -> Node#80

Node#228
  Rules:
    try_catch_statement = KW_TRY . body catch_statements
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    body = . OPEN_CURLY statements CLOSE_CURLY
    LA: {'KW_CATCH'}

    body = . OPEN_CURLY CLOSE_CURLY
    LA: {'KW_CATCH'}


  Transitions:
    Symbol: body -> Node#252
    Symbol: OPEN_CURLY -> Node#192

Node#229
  Rules:
    assignment = bottom_val . assign_op assign_expr
    LA: {'SEMICOLON'}

    bottom_val = bottom_val . OPEN_PAREN expr_list CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'KW_FOR', 'OPEN_SQUARE', 'OP_INC', 'OP_EQ', 'OP_MINUS', 'OP_ASSIGN', 'OP_AND_ASSIGN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_PLUS', 'OP_OR_ASSIGN', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ', 'OP_SUB_ASSIGN'}

    bottom_val = bottom_val . OPEN_PAREN CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'KW_FOR', 'OPEN_SQUARE', 'OP_INC', 'OP_EQ', 'OP_MINUS', 'OP_ASSIGN', 'OP_AND_ASSIGN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_PLUS', 'OP_OR_ASSIGN', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ', 'OP_SUB_ASSIGN'}

    bottom_val = bottom_val . OP_DOT name
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'KW_FOR', 'OPEN_SQUARE', 'OP_INC', 'OP_EQ', 'OP_MINUS', 'OP_ASSIGN', 'OP_AND_ASSIGN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_PLUS', 'OP_OR_ASSIGN', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ', 'OP_SUB_ASSIGN'}

    bottom_val = bottom_val . OPEN_SQUARE expression CLOSE_SQUARE
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'KW_FOR', 'OPEN_SQUARE', 'OP_INC', 'OP_EQ', 'OP_MINUS', 'OP_ASSIGN', 'OP_AND_ASSIGN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_PLUS', 'OP_OR_ASSIGN', 'OP_DOT', 'OP_GT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ', 'OP_SUB_ASSIGN'}

    inc_term = bottom_val . OP_INC
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'KW_FOR', 'OP_EQ', 'OP_MINUS', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_PLUS', 'OP_GT', 'OP_STAR', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ'}

    inc_term = bottom_val . OP_DEC
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'KW_FOR', 'OP_EQ', 'OP_MINUS', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_PLUS', 'OP_GT', 'OP_STAR', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ'}

    inc_term = bottom_val .
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'KW_FOR', 'OP_EQ', 'OP_MINUS', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_PLUS', 'OP_GT', 'OP_STAR', 'OP_GTEQ', 'OP_LTEQ', 'OP_NEQ'}

    assign_op = . OP_ASSIGN
    LA: {'DOUBLE_QUOTE_STR', 'NAME', 'LIT_FLOAT', 'OP_INC', 'SINGLE_QUOTE_STR', 'KW_NOT', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_NULL', 'OP_MINUS', 'LIT_INT', 'OP_DEC', 'OPEN_PAREN'}

    assign_op = . OP_ADD_ASSIGN
    LA: {'DOUBLE_QUOTE_STR', 'NAME', 'LIT_FLOAT', 'OP_INC', 'SINGLE_QUOTE_STR', 'KW_NOT', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_NULL', 'OP_MINUS', 'LIT_INT', 'OP_DEC', 'OPEN_PAREN'}

    assign_op = . OP_SUB_ASSIGN
    LA: {'DOUBLE_QUOTE_STR', 'NAME', 'LIT_FLOAT', 'OP_INC', 'SINGLE_QUOTE_STR', 'KW_NOT', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_NULL', 'OP_MINUS', 'LIT_INT', 'OP_DEC', 'OPEN_PAREN'}

    assign_op = . OP_MUL_ASSIGN
    LA: {'DOUBLE_QUOTE_STR', 'NAME', 'LIT_FLOAT', 'OP_INC', 'SINGLE_QUOTE_STR', 'KW_NOT', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_NULL', 'OP_MINUS', 'LIT_INT', 'OP_DEC', 'OPEN_PAREN'}

    assign_op = . OP_DIV_ASSIGN
    LA: {'DOUBLE_QUOTE_STR', 'NAME', 'LIT_FLOAT', 'OP_INC', 'SINGLE_QUOTE_STR', 'KW_NOT', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_NULL', 'OP_MINUS', 'LIT_INT', 'OP_DEC', 'OPEN_PAREN'}

    assign_op = . OP_MOD_ASSIGN
    LA: {'DOUBLE_QUOTE_STR', 'NAME', 'LIT_FLOAT', 'OP_INC', 'SINGLE_QUOTE_STR', 'KW_NOT', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_NULL', 'OP_MINUS', 'LIT_INT', 'OP_DEC', 'OPEN_PAREN'}

    assign_op = . OP_AND_ASSIGN
    LA: {'DOUBLE_QUOTE_STR', 'NAME', 'LIT_FLOAT', 'OP_INC', 'SINGLE_QUOTE_STR', 'KW_NOT', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_NULL', 'OP_MINUS', 'LIT_INT', 'OP_DEC', 'OPEN_PAREN'}

    assign_op = . OP_OR_ASSIGN
    LA: {'DOUBLE_QUOTE_STR', 'NAME', 'LIT_FLOAT', 'OP_INC', 'SINGLE_QUOTE_STR', 'KW_NOT', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_NULL', 'OP_MINUS', 'LIT_INT', 'OP_DEC', 'OPEN_PAREN'}

    assign_op = . OP_XOR_ASSIGN
    LA: {'DOUBLE_QUOTE_STR', 'NAME', 'LIT_FLOAT', 'OP_INC', 'SINGLE_QUOTE_STR', 'KW_NOT', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_NULL', 'OP_MINUS', 'LIT_INT', 'OP_DEC', 'OPEN_PAREN'}


  Transitions:
    Symbol: assign_op -> Node#253
    Symbol: OPEN_PAREN -> Node#127
    Symbol: OP_DOT -> Node#128
    Symbol: OPEN_SQUARE -> Node#129
    Symbol: OP_INC -> Node#125
    Symbol: OP_DEC -> Node#126
    Symbol: OP_ASSIGN -> Node#254
    Symbol: OP_ADD_ASSIGN -> Node#255
    Symbol: OP_SUB_ASSIGN -> Node#256
    Symbol: OP_MUL_ASSIGN -> Node#257
    Symbol: OP_DIV_ASSIGN -> Node#258
    Symbol: OP_MOD_ASSIGN -> Node#259
    Symbol: OP_AND_ASSIGN -> Node#260
    Symbol: OP_OR_ASSIGN -> Node#261
    Symbol: OP_XOR_ASSIGN -> Node#262

Node#230
  Rules:
    assignment = type . name assign_op assign_expr
    LA: {'SEMICOLON'}

    name = . NAME
    LA: {'OP_AND_ASSIGN', 'OP_MUL_ASSIGN', 'OP_ADD_ASSIGN', 'OP_DIV_ASSIGN', 'OP_XOR_ASSIGN', 'OP_OR_ASSIGN', 'OP_MOD_ASSIGN', 'OP_SUB_ASSIGN', 'OP_ASSIGN'}


  Transitions:
    Symbol: name -> Node#263
    Symbol: NAME -> Node#80

Node#231
  Rules:
    return_statement = KW_RETURN . expression
    LA: {'SEMICOLON'}

    expression = . expression KW_OR log_and_expr
    LA: {'KW_OR', 'SEMICOLON'}

    expression = . log_and_expr
    LA: {'KW_OR', 'SEMICOLON'}

    log_and_expr = . log_and_expr KW_AND bit_or_expr
    LA: {'KW_OR', 'SEMICOLON', 'KW_AND'}

    log_and_expr = . bit_or_expr
    LA: {'KW_OR', 'SEMICOLON', 'KW_AND'}

    bit_or_expr = . bit_or_expr OP_BIT_OR bit_xor_expr
    LA: {'KW_OR', 'SEMICOLON', 'OP_BIT_OR', 'KW_AND'}

    bit_or_expr = . bit_xor_expr
    LA: {'KW_OR', 'SEMICOLON', 'OP_BIT_OR', 'KW_AND'}

    bit_xor_expr = . bit_xor_expr OP_BIT_XOR bit_and_expr
    LA: {'KW_OR', 'OP_BIT_OR', 'KW_AND', 'SEMICOLON', 'OP_BIT_XOR'}

    bit_xor_expr = . bit_and_expr
    LA: {'KW_OR', 'OP_BIT_OR', 'KW_AND', 'SEMICOLON', 'OP_BIT_XOR'}

    bit_and_expr = . bit_and_expr OP_BIT_AND equ_expr
    LA: {'KW_OR', 'OP_BIT_OR', 'OP_BIT_AND', 'KW_AND', 'SEMICOLON', 'OP_BIT_XOR'}

    bit_and_expr = . equ_expr
    LA: {'KW_OR', 'OP_BIT_OR', 'OP_BIT_AND', 'KW_AND', 'SEMICOLON', 'OP_BIT_XOR'}

    equ_expr = . equ_expr OP_EQ comp_expr
    LA: {'OP_NEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_BIT_AND', 'KW_AND', 'SEMICOLON', 'OP_BIT_XOR'}

    equ_expr = . equ_expr OP_NEQ comp_expr
    LA: {'OP_NEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_BIT_AND', 'KW_AND', 'SEMICOLON', 'OP_BIT_XOR'}

    equ_expr = . comp_expr
    LA: {'OP_NEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_BIT_AND', 'KW_AND', 'SEMICOLON', 'OP_BIT_XOR'}

    comp_expr = . comp_expr OP_LT math_expr
    LA: {'OP_BIT_AND', 'KW_AND', 'SEMICOLON', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    comp_expr = . comp_expr OP_LTEQ math_expr
    LA: {'OP_BIT_AND', 'KW_AND', 'SEMICOLON', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    comp_expr = . comp_expr OP_GT math_expr
    LA: {'OP_BIT_AND', 'KW_AND', 'SEMICOLON', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    comp_expr = . comp_expr OP_GTEQ math_expr
    LA: {'OP_BIT_AND', 'KW_AND', 'SEMICOLON', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    comp_expr = . math_expr
    LA: {'OP_BIT_AND', 'KW_AND', 'SEMICOLON', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    math_expr = . math_expr OP_PLUS term
    LA: {'OP_BIT_AND', 'OP_PLUS', 'KW_AND', 'SEMICOLON', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'OP_MINUS', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    math_expr = . math_expr OP_MINUS term
    LA: {'OP_BIT_AND', 'OP_PLUS', 'KW_AND', 'SEMICOLON', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'OP_MINUS', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    math_expr = . term
    LA: {'OP_BIT_AND', 'OP_PLUS', 'KW_AND', 'SEMICOLON', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'OP_MINUS', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    term = . term OP_STAR factor
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    term = . term OP_SLASH factor
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    term = . term OP_MOD factor
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    term = . factor
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    factor = . factor OP_POW pow_term
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    factor = . pow_term
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    pow_term = . OP_MINUS inc_term
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    pow_term = . KW_NOT inc_term
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    pow_term = . inc_term
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . OP_INC bottom_val
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . bottom_val OP_INC
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . OP_DEC bottom_val
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . bottom_val OP_DEC
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . bottom_val
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    bottom_val = . bottom_val OPEN_PAREN expr_list CLOSE_PAREN
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . bottom_val OPEN_PAREN CLOSE_PAREN
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . bottom_val OP_DOT name
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . bottom_val OPEN_SQUARE expression CLOSE_SQUARE
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . comprehension
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . literal
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . name
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . OPEN_PAREN expression CLOSE_PAREN
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    comprehension = . OPEN_SQUARE linear_comprehension CLOSE_SQUARE
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    comprehension = . OPEN_CURLY linear_comprehension CLOSE_CURLY
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression CLOSE_CURLY
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression KW_IF expression CLOSE_CURLY
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . LIT_INT
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . LIT_FLOAT
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . lit_set
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . lit_string
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . lit_list
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . lit_map
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . KW_NULL
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    name = . NAME
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    lit_set = . OPEN_CURLY expr_list CLOSE_CURLY
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    lit_string = . DOUBLE_QUOTE_STR
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    lit_string = . SINGLE_QUOTE_STR
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    lit_list = . OPEN_SQUARE expr_list CLOSE_SQUARE
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    lit_map = . OPEN_CURLY map_list CLOSE_CURLY
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}


  Transitions:
    Symbol: expression -> Node#264
    Symbol: log_and_expr -> Node#51
    Symbol: bit_or_expr -> Node#52
    Symbol: bit_xor_expr -> Node#53
    Symbol: bit_and_expr -> Node#54
    Symbol: equ_expr -> Node#55
    Symbol: comp_expr -> Node#56
    Symbol: math_expr -> Node#57
    Symbol: term -> Node#58
    Symbol: factor -> Node#59
    Symbol: pow_term -> Node#60
    Symbol: OP_MINUS -> Node#61
    Symbol: KW_NOT -> Node#62
    Symbol: inc_term -> Node#63
    Symbol: OP_INC -> Node#64
    Symbol: bottom_val -> Node#65
    Symbol: OP_DEC -> Node#66
    Symbol: comprehension -> Node#67
    Symbol: literal -> Node#68
    Symbol: name -> Node#69
    Symbol: OPEN_PAREN -> Node#70
    Symbol: OPEN_SQUARE -> Node#71
    Symbol: OPEN_CURLY -> Node#72
    Symbol: LIT_INT -> Node#73
    Symbol: LIT_FLOAT -> Node#74
    Symbol: lit_set -> Node#75
    Symbol: lit_string -> Node#76
    Symbol: lit_list -> Node#77
    Symbol: lit_map -> Node#78
    Symbol: KW_NULL -> Node#79
    Symbol: NAME -> Node#80
    Symbol: DOUBLE_QUOTE_STR -> Node#81
    Symbol: SINGLE_QUOTE_STR -> Node#82

Node#232
  Rules:
    throw_statement = KW_THROW . expression
    LA: {'SEMICOLON'}

    expression = . expression KW_OR log_and_expr
    LA: {'KW_OR', 'SEMICOLON'}

    expression = . log_and_expr
    LA: {'KW_OR', 'SEMICOLON'}

    log_and_expr = . log_and_expr KW_AND bit_or_expr
    LA: {'KW_OR', 'SEMICOLON', 'KW_AND'}

    log_and_expr = . bit_or_expr
    LA: {'KW_OR', 'SEMICOLON', 'KW_AND'}

    bit_or_expr = . bit_or_expr OP_BIT_OR bit_xor_expr
    LA: {'KW_OR', 'SEMICOLON', 'OP_BIT_OR', 'KW_AND'}

    bit_or_expr = . bit_xor_expr
    LA: {'KW_OR', 'SEMICOLON', 'OP_BIT_OR', 'KW_AND'}

    bit_xor_expr = . bit_xor_expr OP_BIT_XOR bit_and_expr
    LA: {'KW_OR', 'OP_BIT_OR', 'KW_AND', 'SEMICOLON', 'OP_BIT_XOR'}

    bit_xor_expr = . bit_and_expr
    LA: {'KW_OR', 'OP_BIT_OR', 'KW_AND', 'SEMICOLON', 'OP_BIT_XOR'}

    bit_and_expr = . bit_and_expr OP_BIT_AND equ_expr
    LA: {'KW_OR', 'OP_BIT_OR', 'OP_BIT_AND', 'KW_AND', 'SEMICOLON', 'OP_BIT_XOR'}

    bit_and_expr = . equ_expr
    LA: {'KW_OR', 'OP_BIT_OR', 'OP_BIT_AND', 'KW_AND', 'SEMICOLON', 'OP_BIT_XOR'}

    equ_expr = . equ_expr OP_EQ comp_expr
    LA: {'OP_NEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_BIT_AND', 'KW_AND', 'SEMICOLON', 'OP_BIT_XOR'}

    equ_expr = . equ_expr OP_NEQ comp_expr
    LA: {'OP_NEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_BIT_AND', 'KW_AND', 'SEMICOLON', 'OP_BIT_XOR'}

    equ_expr = . comp_expr
    LA: {'OP_NEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_BIT_AND', 'KW_AND', 'SEMICOLON', 'OP_BIT_XOR'}

    comp_expr = . comp_expr OP_LT math_expr
    LA: {'OP_BIT_AND', 'KW_AND', 'SEMICOLON', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    comp_expr = . comp_expr OP_LTEQ math_expr
    LA: {'OP_BIT_AND', 'KW_AND', 'SEMICOLON', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    comp_expr = . comp_expr OP_GT math_expr
    LA: {'OP_BIT_AND', 'KW_AND', 'SEMICOLON', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    comp_expr = . comp_expr OP_GTEQ math_expr
    LA: {'OP_BIT_AND', 'KW_AND', 'SEMICOLON', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    comp_expr = . math_expr
    LA: {'OP_BIT_AND', 'KW_AND', 'SEMICOLON', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    math_expr = . math_expr OP_PLUS term
    LA: {'OP_BIT_AND', 'OP_PLUS', 'KW_AND', 'SEMICOLON', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'OP_MINUS', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    math_expr = . math_expr OP_MINUS term
    LA: {'OP_BIT_AND', 'OP_PLUS', 'KW_AND', 'SEMICOLON', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'OP_MINUS', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    math_expr = . term
    LA: {'OP_BIT_AND', 'OP_PLUS', 'KW_AND', 'SEMICOLON', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'OP_MINUS', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    term = . term OP_STAR factor
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    term = . term OP_SLASH factor
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    term = . term OP_MOD factor
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    term = . factor
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    factor = . factor OP_POW pow_term
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    factor = . pow_term
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    pow_term = . OP_MINUS inc_term
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    pow_term = . KW_NOT inc_term
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    pow_term = . inc_term
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . OP_INC bottom_val
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . bottom_val OP_INC
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . OP_DEC bottom_val
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . bottom_val OP_DEC
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . bottom_val
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    bottom_val = . bottom_val OPEN_PAREN expr_list CLOSE_PAREN
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . bottom_val OPEN_PAREN CLOSE_PAREN
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . bottom_val OP_DOT name
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . bottom_val OPEN_SQUARE expression CLOSE_SQUARE
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . comprehension
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . literal
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . name
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . OPEN_PAREN expression CLOSE_PAREN
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    comprehension = . OPEN_SQUARE linear_comprehension CLOSE_SQUARE
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    comprehension = . OPEN_CURLY linear_comprehension CLOSE_CURLY
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression CLOSE_CURLY
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression KW_IF expression CLOSE_CURLY
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . LIT_INT
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . LIT_FLOAT
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . lit_set
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . lit_string
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . lit_list
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . lit_map
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . KW_NULL
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    name = . NAME
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    lit_set = . OPEN_CURLY expr_list CLOSE_CURLY
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    lit_string = . DOUBLE_QUOTE_STR
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    lit_string = . SINGLE_QUOTE_STR
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    lit_list = . OPEN_SQUARE expr_list CLOSE_SQUARE
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    lit_map = . OPEN_CURLY map_list CLOSE_CURLY
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}


  Transitions:
    Symbol: expression -> Node#265
    Symbol: log_and_expr -> Node#51
    Symbol: bit_or_expr -> Node#52
    Symbol: bit_xor_expr -> Node#53
    Symbol: bit_and_expr -> Node#54
    Symbol: equ_expr -> Node#55
    Symbol: comp_expr -> Node#56
    Symbol: math_expr -> Node#57
    Symbol: term -> Node#58
    Symbol: factor -> Node#59
    Symbol: pow_term -> Node#60
    Symbol: OP_MINUS -> Node#61
    Symbol: KW_NOT -> Node#62
    Symbol: inc_term -> Node#63
    Symbol: OP_INC -> Node#64
    Symbol: bottom_val -> Node#65
    Symbol: OP_DEC -> Node#66
    Symbol: comprehension -> Node#67
    Symbol: literal -> Node#68
    Symbol: name -> Node#69
    Symbol: OPEN_PAREN -> Node#70
    Symbol: OPEN_SQUARE -> Node#71
    Symbol: OPEN_CURLY -> Node#72
    Symbol: LIT_INT -> Node#73
    Symbol: LIT_FLOAT -> Node#74
    Symbol: lit_set -> Node#75
    Symbol: lit_string -> Node#76
    Symbol: lit_list -> Node#77
    Symbol: lit_map -> Node#78
    Symbol: KW_NULL -> Node#79
    Symbol: NAME -> Node#80
    Symbol: DOUBLE_QUOTE_STR -> Node#81
    Symbol: SINGLE_QUOTE_STR -> Node#82

Node#233
  Rules:
    type = KW_NULL .
    LA: {'NAME'}

    literal = KW_NULL .
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'KW_FOR', 'OPEN_SQUARE', 'OP_INC', 'OP_EQ', 'OP_MINUS', 'OP_ASSIGN', 'OP_AND_ASSIGN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_OR_ASSIGN', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_DEC', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS', 'OP_SUB_ASSIGN'}


Node#234
  Rules:
    type = NAME .
    LA: {'NAME'}

    name = NAME .
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'KW_FOR', 'OPEN_SQUARE', 'OP_INC', 'OP_EQ', 'OP_MINUS', 'OP_ASSIGN', 'OP_AND_ASSIGN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_OR_ASSIGN', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_DEC', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS', 'OP_SUB_ASSIGN'}


Node#235
  Rules:
    func_arg_def = type NAME OP_ASSIGN expression .
    LA: {'CLOSE_PAREN', 'COMMA'}

    expression = expression . KW_OR log_and_expr
    LA: {'CLOSE_PAREN', 'COMMA', 'KW_OR'}


  Transitions:
    Symbol: KW_OR -> Node#105

Node#236
  Rules:
    class_statement = access_modifier special_mod OPEN_CURLY var_def_list . CLOSE_CURLY
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'CLOSE_CURLY', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'OPEN_CURLY', 'ACC_PUBLIC', 'KW_DELETE', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}


  Transitions:
    Symbol: CLOSE_CURLY -> Node#266

Node#237
  Rules:
    var_def_list = var_definition .
    LA: {'CLOSE_CURLY'}

    var_def_list = var_definition . var_def_list
    LA: {'CLOSE_CURLY'}

    var_def_list = . var_definition
    LA: {'CLOSE_CURLY'}

    var_def_list = . var_definition var_def_list
    LA: {'CLOSE_CURLY'}

    var_definition = . access_modifier special_mod type NAME SEMICOLON
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'CLOSE_CURLY', 'TYPE_MAP', 'NAME', 'TYPE_BOOL', 'KW_STATIC', 'TYPE_STR', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'ACC_PUBLIC', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    var_definition = . access_modifier special_mod type NAME OP_ASSIGN expression SEMICOLON
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'CLOSE_CURLY', 'TYPE_MAP', 'NAME', 'TYPE_BOOL', 'KW_STATIC', 'TYPE_STR', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'ACC_PUBLIC', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    var_definition = . access_modifier special_mod NAME OP_ASSIGN expression SEMICOLON
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'CLOSE_CURLY', 'TYPE_MAP', 'NAME', 'TYPE_BOOL', 'KW_STATIC', 'TYPE_STR', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'ACC_PUBLIC', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    access_modifier = . ACC_PUBLIC
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    access_modifier = . ACC_PRIVATE
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    access_modifier = . ACC_READONLY
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    access_modifier = . ACC_SHARED
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    access_modifier = .
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}


  Transitions:
    Symbol: var_def_list -> Node#267
    Symbol: var_definition -> Node#237
    Symbol: access_modifier -> Node#238
    Symbol: ACC_PUBLIC -> Node#8
    Symbol: ACC_PRIVATE -> Node#9
    Symbol: ACC_READONLY -> Node#10
    Symbol: ACC_SHARED -> Node#11

Node#238
  Rules:
    var_definition = access_modifier . special_mod type NAME SEMICOLON
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'CLOSE_CURLY', 'TYPE_MAP', 'NAME', 'TYPE_BOOL', 'KW_STATIC', 'TYPE_STR', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'ACC_PUBLIC', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    var_definition = access_modifier . special_mod type NAME OP_ASSIGN expression SEMICOLON
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'CLOSE_CURLY', 'TYPE_MAP', 'NAME', 'TYPE_BOOL', 'KW_STATIC', 'TYPE_STR', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'ACC_PUBLIC', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    var_definition = access_modifier . special_mod NAME OP_ASSIGN expression SEMICOLON
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'CLOSE_CURLY', 'TYPE_MAP', 'NAME', 'TYPE_BOOL', 'KW_STATIC', 'TYPE_STR', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'ACC_PUBLIC', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    special_mod = . KW_ABSTRACT
    LA: {'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'TYPE_STR', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    special_mod = . KW_STATIC
    LA: {'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'TYPE_STR', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    special_mod = .
    LA: {'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'TYPE_STR', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}


  Transitions:
    Symbol: special_mod -> Node#268
    Symbol: KW_ABSTRACT -> Node#18
    Symbol: KW_STATIC -> Node#19

Node#239
  Rules:
    func_definition = access_modifier special_mod type NAME . OPEN_PAREN func_arg_definitions CLOSE_PAREN body
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'CLOSE_CURLY', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'OPEN_CURLY', 'ACC_PUBLIC', 'KW_DELETE', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}


  Transitions:
    Symbol: OPEN_PAREN -> Node#47

Node#240
  Rules:
    enum_statement = NAME OP_ASSIGN LIT_INT SEMICOLON .
    LA: {'CLOSE_CURLY', 'NAME'}


Node#241
  Rules:
    linear_comprehension = expression KW_FOR name KW_IN . expression
    LA: {'CLOSE_CURLY', 'CLOSE_SQUARE'}

    linear_comprehension = expression KW_FOR name KW_IN . expression KW_IF expression
    LA: {'CLOSE_CURLY', 'CLOSE_SQUARE'}

    expression = . expression KW_OR log_and_expr
    LA: {'CLOSE_CURLY', 'KW_OR', 'CLOSE_SQUARE', 'KW_IF'}

    expression = . log_and_expr
    LA: {'CLOSE_CURLY', 'KW_OR', 'CLOSE_SQUARE', 'KW_IF'}

    log_and_expr = . log_and_expr KW_AND bit_or_expr
    LA: {'CLOSE_CURLY', 'KW_OR', 'KW_IF', 'KW_AND', 'CLOSE_SQUARE'}

    log_and_expr = . bit_or_expr
    LA: {'CLOSE_CURLY', 'KW_OR', 'KW_IF', 'KW_AND', 'CLOSE_SQUARE'}

    bit_or_expr = . bit_or_expr OP_BIT_OR bit_xor_expr
    LA: {'CLOSE_CURLY', 'KW_OR', 'OP_BIT_OR', 'KW_IF', 'KW_AND', 'CLOSE_SQUARE'}

    bit_or_expr = . bit_xor_expr
    LA: {'CLOSE_CURLY', 'KW_OR', 'OP_BIT_OR', 'KW_IF', 'KW_AND', 'CLOSE_SQUARE'}

    bit_xor_expr = . bit_xor_expr OP_BIT_XOR bit_and_expr
    LA: {'CLOSE_CURLY', 'KW_OR', 'OP_BIT_OR', 'KW_IF', 'KW_AND', 'CLOSE_SQUARE', 'OP_BIT_XOR'}

    bit_xor_expr = . bit_and_expr
    LA: {'CLOSE_CURLY', 'KW_OR', 'OP_BIT_OR', 'KW_IF', 'KW_AND', 'CLOSE_SQUARE', 'OP_BIT_XOR'}

    bit_and_expr = . bit_and_expr OP_BIT_AND equ_expr
    LA: {'CLOSE_CURLY', 'KW_OR', 'OP_BIT_OR', 'KW_IF', 'OP_BIT_AND', 'KW_AND', 'CLOSE_SQUARE', 'OP_BIT_XOR'}

    bit_and_expr = . equ_expr
    LA: {'CLOSE_CURLY', 'KW_OR', 'OP_BIT_OR', 'KW_IF', 'OP_BIT_AND', 'KW_AND', 'CLOSE_SQUARE', 'OP_BIT_XOR'}

    equ_expr = . equ_expr OP_EQ comp_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'KW_AND', 'CLOSE_SQUARE', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'KW_IF', 'OP_EQ', 'OP_NEQ'}

    equ_expr = . equ_expr OP_NEQ comp_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'KW_AND', 'CLOSE_SQUARE', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'KW_IF', 'OP_EQ', 'OP_NEQ'}

    equ_expr = . comp_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'KW_AND', 'CLOSE_SQUARE', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'KW_IF', 'OP_EQ', 'OP_NEQ'}

    comp_expr = . comp_expr OP_LT math_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'KW_AND', 'CLOSE_SQUARE', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'KW_OR', 'OP_BIT_OR', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    comp_expr = . comp_expr OP_LTEQ math_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'KW_AND', 'CLOSE_SQUARE', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'KW_OR', 'OP_BIT_OR', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    comp_expr = . comp_expr OP_GT math_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'KW_AND', 'CLOSE_SQUARE', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'KW_OR', 'OP_BIT_OR', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    comp_expr = . comp_expr OP_GTEQ math_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'KW_AND', 'CLOSE_SQUARE', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'KW_OR', 'OP_BIT_OR', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    comp_expr = . math_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'KW_AND', 'CLOSE_SQUARE', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'KW_OR', 'OP_BIT_OR', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    math_expr = . math_expr OP_PLUS term
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'OP_PLUS', 'KW_AND', 'CLOSE_SQUARE', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'OP_MINUS', 'KW_OR', 'OP_BIT_OR', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    math_expr = . math_expr OP_MINUS term
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'OP_PLUS', 'KW_AND', 'CLOSE_SQUARE', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'OP_MINUS', 'KW_OR', 'OP_BIT_OR', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    math_expr = . term
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'OP_PLUS', 'KW_AND', 'CLOSE_SQUARE', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'OP_MINUS', 'KW_OR', 'OP_BIT_OR', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    term = . term OP_STAR factor
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'CLOSE_SQUARE', 'OP_NEQ', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    term = . term OP_SLASH factor
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'CLOSE_SQUARE', 'OP_NEQ', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    term = . term OP_MOD factor
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'CLOSE_SQUARE', 'OP_NEQ', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    term = . factor
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'CLOSE_SQUARE', 'OP_NEQ', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    factor = . factor OP_POW pow_term
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'CLOSE_SQUARE', 'OP_NEQ', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    factor = . pow_term
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'CLOSE_SQUARE', 'OP_NEQ', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    pow_term = . OP_MINUS inc_term
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'CLOSE_SQUARE', 'OP_NEQ', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    pow_term = . KW_NOT inc_term
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'CLOSE_SQUARE', 'OP_NEQ', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    pow_term = . inc_term
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'CLOSE_SQUARE', 'OP_NEQ', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . OP_INC bottom_val
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'CLOSE_SQUARE', 'OP_NEQ', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . bottom_val OP_INC
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'CLOSE_SQUARE', 'OP_NEQ', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . OP_DEC bottom_val
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'CLOSE_SQUARE', 'OP_NEQ', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . bottom_val OP_DEC
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'CLOSE_SQUARE', 'OP_NEQ', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . bottom_val
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'CLOSE_SQUARE', 'OP_NEQ', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    bottom_val = . bottom_val OPEN_PAREN expr_list CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'CLOSE_SQUARE', 'OP_INC', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . bottom_val OPEN_PAREN CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'CLOSE_SQUARE', 'OP_INC', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . bottom_val OP_DOT name
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'CLOSE_SQUARE', 'OP_INC', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . bottom_val OPEN_SQUARE expression CLOSE_SQUARE
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'CLOSE_SQUARE', 'OP_INC', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . comprehension
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'CLOSE_SQUARE', 'OP_INC', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . literal
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'CLOSE_SQUARE', 'OP_INC', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . name
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'CLOSE_SQUARE', 'OP_INC', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . OPEN_PAREN expression CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'CLOSE_SQUARE', 'OP_INC', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    comprehension = . OPEN_SQUARE linear_comprehension CLOSE_SQUARE
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'CLOSE_SQUARE', 'OP_INC', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    comprehension = . OPEN_CURLY linear_comprehension CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'CLOSE_SQUARE', 'OP_INC', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'CLOSE_SQUARE', 'OP_INC', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression KW_IF expression CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'CLOSE_SQUARE', 'OP_INC', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . LIT_INT
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'CLOSE_SQUARE', 'OP_INC', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . LIT_FLOAT
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'CLOSE_SQUARE', 'OP_INC', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . lit_set
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'CLOSE_SQUARE', 'OP_INC', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . lit_string
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'CLOSE_SQUARE', 'OP_INC', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . lit_list
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'CLOSE_SQUARE', 'OP_INC', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . lit_map
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'CLOSE_SQUARE', 'OP_INC', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . KW_NULL
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'CLOSE_SQUARE', 'OP_INC', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    name = . NAME
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'CLOSE_SQUARE', 'OP_INC', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    lit_set = . OPEN_CURLY expr_list CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'CLOSE_SQUARE', 'OP_INC', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    lit_string = . DOUBLE_QUOTE_STR
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'CLOSE_SQUARE', 'OP_INC', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    lit_string = . SINGLE_QUOTE_STR
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'CLOSE_SQUARE', 'OP_INC', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    lit_list = . OPEN_SQUARE expr_list CLOSE_SQUARE
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'CLOSE_SQUARE', 'OP_INC', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    lit_map = . OPEN_CURLY map_list CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'CLOSE_SQUARE', 'OP_INC', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}


  Transitions:
    Symbol: expression -> Node#269
    Symbol: log_and_expr -> Node#51
    Symbol: bit_or_expr -> Node#52
    Symbol: bit_xor_expr -> Node#53
    Symbol: bit_and_expr -> Node#54
    Symbol: equ_expr -> Node#55
    Symbol: comp_expr -> Node#56
    Symbol: math_expr -> Node#57
    Symbol: term -> Node#58
    Symbol: factor -> Node#59
    Symbol: pow_term -> Node#60
    Symbol: OP_MINUS -> Node#61
    Symbol: KW_NOT -> Node#62
    Symbol: inc_term -> Node#63
    Symbol: OP_INC -> Node#64
    Symbol: bottom_val -> Node#65
    Symbol: OP_DEC -> Node#66
    Symbol: comprehension -> Node#67
    Symbol: literal -> Node#68
    Symbol: name -> Node#69
    Symbol: OPEN_PAREN -> Node#70
    Symbol: OPEN_SQUARE -> Node#71
    Symbol: OPEN_CURLY -> Node#72
    Symbol: LIT_INT -> Node#73
    Symbol: LIT_FLOAT -> Node#74
    Symbol: lit_set -> Node#75
    Symbol: lit_string -> Node#76
    Symbol: lit_list -> Node#77
    Symbol: lit_map -> Node#78
    Symbol: KW_NULL -> Node#79
    Symbol: NAME -> Node#80
    Symbol: DOUBLE_QUOTE_STR -> Node#81
    Symbol: SINGLE_QUOTE_STR -> Node#82

Node#242
  Rules:
    comprehension = OPEN_CURLY expression COLON expression KW_FOR . name KW_IN expression CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_CURLY', 'OP_MINUS', 'OP_AND_ASSIGN', 'CLOSE_PAREN', 'OP_XOR_ASSIGN', 'KW_AND', 'KW_OR', 'OP_MOD_ASSIGN', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_ADD_ASSIGN', 'OP_OR_ASSIGN', 'OP_DOT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_NEQ', 'OP_PLUS', 'OP_SUB_ASSIGN', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_ASSIGN', 'KW_ELSE', 'OP_BIT_XOR', 'OP_BIT_OR', 'COMMA', 'OP_BIT_AND', 'OP_GT', 'OP_MUL_ASSIGN', 'KW_TO', 'OP_LTEQ'}

    comprehension = OPEN_CURLY expression COLON expression KW_FOR . name KW_IN expression KW_IF expression CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_CURLY', 'OP_MINUS', 'OP_AND_ASSIGN', 'CLOSE_PAREN', 'OP_XOR_ASSIGN', 'KW_AND', 'KW_OR', 'OP_MOD_ASSIGN', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_ADD_ASSIGN', 'OP_OR_ASSIGN', 'OP_DOT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_NEQ', 'OP_PLUS', 'OP_SUB_ASSIGN', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_ASSIGN', 'KW_ELSE', 'OP_BIT_XOR', 'OP_BIT_OR', 'COMMA', 'OP_BIT_AND', 'OP_GT', 'OP_MUL_ASSIGN', 'KW_TO', 'OP_LTEQ'}

    name = . NAME
    LA: {'KW_IN'}


  Transitions:
    Symbol: name -> Node#270
    Symbol: NAME -> Node#80

Node#243
  Rules:
    map_expression = expression COLON . expression
    LA: {'COMMA', 'CLOSE_CURLY'}

    expression = . expression KW_OR log_and_expr
    LA: {'COMMA', 'CLOSE_CURLY', 'KW_OR'}

    expression = . log_and_expr
    LA: {'COMMA', 'CLOSE_CURLY', 'KW_OR'}

    log_and_expr = . log_and_expr KW_AND bit_or_expr
    LA: {'COMMA', 'CLOSE_CURLY', 'KW_OR', 'KW_AND'}

    log_and_expr = . bit_or_expr
    LA: {'COMMA', 'CLOSE_CURLY', 'KW_OR', 'KW_AND'}

    bit_or_expr = . bit_or_expr OP_BIT_OR bit_xor_expr
    LA: {'CLOSE_CURLY', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'KW_AND'}

    bit_or_expr = . bit_xor_expr
    LA: {'CLOSE_CURLY', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'KW_AND'}

    bit_xor_expr = . bit_xor_expr OP_BIT_XOR bit_and_expr
    LA: {'CLOSE_CURLY', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'KW_AND', 'OP_BIT_XOR'}

    bit_xor_expr = . bit_and_expr
    LA: {'CLOSE_CURLY', 'KW_OR', 'OP_BIT_OR', 'COMMA', 'KW_AND', 'OP_BIT_XOR'}

    bit_and_expr = . bit_and_expr OP_BIT_AND equ_expr
    LA: {'CLOSE_CURLY', 'KW_OR', 'OP_BIT_OR', 'OP_BIT_AND', 'COMMA', 'KW_AND', 'OP_BIT_XOR'}

    bit_and_expr = . equ_expr
    LA: {'CLOSE_CURLY', 'KW_OR', 'OP_BIT_OR', 'OP_BIT_AND', 'COMMA', 'KW_AND', 'OP_BIT_XOR'}

    equ_expr = . equ_expr OP_EQ comp_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'KW_AND', 'OP_BIT_XOR', 'OP_NEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'COMMA'}

    equ_expr = . equ_expr OP_NEQ comp_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'KW_AND', 'OP_BIT_XOR', 'OP_NEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'COMMA'}

    equ_expr = . comp_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'KW_AND', 'OP_BIT_XOR', 'OP_NEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'COMMA'}

    comp_expr = . comp_expr OP_LT math_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_NEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'COMMA', 'OP_LT'}

    comp_expr = . comp_expr OP_LTEQ math_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_NEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'COMMA', 'OP_LT'}

    comp_expr = . comp_expr OP_GT math_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_NEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'COMMA', 'OP_LT'}

    comp_expr = . comp_expr OP_GTEQ math_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_NEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'COMMA', 'OP_LT'}

    comp_expr = . math_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_NEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'COMMA', 'OP_LT'}

    math_expr = . math_expr OP_PLUS term
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'OP_PLUS', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_MINUS', 'OP_NEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'COMMA', 'OP_LT'}

    math_expr = . math_expr OP_MINUS term
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'OP_PLUS', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_MINUS', 'OP_NEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'COMMA', 'OP_LT'}

    math_expr = . term
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'OP_PLUS', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_MINUS', 'OP_NEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'COMMA', 'OP_LT'}

    term = . term OP_STAR factor
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'COMMA', 'OP_LT', 'OP_SLASH'}

    term = . term OP_SLASH factor
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'COMMA', 'OP_LT', 'OP_SLASH'}

    term = . term OP_MOD factor
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'COMMA', 'OP_LT', 'OP_SLASH'}

    term = . factor
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'COMMA', 'OP_LT', 'OP_SLASH'}

    factor = . factor OP_POW pow_term
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'COMMA', 'OP_LT', 'OP_SLASH'}

    factor = . pow_term
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'COMMA', 'OP_LT', 'OP_SLASH'}

    pow_term = . OP_MINUS inc_term
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'COMMA', 'OP_LT', 'OP_SLASH'}

    pow_term = . KW_NOT inc_term
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'COMMA', 'OP_LT', 'OP_SLASH'}

    pow_term = . inc_term
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'COMMA', 'OP_LT', 'OP_SLASH'}

    inc_term = . OP_INC bottom_val
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'COMMA', 'OP_LT', 'OP_SLASH'}

    inc_term = . bottom_val OP_INC
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'COMMA', 'OP_LT', 'OP_SLASH'}

    inc_term = . OP_DEC bottom_val
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'COMMA', 'OP_LT', 'OP_SLASH'}

    inc_term = . bottom_val OP_DEC
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'COMMA', 'OP_LT', 'OP_SLASH'}

    inc_term = . bottom_val
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'COMMA', 'OP_LT', 'OP_SLASH'}

    bottom_val = . bottom_val OPEN_PAREN expr_list CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . bottom_val OPEN_PAREN CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . bottom_val OP_DOT name
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . bottom_val OPEN_SQUARE expression CLOSE_SQUARE
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . comprehension
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . literal
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . name
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . OPEN_PAREN expression CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    comprehension = . OPEN_SQUARE linear_comprehension CLOSE_SQUARE
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    comprehension = . OPEN_CURLY linear_comprehension CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression KW_IF expression CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    literal = . LIT_INT
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    literal = . LIT_FLOAT
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    literal = . lit_set
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    literal = . lit_string
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    literal = . lit_list
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    literal = . lit_map
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    literal = . KW_NULL
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    name = . NAME
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    lit_set = . OPEN_CURLY expr_list CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    lit_string = . DOUBLE_QUOTE_STR
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    lit_string = . SINGLE_QUOTE_STR
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    lit_list = . OPEN_SQUARE expr_list CLOSE_SQUARE
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}

    lit_map = . OPEN_CURLY map_list CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'COMMA', 'OP_MOD', 'OP_SLASH'}


  Transitions:
    Symbol: expression -> Node#271
    Symbol: log_and_expr -> Node#51
    Symbol: bit_or_expr -> Node#52
    Symbol: bit_xor_expr -> Node#53
    Symbol: bit_and_expr -> Node#54
    Symbol: equ_expr -> Node#55
    Symbol: comp_expr -> Node#56
    Symbol: math_expr -> Node#57
    Symbol: term -> Node#58
    Symbol: factor -> Node#59
    Symbol: pow_term -> Node#60
    Symbol: OP_MINUS -> Node#61
    Symbol: KW_NOT -> Node#62
    Symbol: inc_term -> Node#63
    Symbol: OP_INC -> Node#64
    Symbol: bottom_val -> Node#65
    Symbol: OP_DEC -> Node#66
    Symbol: comprehension -> Node#67
    Symbol: literal -> Node#68
    Symbol: name -> Node#69
    Symbol: OPEN_PAREN -> Node#70
    Symbol: OPEN_SQUARE -> Node#71
    Symbol: OPEN_CURLY -> Node#72
    Symbol: LIT_INT -> Node#73
    Symbol: LIT_FLOAT -> Node#74
    Symbol: lit_set -> Node#75
    Symbol: lit_string -> Node#76
    Symbol: lit_list -> Node#77
    Symbol: lit_map -> Node#78
    Symbol: KW_NULL -> Node#79
    Symbol: NAME -> Node#80
    Symbol: DOUBLE_QUOTE_STR -> Node#81
    Symbol: SINGLE_QUOTE_STR -> Node#82

Node#244
  Rules:
    body = OPEN_CURLY statements CLOSE_CURLY .
    LA: {'KW_ABSTRACT', 'CLOSE_CURLY', 'NAME', 'KW_FOR', 'OP_INC', 'OPEN_CURLY', 'KW_CATCH', 'OP_MINUS', 'KW_RETURN', 'DOUBLE_QUOTE_STR', 'KW_DELETE', 'KW_ENUM', 'TYPE_INT', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_LIST', 'KW_NOT', 'OPEN_PAREN', 'OP_DEC', 'KW_CLASS', 'ACC_READONLY', 'KW_THROW', 'ACC_PRIVATE', 'KW_NULL', '__EMPTY__', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'KW_IF', 'KW_ELSE', 'ACC_SHARED', 'TYPE_SET', 'TYPE_MAP', 'KW_WHILE', 'KW_STATIC', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'LIT_INT', 'ACC_PUBLIC', '__EOF__', 'KW_TRY'}


Node#245
  Rules:
    statements = statement statements .
    LA: {'CLOSE_CURLY'}


Node#246
  Rules:
    statement = statement_body SEMICOLON .
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}


Node#247
  Rules:
    comprehension = OPEN_CURLY expression . COLON expression KW_FOR name KW_IN expression CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'KW_FOR', 'OPEN_SQUARE', 'OP_INC', 'OP_EQ', 'OP_MINUS', 'OP_ASSIGN', 'OP_AND_ASSIGN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_OR_ASSIGN', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_DEC', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS', 'OP_SUB_ASSIGN'}

    comprehension = OPEN_CURLY expression . COLON expression KW_FOR name KW_IN expression KW_IF expression CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'KW_FOR', 'OPEN_SQUARE', 'OP_INC', 'OP_EQ', 'OP_MINUS', 'OP_ASSIGN', 'OP_AND_ASSIGN', 'OP_XOR_ASSIGN', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_MOD_ASSIGN', 'COMMA', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_BIT_AND', 'OP_ADD_ASSIGN', 'OP_OR_ASSIGN', 'OP_NEQ', 'OP_DOT', 'OP_GT', 'OPEN_PAREN', 'OP_DEC', 'OP_STAR', 'OP_MUL_ASSIGN', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_LTEQ', 'OP_PLUS', 'OP_SUB_ASSIGN'}

    linear_comprehension = expression . KW_FOR name KW_IN expression
    LA: {'CLOSE_CURLY'}

    linear_comprehension = expression . KW_FOR name KW_IN expression KW_IF expression
    LA: {'CLOSE_CURLY'}

    expression = expression . KW_OR log_and_expr
    LA: {'CLOSE_CURLY', 'KW_FOR', 'KW_OR', 'COLON', 'COMMA', 'SEMICOLON'}

    expr_list = expression .
    LA: {'CLOSE_CURLY'}

    expr_list = expression . COMMA expr_list
    LA: {'CLOSE_CURLY'}

    map_expression = expression . COLON expression
    LA: {'COMMA', 'CLOSE_CURLY'}

    statement_body = expression .
    LA: {'SEMICOLON'}


  Transitions:
    Symbol: COLON -> Node#186
    Symbol: KW_FOR -> Node#183
    Symbol: KW_OR -> Node#105
    Symbol: COMMA -> Node#184

Node#248
  Rules:
    if_statement = KW_IF expression . body else_statement
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    expression = expression . KW_OR log_and_expr
    LA: {'KW_OR', 'OPEN_CURLY'}

    body = . OPEN_CURLY statements CLOSE_CURLY
    LA: {'__EMPTY__', 'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'KW_ELSE', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    body = . OPEN_CURLY CLOSE_CURLY
    LA: {'__EMPTY__', 'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'KW_ELSE', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}


  Transitions:
    Symbol: body -> Node#272
    Symbol: KW_OR -> Node#105
    Symbol: OPEN_CURLY -> Node#192

Node#249
  Rules:
    while_statement = KW_WHILE expression . body
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    expression = expression . KW_OR log_and_expr
    LA: {'KW_OR', 'OPEN_CURLY'}

    body = . OPEN_CURLY statements CLOSE_CURLY
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    body = . OPEN_CURLY CLOSE_CURLY
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}


  Transitions:
    Symbol: body -> Node#273
    Symbol: KW_OR -> Node#105
    Symbol: OPEN_CURLY -> Node#192

Node#250
  Rules:
    do_while_statement = KW_DO body . KW_WHILE expression SEMICOLON
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}


  Transitions:
    Symbol: KW_WHILE -> Node#274

Node#251
  Rules:
    for_statement = KW_FOR name . KW_IN expression body
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    for_statement = KW_FOR name . KW_IN expression KW_TO expression body
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}


  Transitions:
    Symbol: KW_IN -> Node#275

Node#252
  Rules:
    try_catch_statement = KW_TRY body . catch_statements
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    catch_statements = . catch_statement catch_statements
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    catch_statements = . catch_statement
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    catch_statement = . KW_CATCH type name body
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'KW_CATCH', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}


  Transitions:
    Symbol: catch_statements -> Node#276
    Symbol: catch_statement -> Node#277
    Symbol: KW_CATCH -> Node#278

Node#253
  Rules:
    assignment = bottom_val assign_op . assign_expr
    LA: {'SEMICOLON'}

    assign_expr = . expression
    LA: {'SEMICOLON'}

    assign_expr = . expression KW_IF expression KW_ELSE expression
    LA: {'SEMICOLON'}

    expression = . expression KW_OR log_and_expr
    LA: {'KW_OR', 'SEMICOLON', 'KW_IF'}

    expression = . log_and_expr
    LA: {'KW_OR', 'SEMICOLON', 'KW_IF'}

    log_and_expr = . log_and_expr KW_AND bit_or_expr
    LA: {'KW_OR', 'SEMICOLON', 'KW_IF', 'KW_AND'}

    log_and_expr = . bit_or_expr
    LA: {'KW_OR', 'SEMICOLON', 'KW_IF', 'KW_AND'}

    bit_or_expr = . bit_or_expr OP_BIT_OR bit_xor_expr
    LA: {'KW_OR', 'OP_BIT_OR', 'KW_IF', 'KW_AND', 'SEMICOLON'}

    bit_or_expr = . bit_xor_expr
    LA: {'KW_OR', 'OP_BIT_OR', 'KW_IF', 'KW_AND', 'SEMICOLON'}

    bit_xor_expr = . bit_xor_expr OP_BIT_XOR bit_and_expr
    LA: {'KW_OR', 'OP_BIT_OR', 'KW_IF', 'KW_AND', 'SEMICOLON', 'OP_BIT_XOR'}

    bit_xor_expr = . bit_and_expr
    LA: {'KW_OR', 'OP_BIT_OR', 'KW_IF', 'KW_AND', 'SEMICOLON', 'OP_BIT_XOR'}

    bit_and_expr = . bit_and_expr OP_BIT_AND equ_expr
    LA: {'KW_OR', 'OP_BIT_OR', 'KW_IF', 'OP_BIT_AND', 'KW_AND', 'SEMICOLON', 'OP_BIT_XOR'}

    bit_and_expr = . equ_expr
    LA: {'KW_OR', 'OP_BIT_OR', 'KW_IF', 'OP_BIT_AND', 'KW_AND', 'SEMICOLON', 'OP_BIT_XOR'}

    equ_expr = . equ_expr OP_EQ comp_expr
    LA: {'OP_BIT_AND', 'KW_AND', 'SEMICOLON', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'KW_IF', 'OP_EQ', 'OP_NEQ'}

    equ_expr = . equ_expr OP_NEQ comp_expr
    LA: {'OP_BIT_AND', 'KW_AND', 'SEMICOLON', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'KW_IF', 'OP_EQ', 'OP_NEQ'}

    equ_expr = . comp_expr
    LA: {'OP_BIT_AND', 'KW_AND', 'SEMICOLON', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'KW_IF', 'OP_EQ', 'OP_NEQ'}

    comp_expr = . comp_expr OP_LT math_expr
    LA: {'OP_BIT_AND', 'KW_AND', 'SEMICOLON', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'KW_OR', 'OP_BIT_OR', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    comp_expr = . comp_expr OP_LTEQ math_expr
    LA: {'OP_BIT_AND', 'KW_AND', 'SEMICOLON', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'KW_OR', 'OP_BIT_OR', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    comp_expr = . comp_expr OP_GT math_expr
    LA: {'OP_BIT_AND', 'KW_AND', 'SEMICOLON', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'KW_OR', 'OP_BIT_OR', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    comp_expr = . comp_expr OP_GTEQ math_expr
    LA: {'OP_BIT_AND', 'KW_AND', 'SEMICOLON', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'KW_OR', 'OP_BIT_OR', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    comp_expr = . math_expr
    LA: {'OP_BIT_AND', 'KW_AND', 'SEMICOLON', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'KW_OR', 'OP_BIT_OR', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    math_expr = . math_expr OP_PLUS term
    LA: {'OP_BIT_AND', 'OP_PLUS', 'KW_AND', 'SEMICOLON', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'OP_MINUS', 'KW_OR', 'OP_BIT_OR', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    math_expr = . math_expr OP_MINUS term
    LA: {'OP_BIT_AND', 'OP_PLUS', 'KW_AND', 'SEMICOLON', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'OP_MINUS', 'KW_OR', 'OP_BIT_OR', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    math_expr = . term
    LA: {'OP_BIT_AND', 'OP_PLUS', 'KW_AND', 'SEMICOLON', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'OP_MINUS', 'KW_OR', 'OP_BIT_OR', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    term = . term OP_STAR factor
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    term = . term OP_SLASH factor
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    term = . term OP_MOD factor
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    term = . factor
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    factor = . factor OP_POW pow_term
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    factor = . pow_term
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    pow_term = . OP_MINUS inc_term
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    pow_term = . KW_NOT inc_term
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    pow_term = . inc_term
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . OP_INC bottom_val
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . bottom_val OP_INC
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . OP_DEC bottom_val
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . bottom_val OP_DEC
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . bottom_val
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    bottom_val = . bottom_val OPEN_PAREN expr_list CLOSE_PAREN
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . bottom_val OPEN_PAREN CLOSE_PAREN
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . bottom_val OP_DOT name
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . bottom_val OPEN_SQUARE expression CLOSE_SQUARE
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . comprehension
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . literal
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . name
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . OPEN_PAREN expression CLOSE_PAREN
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    comprehension = . OPEN_SQUARE linear_comprehension CLOSE_SQUARE
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    comprehension = . OPEN_CURLY linear_comprehension CLOSE_CURLY
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression CLOSE_CURLY
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression KW_IF expression CLOSE_CURLY
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . LIT_INT
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . LIT_FLOAT
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . lit_set
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . lit_string
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . lit_list
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . lit_map
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . KW_NULL
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    name = . NAME
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    lit_set = . OPEN_CURLY expr_list CLOSE_CURLY
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    lit_string = . DOUBLE_QUOTE_STR
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    lit_string = . SINGLE_QUOTE_STR
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    lit_list = . OPEN_SQUARE expr_list CLOSE_SQUARE
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    lit_map = . OPEN_CURLY map_list CLOSE_CURLY
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}


  Transitions:
    Symbol: assign_expr -> Node#279
    Symbol: expression -> Node#280
    Symbol: log_and_expr -> Node#51
    Symbol: bit_or_expr -> Node#52
    Symbol: bit_xor_expr -> Node#53
    Symbol: bit_and_expr -> Node#54
    Symbol: equ_expr -> Node#55
    Symbol: comp_expr -> Node#56
    Symbol: math_expr -> Node#57
    Symbol: term -> Node#58
    Symbol: factor -> Node#59
    Symbol: pow_term -> Node#60
    Symbol: OP_MINUS -> Node#61
    Symbol: KW_NOT -> Node#62
    Symbol: inc_term -> Node#63
    Symbol: OP_INC -> Node#64
    Symbol: bottom_val -> Node#65
    Symbol: OP_DEC -> Node#66
    Symbol: comprehension -> Node#67
    Symbol: literal -> Node#68
    Symbol: name -> Node#69
    Symbol: OPEN_PAREN -> Node#70
    Symbol: OPEN_SQUARE -> Node#71
    Symbol: OPEN_CURLY -> Node#72
    Symbol: LIT_INT -> Node#73
    Symbol: LIT_FLOAT -> Node#74
    Symbol: lit_set -> Node#75
    Symbol: lit_string -> Node#76
    Symbol: lit_list -> Node#77
    Symbol: lit_map -> Node#78
    Symbol: KW_NULL -> Node#79
    Symbol: NAME -> Node#80
    Symbol: DOUBLE_QUOTE_STR -> Node#81
    Symbol: SINGLE_QUOTE_STR -> Node#82

Node#254
  Rules:
    assign_op = OP_ASSIGN .
    LA: {'DOUBLE_QUOTE_STR', 'NAME', 'LIT_FLOAT', 'OP_INC', 'SINGLE_QUOTE_STR', 'KW_NOT', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_NULL', 'OP_MINUS', 'LIT_INT', 'OP_DEC', 'OPEN_PAREN'}


Node#255
  Rules:
    assign_op = OP_ADD_ASSIGN .
    LA: {'DOUBLE_QUOTE_STR', 'NAME', 'LIT_FLOAT', 'OP_INC', 'SINGLE_QUOTE_STR', 'KW_NOT', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_NULL', 'OP_MINUS', 'LIT_INT', 'OP_DEC', 'OPEN_PAREN'}


Node#256
  Rules:
    assign_op = OP_SUB_ASSIGN .
    LA: {'DOUBLE_QUOTE_STR', 'NAME', 'LIT_FLOAT', 'OP_INC', 'SINGLE_QUOTE_STR', 'KW_NOT', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_NULL', 'OP_MINUS', 'LIT_INT', 'OP_DEC', 'OPEN_PAREN'}


Node#257
  Rules:
    assign_op = OP_MUL_ASSIGN .
    LA: {'DOUBLE_QUOTE_STR', 'NAME', 'LIT_FLOAT', 'OP_INC', 'SINGLE_QUOTE_STR', 'KW_NOT', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_NULL', 'OP_MINUS', 'LIT_INT', 'OP_DEC', 'OPEN_PAREN'}


Node#258
  Rules:
    assign_op = OP_DIV_ASSIGN .
    LA: {'DOUBLE_QUOTE_STR', 'NAME', 'LIT_FLOAT', 'OP_INC', 'SINGLE_QUOTE_STR', 'KW_NOT', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_NULL', 'OP_MINUS', 'LIT_INT', 'OP_DEC', 'OPEN_PAREN'}


Node#259
  Rules:
    assign_op = OP_MOD_ASSIGN .
    LA: {'DOUBLE_QUOTE_STR', 'NAME', 'LIT_FLOAT', 'OP_INC', 'SINGLE_QUOTE_STR', 'KW_NOT', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_NULL', 'OP_MINUS', 'LIT_INT', 'OP_DEC', 'OPEN_PAREN'}


Node#260
  Rules:
    assign_op = OP_AND_ASSIGN .
    LA: {'DOUBLE_QUOTE_STR', 'NAME', 'LIT_FLOAT', 'OP_INC', 'SINGLE_QUOTE_STR', 'KW_NOT', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_NULL', 'OP_MINUS', 'LIT_INT', 'OP_DEC', 'OPEN_PAREN'}


Node#261
  Rules:
    assign_op = OP_OR_ASSIGN .
    LA: {'DOUBLE_QUOTE_STR', 'NAME', 'LIT_FLOAT', 'OP_INC', 'SINGLE_QUOTE_STR', 'KW_NOT', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_NULL', 'OP_MINUS', 'LIT_INT', 'OP_DEC', 'OPEN_PAREN'}


Node#262
  Rules:
    assign_op = OP_XOR_ASSIGN .
    LA: {'DOUBLE_QUOTE_STR', 'NAME', 'LIT_FLOAT', 'OP_INC', 'SINGLE_QUOTE_STR', 'KW_NOT', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_NULL', 'OP_MINUS', 'LIT_INT', 'OP_DEC', 'OPEN_PAREN'}


Node#263
  Rules:
    assignment = type name . assign_op assign_expr
    LA: {'SEMICOLON'}

    assign_op = . OP_ASSIGN
    LA: {'DOUBLE_QUOTE_STR', 'NAME', 'LIT_FLOAT', 'OP_INC', 'SINGLE_QUOTE_STR', 'KW_NOT', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_NULL', 'OP_MINUS', 'LIT_INT', 'OP_DEC', 'OPEN_PAREN'}

    assign_op = . OP_ADD_ASSIGN
    LA: {'DOUBLE_QUOTE_STR', 'NAME', 'LIT_FLOAT', 'OP_INC', 'SINGLE_QUOTE_STR', 'KW_NOT', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_NULL', 'OP_MINUS', 'LIT_INT', 'OP_DEC', 'OPEN_PAREN'}

    assign_op = . OP_SUB_ASSIGN
    LA: {'DOUBLE_QUOTE_STR', 'NAME', 'LIT_FLOAT', 'OP_INC', 'SINGLE_QUOTE_STR', 'KW_NOT', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_NULL', 'OP_MINUS', 'LIT_INT', 'OP_DEC', 'OPEN_PAREN'}

    assign_op = . OP_MUL_ASSIGN
    LA: {'DOUBLE_QUOTE_STR', 'NAME', 'LIT_FLOAT', 'OP_INC', 'SINGLE_QUOTE_STR', 'KW_NOT', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_NULL', 'OP_MINUS', 'LIT_INT', 'OP_DEC', 'OPEN_PAREN'}

    assign_op = . OP_DIV_ASSIGN
    LA: {'DOUBLE_QUOTE_STR', 'NAME', 'LIT_FLOAT', 'OP_INC', 'SINGLE_QUOTE_STR', 'KW_NOT', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_NULL', 'OP_MINUS', 'LIT_INT', 'OP_DEC', 'OPEN_PAREN'}

    assign_op = . OP_MOD_ASSIGN
    LA: {'DOUBLE_QUOTE_STR', 'NAME', 'LIT_FLOAT', 'OP_INC', 'SINGLE_QUOTE_STR', 'KW_NOT', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_NULL', 'OP_MINUS', 'LIT_INT', 'OP_DEC', 'OPEN_PAREN'}

    assign_op = . OP_AND_ASSIGN
    LA: {'DOUBLE_QUOTE_STR', 'NAME', 'LIT_FLOAT', 'OP_INC', 'SINGLE_QUOTE_STR', 'KW_NOT', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_NULL', 'OP_MINUS', 'LIT_INT', 'OP_DEC', 'OPEN_PAREN'}

    assign_op = . OP_OR_ASSIGN
    LA: {'DOUBLE_QUOTE_STR', 'NAME', 'LIT_FLOAT', 'OP_INC', 'SINGLE_QUOTE_STR', 'KW_NOT', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_NULL', 'OP_MINUS', 'LIT_INT', 'OP_DEC', 'OPEN_PAREN'}

    assign_op = . OP_XOR_ASSIGN
    LA: {'DOUBLE_QUOTE_STR', 'NAME', 'LIT_FLOAT', 'OP_INC', 'SINGLE_QUOTE_STR', 'KW_NOT', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_NULL', 'OP_MINUS', 'LIT_INT', 'OP_DEC', 'OPEN_PAREN'}


  Transitions:
    Symbol: assign_op -> Node#281
    Symbol: OP_ASSIGN -> Node#254
    Symbol: OP_ADD_ASSIGN -> Node#255
    Symbol: OP_SUB_ASSIGN -> Node#256
    Symbol: OP_MUL_ASSIGN -> Node#257
    Symbol: OP_DIV_ASSIGN -> Node#258
    Symbol: OP_MOD_ASSIGN -> Node#259
    Symbol: OP_AND_ASSIGN -> Node#260
    Symbol: OP_OR_ASSIGN -> Node#261
    Symbol: OP_XOR_ASSIGN -> Node#262

Node#264
  Rules:
    return_statement = KW_RETURN expression .
    LA: {'SEMICOLON'}

    expression = expression . KW_OR log_and_expr
    LA: {'KW_OR', 'SEMICOLON'}


  Transitions:
    Symbol: KW_OR -> Node#105

Node#265
  Rules:
    throw_statement = KW_THROW expression .
    LA: {'SEMICOLON'}

    expression = expression . KW_OR log_and_expr
    LA: {'KW_OR', 'SEMICOLON'}


  Transitions:
    Symbol: KW_OR -> Node#105

Node#266
  Rules:
    class_statement = access_modifier special_mod OPEN_CURLY var_def_list CLOSE_CURLY .
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'CLOSE_CURLY', 'TYPE_MAP', 'TYPE_BOOL', 'NAME', 'KW_STATIC', 'TYPE_STR', 'KW_INIT', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'OPEN_CURLY', 'ACC_PUBLIC', 'KW_DELETE', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}


Node#267
  Rules:
    var_def_list = var_definition var_def_list .
    LA: {'CLOSE_CURLY'}


Node#268
  Rules:
    var_definition = access_modifier special_mod . type NAME SEMICOLON
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'CLOSE_CURLY', 'TYPE_MAP', 'NAME', 'TYPE_BOOL', 'KW_STATIC', 'TYPE_STR', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'ACC_PUBLIC', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    var_definition = access_modifier special_mod . type NAME OP_ASSIGN expression SEMICOLON
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'CLOSE_CURLY', 'TYPE_MAP', 'NAME', 'TYPE_BOOL', 'KW_STATIC', 'TYPE_STR', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'ACC_PUBLIC', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    var_definition = access_modifier special_mod . NAME OP_ASSIGN expression SEMICOLON
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'CLOSE_CURLY', 'TYPE_MAP', 'NAME', 'TYPE_BOOL', 'KW_STATIC', 'TYPE_STR', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'ACC_PUBLIC', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    type = . TYPE_ARRAY OP_LT type OP_GT
    LA: {'NAME'}

    type = . TYPE_LIST OP_LT type OP_GT
    LA: {'NAME'}

    type = . TYPE_MAP OP_LT type COMMA type OP_GT
    LA: {'NAME'}

    type = . TYPE_SET OP_LT type OP_GT
    LA: {'NAME'}

    type = . TYPE_STR
    LA: {'NAME'}

    type = . TYPE_INT
    LA: {'NAME'}

    type = . TYPE_FLOAT
    LA: {'NAME'}

    type = . TYPE_BOOL
    LA: {'NAME'}

    type = . KW_NULL
    LA: {'NAME'}

    type = . NAME
    LA: {'NAME'}


  Transitions:
    Symbol: type -> Node#282
    Symbol: NAME -> Node#21
    Symbol: TYPE_ARRAY -> Node#22
    Symbol: TYPE_LIST -> Node#23
    Symbol: TYPE_MAP -> Node#24
    Symbol: TYPE_SET -> Node#25
    Symbol: TYPE_STR -> Node#26
    Symbol: TYPE_INT -> Node#27
    Symbol: TYPE_FLOAT -> Node#28
    Symbol: TYPE_BOOL -> Node#29
    Symbol: KW_NULL -> Node#30

Node#269
  Rules:
    linear_comprehension = expression KW_FOR name KW_IN expression .
    LA: {'CLOSE_CURLY', 'CLOSE_SQUARE'}

    linear_comprehension = expression KW_FOR name KW_IN expression . KW_IF expression
    LA: {'CLOSE_CURLY', 'CLOSE_SQUARE'}

    expression = expression . KW_OR log_and_expr
    LA: {'CLOSE_CURLY', 'KW_OR', 'CLOSE_SQUARE', 'KW_IF'}


  Transitions:
    Symbol: KW_IF -> Node#283
    Symbol: KW_OR -> Node#105

Node#270
  Rules:
    comprehension = OPEN_CURLY expression COLON expression KW_FOR name . KW_IN expression CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_CURLY', 'OP_MINUS', 'OP_AND_ASSIGN', 'CLOSE_PAREN', 'OP_XOR_ASSIGN', 'KW_AND', 'KW_OR', 'OP_MOD_ASSIGN', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_ADD_ASSIGN', 'OP_OR_ASSIGN', 'OP_DOT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_NEQ', 'OP_PLUS', 'OP_SUB_ASSIGN', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_ASSIGN', 'KW_ELSE', 'OP_BIT_XOR', 'OP_BIT_OR', 'COMMA', 'OP_BIT_AND', 'OP_GT', 'OP_MUL_ASSIGN', 'KW_TO', 'OP_LTEQ'}

    comprehension = OPEN_CURLY expression COLON expression KW_FOR name . KW_IN expression KW_IF expression CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_CURLY', 'OP_MINUS', 'OP_AND_ASSIGN', 'CLOSE_PAREN', 'OP_XOR_ASSIGN', 'KW_AND', 'KW_OR', 'OP_MOD_ASSIGN', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_ADD_ASSIGN', 'OP_OR_ASSIGN', 'OP_DOT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_NEQ', 'OP_PLUS', 'OP_SUB_ASSIGN', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_ASSIGN', 'KW_ELSE', 'OP_BIT_XOR', 'OP_BIT_OR', 'COMMA', 'OP_BIT_AND', 'OP_GT', 'OP_MUL_ASSIGN', 'KW_TO', 'OP_LTEQ'}


  Transitions:
    Symbol: KW_IN -> Node#284

Node#271
  Rules:
    map_expression = expression COLON expression .
    LA: {'COMMA', 'CLOSE_CURLY'}

    expression = expression . KW_OR log_and_expr
    LA: {'COMMA', 'CLOSE_CURLY', 'KW_OR'}


  Transitions:
    Symbol: KW_OR -> Node#105

Node#272
  Rules:
    if_statement = KW_IF expression body . else_statement
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    else_statement = . KW_ELSE body
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    else_statement = . KW_ELSE if_statement
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    else_statement = .
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}


  Transitions:
    Symbol: else_statement -> Node#285
    Symbol: KW_ELSE -> Node#286

Node#273
  Rules:
    while_statement = KW_WHILE expression body .
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}


Node#274
  Rules:
    do_while_statement = KW_DO body KW_WHILE . expression SEMICOLON
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    expression = . expression KW_OR log_and_expr
    LA: {'KW_OR', 'SEMICOLON'}

    expression = . log_and_expr
    LA: {'KW_OR', 'SEMICOLON'}

    log_and_expr = . log_and_expr KW_AND bit_or_expr
    LA: {'KW_OR', 'SEMICOLON', 'KW_AND'}

    log_and_expr = . bit_or_expr
    LA: {'KW_OR', 'SEMICOLON', 'KW_AND'}

    bit_or_expr = . bit_or_expr OP_BIT_OR bit_xor_expr
    LA: {'KW_OR', 'SEMICOLON', 'OP_BIT_OR', 'KW_AND'}

    bit_or_expr = . bit_xor_expr
    LA: {'KW_OR', 'SEMICOLON', 'OP_BIT_OR', 'KW_AND'}

    bit_xor_expr = . bit_xor_expr OP_BIT_XOR bit_and_expr
    LA: {'KW_OR', 'OP_BIT_OR', 'KW_AND', 'SEMICOLON', 'OP_BIT_XOR'}

    bit_xor_expr = . bit_and_expr
    LA: {'KW_OR', 'OP_BIT_OR', 'KW_AND', 'SEMICOLON', 'OP_BIT_XOR'}

    bit_and_expr = . bit_and_expr OP_BIT_AND equ_expr
    LA: {'KW_OR', 'OP_BIT_OR', 'OP_BIT_AND', 'KW_AND', 'SEMICOLON', 'OP_BIT_XOR'}

    bit_and_expr = . equ_expr
    LA: {'KW_OR', 'OP_BIT_OR', 'OP_BIT_AND', 'KW_AND', 'SEMICOLON', 'OP_BIT_XOR'}

    equ_expr = . equ_expr OP_EQ comp_expr
    LA: {'OP_NEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_BIT_AND', 'KW_AND', 'SEMICOLON', 'OP_BIT_XOR'}

    equ_expr = . equ_expr OP_NEQ comp_expr
    LA: {'OP_NEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_BIT_AND', 'KW_AND', 'SEMICOLON', 'OP_BIT_XOR'}

    equ_expr = . comp_expr
    LA: {'OP_NEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_BIT_AND', 'KW_AND', 'SEMICOLON', 'OP_BIT_XOR'}

    comp_expr = . comp_expr OP_LT math_expr
    LA: {'OP_BIT_AND', 'KW_AND', 'SEMICOLON', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    comp_expr = . comp_expr OP_LTEQ math_expr
    LA: {'OP_BIT_AND', 'KW_AND', 'SEMICOLON', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    comp_expr = . comp_expr OP_GT math_expr
    LA: {'OP_BIT_AND', 'KW_AND', 'SEMICOLON', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    comp_expr = . comp_expr OP_GTEQ math_expr
    LA: {'OP_BIT_AND', 'KW_AND', 'SEMICOLON', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    comp_expr = . math_expr
    LA: {'OP_BIT_AND', 'KW_AND', 'SEMICOLON', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    math_expr = . math_expr OP_PLUS term
    LA: {'OP_BIT_AND', 'OP_PLUS', 'KW_AND', 'SEMICOLON', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'OP_MINUS', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    math_expr = . math_expr OP_MINUS term
    LA: {'OP_BIT_AND', 'OP_PLUS', 'KW_AND', 'SEMICOLON', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'OP_MINUS', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    math_expr = . term
    LA: {'OP_BIT_AND', 'OP_PLUS', 'KW_AND', 'SEMICOLON', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'OP_MINUS', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    term = . term OP_STAR factor
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    term = . term OP_SLASH factor
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    term = . term OP_MOD factor
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    term = . factor
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    factor = . factor OP_POW pow_term
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    factor = . pow_term
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    pow_term = . OP_MINUS inc_term
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    pow_term = . KW_NOT inc_term
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    pow_term = . inc_term
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . OP_INC bottom_val
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . bottom_val OP_INC
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . OP_DEC bottom_val
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . bottom_val OP_DEC
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . bottom_val
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    bottom_val = . bottom_val OPEN_PAREN expr_list CLOSE_PAREN
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . bottom_val OPEN_PAREN CLOSE_PAREN
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . bottom_val OP_DOT name
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . bottom_val OPEN_SQUARE expression CLOSE_SQUARE
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . comprehension
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . literal
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . name
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . OPEN_PAREN expression CLOSE_PAREN
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    comprehension = . OPEN_SQUARE linear_comprehension CLOSE_SQUARE
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    comprehension = . OPEN_CURLY linear_comprehension CLOSE_CURLY
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression CLOSE_CURLY
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression KW_IF expression CLOSE_CURLY
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . LIT_INT
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . LIT_FLOAT
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . lit_set
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . lit_string
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . lit_list
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . lit_map
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . KW_NULL
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    name = . NAME
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    lit_set = . OPEN_CURLY expr_list CLOSE_CURLY
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    lit_string = . DOUBLE_QUOTE_STR
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    lit_string = . SINGLE_QUOTE_STR
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    lit_list = . OPEN_SQUARE expr_list CLOSE_SQUARE
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    lit_map = . OPEN_CURLY map_list CLOSE_CURLY
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}


  Transitions:
    Symbol: expression -> Node#287
    Symbol: log_and_expr -> Node#51
    Symbol: bit_or_expr -> Node#52
    Symbol: bit_xor_expr -> Node#53
    Symbol: bit_and_expr -> Node#54
    Symbol: equ_expr -> Node#55
    Symbol: comp_expr -> Node#56
    Symbol: math_expr -> Node#57
    Symbol: term -> Node#58
    Symbol: factor -> Node#59
    Symbol: pow_term -> Node#60
    Symbol: OP_MINUS -> Node#61
    Symbol: KW_NOT -> Node#62
    Symbol: inc_term -> Node#63
    Symbol: OP_INC -> Node#64
    Symbol: bottom_val -> Node#65
    Symbol: OP_DEC -> Node#66
    Symbol: comprehension -> Node#67
    Symbol: literal -> Node#68
    Symbol: name -> Node#69
    Symbol: OPEN_PAREN -> Node#70
    Symbol: OPEN_SQUARE -> Node#71
    Symbol: OPEN_CURLY -> Node#72
    Symbol: LIT_INT -> Node#73
    Symbol: LIT_FLOAT -> Node#74
    Symbol: lit_set -> Node#75
    Symbol: lit_string -> Node#76
    Symbol: lit_list -> Node#77
    Symbol: lit_map -> Node#78
    Symbol: KW_NULL -> Node#79
    Symbol: NAME -> Node#80
    Symbol: DOUBLE_QUOTE_STR -> Node#81
    Symbol: SINGLE_QUOTE_STR -> Node#82

Node#275
  Rules:
    for_statement = KW_FOR name KW_IN . expression body
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    for_statement = KW_FOR name KW_IN . expression KW_TO expression body
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    expression = . expression KW_OR log_and_expr
    LA: {'KW_TO', 'KW_OR', 'OPEN_CURLY'}

    expression = . log_and_expr
    LA: {'KW_TO', 'KW_OR', 'OPEN_CURLY'}

    log_and_expr = . log_and_expr KW_AND bit_or_expr
    LA: {'KW_TO', 'KW_AND', 'KW_OR', 'OPEN_CURLY'}

    log_and_expr = . bit_or_expr
    LA: {'KW_TO', 'KW_AND', 'KW_OR', 'OPEN_CURLY'}

    bit_or_expr = . bit_or_expr OP_BIT_OR bit_xor_expr
    LA: {'KW_OR', 'OP_BIT_OR', 'OPEN_CURLY', 'KW_TO', 'KW_AND'}

    bit_or_expr = . bit_xor_expr
    LA: {'KW_OR', 'OP_BIT_OR', 'OPEN_CURLY', 'KW_TO', 'KW_AND'}

    bit_xor_expr = . bit_xor_expr OP_BIT_XOR bit_and_expr
    LA: {'KW_OR', 'OP_BIT_OR', 'OPEN_CURLY', 'KW_TO', 'KW_AND', 'OP_BIT_XOR'}

    bit_xor_expr = . bit_and_expr
    LA: {'KW_OR', 'OP_BIT_OR', 'OPEN_CURLY', 'KW_TO', 'KW_AND', 'OP_BIT_XOR'}

    bit_and_expr = . bit_and_expr OP_BIT_AND equ_expr
    LA: {'KW_OR', 'OP_BIT_OR', 'OPEN_CURLY', 'OP_BIT_AND', 'KW_TO', 'KW_AND', 'OP_BIT_XOR'}

    bit_and_expr = . equ_expr
    LA: {'KW_OR', 'OP_BIT_OR', 'OPEN_CURLY', 'OP_BIT_AND', 'KW_TO', 'KW_AND', 'OP_BIT_XOR'}

    equ_expr = . equ_expr OP_EQ comp_expr
    LA: {'OP_BIT_AND', 'KW_TO', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OPEN_CURLY', 'OP_EQ', 'OP_NEQ'}

    equ_expr = . equ_expr OP_NEQ comp_expr
    LA: {'OP_BIT_AND', 'KW_TO', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OPEN_CURLY', 'OP_EQ', 'OP_NEQ'}

    equ_expr = . comp_expr
    LA: {'OP_BIT_AND', 'KW_TO', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OPEN_CURLY', 'OP_EQ', 'OP_NEQ'}

    comp_expr = . comp_expr OP_LT math_expr
    LA: {'OP_BIT_AND', 'KW_TO', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    comp_expr = . comp_expr OP_LTEQ math_expr
    LA: {'OP_BIT_AND', 'KW_TO', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    comp_expr = . comp_expr OP_GT math_expr
    LA: {'OP_BIT_AND', 'KW_TO', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    comp_expr = . comp_expr OP_GTEQ math_expr
    LA: {'OP_BIT_AND', 'KW_TO', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    comp_expr = . math_expr
    LA: {'OP_BIT_AND', 'KW_TO', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    math_expr = . math_expr OP_PLUS term
    LA: {'OP_BIT_AND', 'KW_TO', 'OP_PLUS', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_MINUS', 'KW_OR', 'OP_BIT_OR', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    math_expr = . math_expr OP_MINUS term
    LA: {'OP_BIT_AND', 'KW_TO', 'OP_PLUS', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_MINUS', 'KW_OR', 'OP_BIT_OR', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    math_expr = . term
    LA: {'OP_BIT_AND', 'KW_TO', 'OP_PLUS', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_MINUS', 'KW_OR', 'OP_BIT_OR', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    term = . term OP_STAR factor
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_TO', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    term = . term OP_SLASH factor
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_TO', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    term = . term OP_MOD factor
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_TO', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    term = . factor
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_TO', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    factor = . factor OP_POW pow_term
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_TO', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    factor = . pow_term
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_TO', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    pow_term = . OP_MINUS inc_term
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_TO', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    pow_term = . KW_NOT inc_term
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_TO', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    pow_term = . inc_term
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_TO', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . OP_INC bottom_val
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_TO', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . bottom_val OP_INC
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_TO', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . OP_DEC bottom_val
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_TO', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . bottom_val OP_DEC
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_TO', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . bottom_val
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_TO', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    bottom_val = . bottom_val OPEN_PAREN expr_list CLOSE_PAREN
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . bottom_val OPEN_PAREN CLOSE_PAREN
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . bottom_val OP_DOT name
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . bottom_val OPEN_SQUARE expression CLOSE_SQUARE
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . comprehension
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . literal
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . name
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . OPEN_PAREN expression CLOSE_PAREN
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    comprehension = . OPEN_SQUARE linear_comprehension CLOSE_SQUARE
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    comprehension = . OPEN_CURLY linear_comprehension CLOSE_CURLY
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression CLOSE_CURLY
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression KW_IF expression CLOSE_CURLY
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . LIT_INT
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . LIT_FLOAT
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . lit_set
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . lit_string
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . lit_list
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . lit_map
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . KW_NULL
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    name = . NAME
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    lit_set = . OPEN_CURLY expr_list CLOSE_CURLY
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    lit_string = . DOUBLE_QUOTE_STR
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    lit_string = . SINGLE_QUOTE_STR
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    lit_list = . OPEN_SQUARE expr_list CLOSE_SQUARE
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    lit_map = . OPEN_CURLY map_list CLOSE_CURLY
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_TO', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}


  Transitions:
    Symbol: expression -> Node#288
    Symbol: log_and_expr -> Node#51
    Symbol: bit_or_expr -> Node#52
    Symbol: bit_xor_expr -> Node#53
    Symbol: bit_and_expr -> Node#54
    Symbol: equ_expr -> Node#55
    Symbol: comp_expr -> Node#56
    Symbol: math_expr -> Node#57
    Symbol: term -> Node#58
    Symbol: factor -> Node#59
    Symbol: pow_term -> Node#60
    Symbol: OP_MINUS -> Node#61
    Symbol: KW_NOT -> Node#62
    Symbol: inc_term -> Node#63
    Symbol: OP_INC -> Node#64
    Symbol: bottom_val -> Node#65
    Symbol: OP_DEC -> Node#66
    Symbol: comprehension -> Node#67
    Symbol: literal -> Node#68
    Symbol: name -> Node#69
    Symbol: OPEN_PAREN -> Node#70
    Symbol: OPEN_SQUARE -> Node#71
    Symbol: OPEN_CURLY -> Node#72
    Symbol: LIT_INT -> Node#73
    Symbol: LIT_FLOAT -> Node#74
    Symbol: lit_set -> Node#75
    Symbol: lit_string -> Node#76
    Symbol: lit_list -> Node#77
    Symbol: lit_map -> Node#78
    Symbol: KW_NULL -> Node#79
    Symbol: NAME -> Node#80
    Symbol: DOUBLE_QUOTE_STR -> Node#81
    Symbol: SINGLE_QUOTE_STR -> Node#82

Node#276
  Rules:
    try_catch_statement = KW_TRY body catch_statements .
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}


Node#277
  Rules:
    catch_statements = catch_statement . catch_statements
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    catch_statements = catch_statement .
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    catch_statements = . catch_statement catch_statements
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    catch_statements = . catch_statement
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    catch_statement = . KW_CATCH type name body
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'KW_CATCH', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}


  Transitions:
    Symbol: catch_statements -> Node#289
    Symbol: catch_statement -> Node#277
    Symbol: KW_CATCH -> Node#278

Node#278
  Rules:
    catch_statement = KW_CATCH . type name body
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'KW_CATCH', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    type = . TYPE_ARRAY OP_LT type OP_GT
    LA: {'NAME'}

    type = . TYPE_LIST OP_LT type OP_GT
    LA: {'NAME'}

    type = . TYPE_MAP OP_LT type COMMA type OP_GT
    LA: {'NAME'}

    type = . TYPE_SET OP_LT type OP_GT
    LA: {'NAME'}

    type = . TYPE_STR
    LA: {'NAME'}

    type = . TYPE_INT
    LA: {'NAME'}

    type = . TYPE_FLOAT
    LA: {'NAME'}

    type = . TYPE_BOOL
    LA: {'NAME'}

    type = . KW_NULL
    LA: {'NAME'}

    type = . NAME
    LA: {'NAME'}


  Transitions:
    Symbol: type -> Node#290
    Symbol: TYPE_ARRAY -> Node#22
    Symbol: TYPE_LIST -> Node#23
    Symbol: TYPE_MAP -> Node#24
    Symbol: TYPE_SET -> Node#25
    Symbol: TYPE_STR -> Node#26
    Symbol: TYPE_INT -> Node#27
    Symbol: TYPE_FLOAT -> Node#28
    Symbol: TYPE_BOOL -> Node#29
    Symbol: KW_NULL -> Node#30
    Symbol: NAME -> Node#84

Node#279
  Rules:
    assignment = bottom_val assign_op assign_expr .
    LA: {'SEMICOLON'}


Node#280
  Rules:
    assign_expr = expression .
    LA: {'SEMICOLON'}

    assign_expr = expression . KW_IF expression KW_ELSE expression
    LA: {'SEMICOLON'}

    expression = expression . KW_OR log_and_expr
    LA: {'KW_OR', 'SEMICOLON', 'KW_IF'}


  Transitions:
    Symbol: KW_IF -> Node#291
    Symbol: KW_OR -> Node#105

Node#281
  Rules:
    assignment = type name assign_op . assign_expr
    LA: {'SEMICOLON'}

    assign_expr = . expression
    LA: {'SEMICOLON'}

    assign_expr = . expression KW_IF expression KW_ELSE expression
    LA: {'SEMICOLON'}

    expression = . expression KW_OR log_and_expr
    LA: {'KW_OR', 'SEMICOLON', 'KW_IF'}

    expression = . log_and_expr
    LA: {'KW_OR', 'SEMICOLON', 'KW_IF'}

    log_and_expr = . log_and_expr KW_AND bit_or_expr
    LA: {'KW_OR', 'SEMICOLON', 'KW_IF', 'KW_AND'}

    log_and_expr = . bit_or_expr
    LA: {'KW_OR', 'SEMICOLON', 'KW_IF', 'KW_AND'}

    bit_or_expr = . bit_or_expr OP_BIT_OR bit_xor_expr
    LA: {'KW_OR', 'OP_BIT_OR', 'KW_IF', 'KW_AND', 'SEMICOLON'}

    bit_or_expr = . bit_xor_expr
    LA: {'KW_OR', 'OP_BIT_OR', 'KW_IF', 'KW_AND', 'SEMICOLON'}

    bit_xor_expr = . bit_xor_expr OP_BIT_XOR bit_and_expr
    LA: {'KW_OR', 'OP_BIT_OR', 'KW_IF', 'KW_AND', 'SEMICOLON', 'OP_BIT_XOR'}

    bit_xor_expr = . bit_and_expr
    LA: {'KW_OR', 'OP_BIT_OR', 'KW_IF', 'KW_AND', 'SEMICOLON', 'OP_BIT_XOR'}

    bit_and_expr = . bit_and_expr OP_BIT_AND equ_expr
    LA: {'KW_OR', 'OP_BIT_OR', 'KW_IF', 'OP_BIT_AND', 'KW_AND', 'SEMICOLON', 'OP_BIT_XOR'}

    bit_and_expr = . equ_expr
    LA: {'KW_OR', 'OP_BIT_OR', 'KW_IF', 'OP_BIT_AND', 'KW_AND', 'SEMICOLON', 'OP_BIT_XOR'}

    equ_expr = . equ_expr OP_EQ comp_expr
    LA: {'OP_BIT_AND', 'KW_AND', 'SEMICOLON', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'KW_IF', 'OP_EQ', 'OP_NEQ'}

    equ_expr = . equ_expr OP_NEQ comp_expr
    LA: {'OP_BIT_AND', 'KW_AND', 'SEMICOLON', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'KW_IF', 'OP_EQ', 'OP_NEQ'}

    equ_expr = . comp_expr
    LA: {'OP_BIT_AND', 'KW_AND', 'SEMICOLON', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'KW_IF', 'OP_EQ', 'OP_NEQ'}

    comp_expr = . comp_expr OP_LT math_expr
    LA: {'OP_BIT_AND', 'KW_AND', 'SEMICOLON', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'KW_OR', 'OP_BIT_OR', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    comp_expr = . comp_expr OP_LTEQ math_expr
    LA: {'OP_BIT_AND', 'KW_AND', 'SEMICOLON', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'KW_OR', 'OP_BIT_OR', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    comp_expr = . comp_expr OP_GT math_expr
    LA: {'OP_BIT_AND', 'KW_AND', 'SEMICOLON', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'KW_OR', 'OP_BIT_OR', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    comp_expr = . comp_expr OP_GTEQ math_expr
    LA: {'OP_BIT_AND', 'KW_AND', 'SEMICOLON', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'KW_OR', 'OP_BIT_OR', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    comp_expr = . math_expr
    LA: {'OP_BIT_AND', 'KW_AND', 'SEMICOLON', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'KW_OR', 'OP_BIT_OR', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    math_expr = . math_expr OP_PLUS term
    LA: {'OP_BIT_AND', 'OP_PLUS', 'KW_AND', 'SEMICOLON', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'OP_MINUS', 'KW_OR', 'OP_BIT_OR', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    math_expr = . math_expr OP_MINUS term
    LA: {'OP_BIT_AND', 'OP_PLUS', 'KW_AND', 'SEMICOLON', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'OP_MINUS', 'KW_OR', 'OP_BIT_OR', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    math_expr = . term
    LA: {'OP_BIT_AND', 'OP_PLUS', 'KW_AND', 'SEMICOLON', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'OP_MINUS', 'KW_OR', 'OP_BIT_OR', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    term = . term OP_STAR factor
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    term = . term OP_SLASH factor
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    term = . term OP_MOD factor
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    term = . factor
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    factor = . factor OP_POW pow_term
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    factor = . pow_term
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    pow_term = . OP_MINUS inc_term
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    pow_term = . KW_NOT inc_term
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    pow_term = . inc_term
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . OP_INC bottom_val
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . bottom_val OP_INC
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . OP_DEC bottom_val
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . bottom_val OP_DEC
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . bottom_val
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    bottom_val = . bottom_val OPEN_PAREN expr_list CLOSE_PAREN
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . bottom_val OPEN_PAREN CLOSE_PAREN
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . bottom_val OP_DOT name
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . bottom_val OPEN_SQUARE expression CLOSE_SQUARE
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . comprehension
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . literal
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . name
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . OPEN_PAREN expression CLOSE_PAREN
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    comprehension = . OPEN_SQUARE linear_comprehension CLOSE_SQUARE
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    comprehension = . OPEN_CURLY linear_comprehension CLOSE_CURLY
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression CLOSE_CURLY
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression KW_IF expression CLOSE_CURLY
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . LIT_INT
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . LIT_FLOAT
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . lit_set
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . lit_string
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . lit_list
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . lit_map
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . KW_NULL
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    name = . NAME
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    lit_set = . OPEN_CURLY expr_list CLOSE_CURLY
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    lit_string = . DOUBLE_QUOTE_STR
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    lit_string = . SINGLE_QUOTE_STR
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    lit_list = . OPEN_SQUARE expr_list CLOSE_SQUARE
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    lit_map = . OPEN_CURLY map_list CLOSE_CURLY
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}


  Transitions:
    Symbol: assign_expr -> Node#292
    Symbol: expression -> Node#280
    Symbol: log_and_expr -> Node#51
    Symbol: bit_or_expr -> Node#52
    Symbol: bit_xor_expr -> Node#53
    Symbol: bit_and_expr -> Node#54
    Symbol: equ_expr -> Node#55
    Symbol: comp_expr -> Node#56
    Symbol: math_expr -> Node#57
    Symbol: term -> Node#58
    Symbol: factor -> Node#59
    Symbol: pow_term -> Node#60
    Symbol: OP_MINUS -> Node#61
    Symbol: KW_NOT -> Node#62
    Symbol: inc_term -> Node#63
    Symbol: OP_INC -> Node#64
    Symbol: bottom_val -> Node#65
    Symbol: OP_DEC -> Node#66
    Symbol: comprehension -> Node#67
    Symbol: literal -> Node#68
    Symbol: name -> Node#69
    Symbol: OPEN_PAREN -> Node#70
    Symbol: OPEN_SQUARE -> Node#71
    Symbol: OPEN_CURLY -> Node#72
    Symbol: LIT_INT -> Node#73
    Symbol: LIT_FLOAT -> Node#74
    Symbol: lit_set -> Node#75
    Symbol: lit_string -> Node#76
    Symbol: lit_list -> Node#77
    Symbol: lit_map -> Node#78
    Symbol: KW_NULL -> Node#79
    Symbol: NAME -> Node#80
    Symbol: DOUBLE_QUOTE_STR -> Node#81
    Symbol: SINGLE_QUOTE_STR -> Node#82

Node#282
  Rules:
    var_definition = access_modifier special_mod type . NAME SEMICOLON
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'CLOSE_CURLY', 'TYPE_MAP', 'NAME', 'TYPE_BOOL', 'KW_STATIC', 'TYPE_STR', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'ACC_PUBLIC', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    var_definition = access_modifier special_mod type . NAME OP_ASSIGN expression SEMICOLON
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'CLOSE_CURLY', 'TYPE_MAP', 'NAME', 'TYPE_BOOL', 'KW_STATIC', 'TYPE_STR', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'ACC_PUBLIC', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}


  Transitions:
    Symbol: NAME -> Node#293

Node#283
  Rules:
    linear_comprehension = expression KW_FOR name KW_IN expression KW_IF . expression
    LA: {'CLOSE_CURLY', 'CLOSE_SQUARE'}

    expression = . expression KW_OR log_and_expr
    LA: {'CLOSE_CURLY', 'KW_OR', 'CLOSE_SQUARE'}

    expression = . log_and_expr
    LA: {'CLOSE_CURLY', 'KW_OR', 'CLOSE_SQUARE'}

    log_and_expr = . log_and_expr KW_AND bit_or_expr
    LA: {'KW_AND', 'CLOSE_CURLY', 'KW_OR', 'CLOSE_SQUARE'}

    log_and_expr = . bit_or_expr
    LA: {'KW_AND', 'CLOSE_CURLY', 'KW_OR', 'CLOSE_SQUARE'}

    bit_or_expr = . bit_or_expr OP_BIT_OR bit_xor_expr
    LA: {'CLOSE_CURLY', 'KW_OR', 'OP_BIT_OR', 'KW_AND', 'CLOSE_SQUARE'}

    bit_or_expr = . bit_xor_expr
    LA: {'CLOSE_CURLY', 'KW_OR', 'OP_BIT_OR', 'KW_AND', 'CLOSE_SQUARE'}

    bit_xor_expr = . bit_xor_expr OP_BIT_XOR bit_and_expr
    LA: {'CLOSE_CURLY', 'KW_OR', 'OP_BIT_OR', 'KW_AND', 'CLOSE_SQUARE', 'OP_BIT_XOR'}

    bit_xor_expr = . bit_and_expr
    LA: {'CLOSE_CURLY', 'KW_OR', 'OP_BIT_OR', 'KW_AND', 'CLOSE_SQUARE', 'OP_BIT_XOR'}

    bit_and_expr = . bit_and_expr OP_BIT_AND equ_expr
    LA: {'CLOSE_CURLY', 'KW_OR', 'OP_BIT_OR', 'OP_BIT_AND', 'KW_AND', 'CLOSE_SQUARE', 'OP_BIT_XOR'}

    bit_and_expr = . equ_expr
    LA: {'CLOSE_CURLY', 'KW_OR', 'OP_BIT_OR', 'OP_BIT_AND', 'KW_AND', 'CLOSE_SQUARE', 'OP_BIT_XOR'}

    equ_expr = . equ_expr OP_EQ comp_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'KW_AND', 'CLOSE_SQUARE', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_NEQ'}

    equ_expr = . equ_expr OP_NEQ comp_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'KW_AND', 'CLOSE_SQUARE', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_NEQ'}

    equ_expr = . comp_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'KW_AND', 'CLOSE_SQUARE', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_NEQ'}

    comp_expr = . comp_expr OP_LT math_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'KW_AND', 'CLOSE_SQUARE', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    comp_expr = . comp_expr OP_LTEQ math_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'KW_AND', 'CLOSE_SQUARE', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    comp_expr = . comp_expr OP_GT math_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'KW_AND', 'CLOSE_SQUARE', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    comp_expr = . comp_expr OP_GTEQ math_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'KW_AND', 'CLOSE_SQUARE', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    comp_expr = . math_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'KW_AND', 'CLOSE_SQUARE', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    math_expr = . math_expr OP_PLUS term
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'OP_PLUS', 'KW_AND', 'CLOSE_SQUARE', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'OP_MINUS', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    math_expr = . math_expr OP_MINUS term
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'OP_PLUS', 'KW_AND', 'CLOSE_SQUARE', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'OP_MINUS', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    math_expr = . term
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'OP_PLUS', 'KW_AND', 'CLOSE_SQUARE', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'OP_MINUS', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    term = . term OP_STAR factor
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'CLOSE_SQUARE', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    term = . term OP_SLASH factor
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'CLOSE_SQUARE', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    term = . term OP_MOD factor
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'CLOSE_SQUARE', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    term = . factor
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'CLOSE_SQUARE', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    factor = . factor OP_POW pow_term
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'CLOSE_SQUARE', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    factor = . pow_term
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'CLOSE_SQUARE', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    pow_term = . OP_MINUS inc_term
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'CLOSE_SQUARE', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    pow_term = . KW_NOT inc_term
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'CLOSE_SQUARE', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    pow_term = . inc_term
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'CLOSE_SQUARE', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . OP_INC bottom_val
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'CLOSE_SQUARE', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . bottom_val OP_INC
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'CLOSE_SQUARE', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . OP_DEC bottom_val
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'CLOSE_SQUARE', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . bottom_val OP_DEC
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'CLOSE_SQUARE', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . bottom_val
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'CLOSE_SQUARE', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    bottom_val = . bottom_val OPEN_PAREN expr_list CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'CLOSE_SQUARE', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . bottom_val OPEN_PAREN CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'CLOSE_SQUARE', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . bottom_val OP_DOT name
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'CLOSE_SQUARE', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . bottom_val OPEN_SQUARE expression CLOSE_SQUARE
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'CLOSE_SQUARE', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . comprehension
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'CLOSE_SQUARE', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . literal
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'CLOSE_SQUARE', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . name
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'CLOSE_SQUARE', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . OPEN_PAREN expression CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'CLOSE_SQUARE', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    comprehension = . OPEN_SQUARE linear_comprehension CLOSE_SQUARE
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'CLOSE_SQUARE', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    comprehension = . OPEN_CURLY linear_comprehension CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'CLOSE_SQUARE', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'CLOSE_SQUARE', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression KW_IF expression CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'CLOSE_SQUARE', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . LIT_INT
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'CLOSE_SQUARE', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . LIT_FLOAT
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'CLOSE_SQUARE', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . lit_set
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'CLOSE_SQUARE', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . lit_string
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'CLOSE_SQUARE', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . lit_list
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'CLOSE_SQUARE', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . lit_map
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'CLOSE_SQUARE', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . KW_NULL
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'CLOSE_SQUARE', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    name = . NAME
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'CLOSE_SQUARE', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    lit_set = . OPEN_CURLY expr_list CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'CLOSE_SQUARE', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    lit_string = . DOUBLE_QUOTE_STR
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'CLOSE_SQUARE', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    lit_string = . SINGLE_QUOTE_STR
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'CLOSE_SQUARE', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    lit_list = . OPEN_SQUARE expr_list CLOSE_SQUARE
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'CLOSE_SQUARE', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    lit_map = . OPEN_CURLY map_list CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'CLOSE_SQUARE', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}


  Transitions:
    Symbol: expression -> Node#294
    Symbol: log_and_expr -> Node#51
    Symbol: bit_or_expr -> Node#52
    Symbol: bit_xor_expr -> Node#53
    Symbol: bit_and_expr -> Node#54
    Symbol: equ_expr -> Node#55
    Symbol: comp_expr -> Node#56
    Symbol: math_expr -> Node#57
    Symbol: term -> Node#58
    Symbol: factor -> Node#59
    Symbol: pow_term -> Node#60
    Symbol: OP_MINUS -> Node#61
    Symbol: KW_NOT -> Node#62
    Symbol: inc_term -> Node#63
    Symbol: OP_INC -> Node#64
    Symbol: bottom_val -> Node#65
    Symbol: OP_DEC -> Node#66
    Symbol: comprehension -> Node#67
    Symbol: literal -> Node#68
    Symbol: name -> Node#69
    Symbol: OPEN_PAREN -> Node#70
    Symbol: OPEN_SQUARE -> Node#71
    Symbol: OPEN_CURLY -> Node#72
    Symbol: LIT_INT -> Node#73
    Symbol: LIT_FLOAT -> Node#74
    Symbol: lit_set -> Node#75
    Symbol: lit_string -> Node#76
    Symbol: lit_list -> Node#77
    Symbol: lit_map -> Node#78
    Symbol: KW_NULL -> Node#79
    Symbol: NAME -> Node#80
    Symbol: DOUBLE_QUOTE_STR -> Node#81
    Symbol: SINGLE_QUOTE_STR -> Node#82

Node#284
  Rules:
    comprehension = OPEN_CURLY expression COLON expression KW_FOR name KW_IN . expression CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_CURLY', 'OP_MINUS', 'OP_AND_ASSIGN', 'CLOSE_PAREN', 'OP_XOR_ASSIGN', 'KW_AND', 'KW_OR', 'OP_MOD_ASSIGN', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_ADD_ASSIGN', 'OP_OR_ASSIGN', 'OP_DOT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_NEQ', 'OP_PLUS', 'OP_SUB_ASSIGN', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_ASSIGN', 'KW_ELSE', 'OP_BIT_XOR', 'OP_BIT_OR', 'COMMA', 'OP_BIT_AND', 'OP_GT', 'OP_MUL_ASSIGN', 'KW_TO', 'OP_LTEQ'}

    comprehension = OPEN_CURLY expression COLON expression KW_FOR name KW_IN . expression KW_IF expression CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_CURLY', 'OP_MINUS', 'OP_AND_ASSIGN', 'CLOSE_PAREN', 'OP_XOR_ASSIGN', 'KW_AND', 'KW_OR', 'OP_MOD_ASSIGN', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_ADD_ASSIGN', 'OP_OR_ASSIGN', 'OP_DOT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_NEQ', 'OP_PLUS', 'OP_SUB_ASSIGN', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_ASSIGN', 'KW_ELSE', 'OP_BIT_XOR', 'OP_BIT_OR', 'COMMA', 'OP_BIT_AND', 'OP_GT', 'OP_MUL_ASSIGN', 'KW_TO', 'OP_LTEQ'}

    expression = . expression KW_OR log_and_expr
    LA: {'CLOSE_CURLY', 'KW_OR', 'KW_IF'}

    expression = . log_and_expr
    LA: {'CLOSE_CURLY', 'KW_OR', 'KW_IF'}

    log_and_expr = . log_and_expr KW_AND bit_or_expr
    LA: {'KW_AND', 'CLOSE_CURLY', 'KW_OR', 'KW_IF'}

    log_and_expr = . bit_or_expr
    LA: {'KW_AND', 'CLOSE_CURLY', 'KW_OR', 'KW_IF'}

    bit_or_expr = . bit_or_expr OP_BIT_OR bit_xor_expr
    LA: {'CLOSE_CURLY', 'KW_OR', 'OP_BIT_OR', 'KW_IF', 'KW_AND'}

    bit_or_expr = . bit_xor_expr
    LA: {'CLOSE_CURLY', 'KW_OR', 'OP_BIT_OR', 'KW_IF', 'KW_AND'}

    bit_xor_expr = . bit_xor_expr OP_BIT_XOR bit_and_expr
    LA: {'CLOSE_CURLY', 'KW_OR', 'OP_BIT_OR', 'KW_IF', 'KW_AND', 'OP_BIT_XOR'}

    bit_xor_expr = . bit_and_expr
    LA: {'CLOSE_CURLY', 'KW_OR', 'OP_BIT_OR', 'KW_IF', 'KW_AND', 'OP_BIT_XOR'}

    bit_and_expr = . bit_and_expr OP_BIT_AND equ_expr
    LA: {'CLOSE_CURLY', 'KW_OR', 'OP_BIT_OR', 'KW_IF', 'OP_BIT_AND', 'KW_AND', 'OP_BIT_XOR'}

    bit_and_expr = . equ_expr
    LA: {'CLOSE_CURLY', 'KW_OR', 'OP_BIT_OR', 'KW_IF', 'OP_BIT_AND', 'KW_AND', 'OP_BIT_XOR'}

    equ_expr = . equ_expr OP_EQ comp_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'KW_IF', 'OP_EQ', 'OP_NEQ'}

    equ_expr = . equ_expr OP_NEQ comp_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'KW_IF', 'OP_EQ', 'OP_NEQ'}

    equ_expr = . comp_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'KW_AND', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'KW_IF', 'OP_EQ', 'OP_NEQ'}

    comp_expr = . comp_expr OP_LT math_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    comp_expr = . comp_expr OP_LTEQ math_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    comp_expr = . comp_expr OP_GT math_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    comp_expr = . comp_expr OP_GTEQ math_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    comp_expr = . math_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    math_expr = . math_expr OP_PLUS term
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'OP_PLUS', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_MINUS', 'KW_OR', 'OP_BIT_OR', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    math_expr = . math_expr OP_MINUS term
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'OP_PLUS', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_MINUS', 'KW_OR', 'OP_BIT_OR', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    math_expr = . term
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'OP_PLUS', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_MINUS', 'KW_OR', 'OP_BIT_OR', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    term = . term OP_STAR factor
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'OP_NEQ', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    term = . term OP_SLASH factor
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'OP_NEQ', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    term = . term OP_MOD factor
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'OP_NEQ', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    term = . factor
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'OP_NEQ', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    factor = . factor OP_POW pow_term
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'OP_NEQ', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    factor = . pow_term
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'OP_NEQ', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    pow_term = . OP_MINUS inc_term
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'OP_NEQ', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    pow_term = . KW_NOT inc_term
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'OP_NEQ', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    pow_term = . inc_term
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'OP_NEQ', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . OP_INC bottom_val
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'OP_NEQ', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . bottom_val OP_INC
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'OP_NEQ', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . OP_DEC bottom_val
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'OP_NEQ', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . bottom_val OP_DEC
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'OP_NEQ', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . bottom_val
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'OP_NEQ', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    bottom_val = . bottom_val OPEN_PAREN expr_list CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . bottom_val OPEN_PAREN CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . bottom_val OP_DOT name
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . bottom_val OPEN_SQUARE expression CLOSE_SQUARE
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . comprehension
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . literal
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . name
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . OPEN_PAREN expression CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    comprehension = . OPEN_SQUARE linear_comprehension CLOSE_SQUARE
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    comprehension = . OPEN_CURLY linear_comprehension CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression KW_IF expression CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . LIT_INT
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . LIT_FLOAT
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . lit_set
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . lit_string
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . lit_list
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . lit_map
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . KW_NULL
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    name = . NAME
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    lit_set = . OPEN_CURLY expr_list CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    lit_string = . DOUBLE_QUOTE_STR
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    lit_string = . SINGLE_QUOTE_STR
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    lit_list = . OPEN_SQUARE expr_list CLOSE_SQUARE
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    lit_map = . OPEN_CURLY map_list CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}


  Transitions:
    Symbol: expression -> Node#295
    Symbol: log_and_expr -> Node#51
    Symbol: bit_or_expr -> Node#52
    Symbol: bit_xor_expr -> Node#53
    Symbol: bit_and_expr -> Node#54
    Symbol: equ_expr -> Node#55
    Symbol: comp_expr -> Node#56
    Symbol: math_expr -> Node#57
    Symbol: term -> Node#58
    Symbol: factor -> Node#59
    Symbol: pow_term -> Node#60
    Symbol: OP_MINUS -> Node#61
    Symbol: KW_NOT -> Node#62
    Symbol: inc_term -> Node#63
    Symbol: OP_INC -> Node#64
    Symbol: bottom_val -> Node#65
    Symbol: OP_DEC -> Node#66
    Symbol: comprehension -> Node#67
    Symbol: literal -> Node#68
    Symbol: name -> Node#69
    Symbol: OPEN_PAREN -> Node#70
    Symbol: OPEN_SQUARE -> Node#71
    Symbol: OPEN_CURLY -> Node#72
    Symbol: LIT_INT -> Node#73
    Symbol: LIT_FLOAT -> Node#74
    Symbol: lit_set -> Node#75
    Symbol: lit_string -> Node#76
    Symbol: lit_list -> Node#77
    Symbol: lit_map -> Node#78
    Symbol: KW_NULL -> Node#79
    Symbol: NAME -> Node#80
    Symbol: DOUBLE_QUOTE_STR -> Node#81
    Symbol: SINGLE_QUOTE_STR -> Node#82

Node#285
  Rules:
    if_statement = KW_IF expression body else_statement .
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}


Node#286
  Rules:
    else_statement = KW_ELSE . body
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    else_statement = KW_ELSE . if_statement
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    body = . OPEN_CURLY statements CLOSE_CURLY
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    body = . OPEN_CURLY CLOSE_CURLY
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    if_statement = . KW_IF expression body else_statement
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}


  Transitions:
    Symbol: body -> Node#296
    Symbol: if_statement -> Node#297
    Symbol: OPEN_CURLY -> Node#192
    Symbol: KW_IF -> Node#224

Node#287
  Rules:
    do_while_statement = KW_DO body KW_WHILE expression . SEMICOLON
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    expression = expression . KW_OR log_and_expr
    LA: {'KW_OR', 'SEMICOLON'}


  Transitions:
    Symbol: SEMICOLON -> Node#298
    Symbol: KW_OR -> Node#105

Node#288
  Rules:
    for_statement = KW_FOR name KW_IN expression . body
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    for_statement = KW_FOR name KW_IN expression . KW_TO expression body
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    expression = expression . KW_OR log_and_expr
    LA: {'KW_TO', 'KW_OR', 'OPEN_CURLY'}

    body = . OPEN_CURLY statements CLOSE_CURLY
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    body = . OPEN_CURLY CLOSE_CURLY
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}


  Transitions:
    Symbol: body -> Node#299
    Symbol: KW_TO -> Node#300
    Symbol: KW_OR -> Node#105
    Symbol: OPEN_CURLY -> Node#192

Node#289
  Rules:
    catch_statements = catch_statement catch_statements .
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}


Node#290
  Rules:
    catch_statement = KW_CATCH type . name body
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'KW_CATCH', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    name = . NAME
    LA: {'OPEN_CURLY'}


  Transitions:
    Symbol: name -> Node#301
    Symbol: NAME -> Node#80

Node#291
  Rules:
    assign_expr = expression KW_IF . expression KW_ELSE expression
    LA: {'SEMICOLON'}

    expression = . expression KW_OR log_and_expr
    LA: {'KW_OR', 'KW_ELSE'}

    expression = . log_and_expr
    LA: {'KW_OR', 'KW_ELSE'}

    log_and_expr = . log_and_expr KW_AND bit_or_expr
    LA: {'KW_AND', 'KW_OR', 'KW_ELSE'}

    log_and_expr = . bit_or_expr
    LA: {'KW_AND', 'KW_OR', 'KW_ELSE'}

    bit_or_expr = . bit_or_expr OP_BIT_OR bit_xor_expr
    LA: {'KW_AND', 'KW_OR', 'OP_BIT_OR', 'KW_ELSE'}

    bit_or_expr = . bit_xor_expr
    LA: {'KW_AND', 'KW_OR', 'OP_BIT_OR', 'KW_ELSE'}

    bit_xor_expr = . bit_xor_expr OP_BIT_XOR bit_and_expr
    LA: {'KW_OR', 'OP_BIT_OR', 'KW_AND', 'OP_BIT_XOR', 'KW_ELSE'}

    bit_xor_expr = . bit_and_expr
    LA: {'KW_OR', 'OP_BIT_OR', 'KW_AND', 'OP_BIT_XOR', 'KW_ELSE'}

    bit_and_expr = . bit_and_expr OP_BIT_AND equ_expr
    LA: {'KW_OR', 'OP_BIT_OR', 'OP_BIT_AND', 'KW_AND', 'OP_BIT_XOR', 'KW_ELSE'}

    bit_and_expr = . equ_expr
    LA: {'KW_OR', 'OP_BIT_OR', 'OP_BIT_AND', 'KW_AND', 'OP_BIT_XOR', 'KW_ELSE'}

    equ_expr = . equ_expr OP_EQ comp_expr
    LA: {'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_BIT_AND', 'OP_NEQ', 'KW_AND', 'OP_BIT_XOR', 'KW_ELSE'}

    equ_expr = . equ_expr OP_NEQ comp_expr
    LA: {'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_BIT_AND', 'OP_NEQ', 'KW_AND', 'OP_BIT_XOR', 'KW_ELSE'}

    equ_expr = . comp_expr
    LA: {'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_BIT_AND', 'OP_NEQ', 'KW_AND', 'OP_BIT_XOR', 'KW_ELSE'}

    comp_expr = . comp_expr OP_LT math_expr
    LA: {'OP_BIT_AND', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT', 'KW_ELSE'}

    comp_expr = . comp_expr OP_LTEQ math_expr
    LA: {'OP_BIT_AND', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT', 'KW_ELSE'}

    comp_expr = . comp_expr OP_GT math_expr
    LA: {'OP_BIT_AND', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT', 'KW_ELSE'}

    comp_expr = . comp_expr OP_GTEQ math_expr
    LA: {'OP_BIT_AND', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT', 'KW_ELSE'}

    comp_expr = . math_expr
    LA: {'OP_BIT_AND', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT', 'KW_ELSE'}

    math_expr = . math_expr OP_PLUS term
    LA: {'OP_BIT_AND', 'OP_PLUS', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_MINUS', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT', 'KW_ELSE'}

    math_expr = . math_expr OP_MINUS term
    LA: {'OP_BIT_AND', 'OP_PLUS', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_MINUS', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT', 'KW_ELSE'}

    math_expr = . term
    LA: {'OP_BIT_AND', 'OP_PLUS', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_MINUS', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT', 'KW_ELSE'}

    term = . term OP_STAR factor
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'KW_ELSE', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    term = . term OP_SLASH factor
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'KW_ELSE', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    term = . term OP_MOD factor
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'KW_ELSE', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    term = . factor
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'KW_ELSE', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    factor = . factor OP_POW pow_term
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'KW_ELSE', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    factor = . pow_term
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'KW_ELSE', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    pow_term = . OP_MINUS inc_term
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'KW_ELSE', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    pow_term = . KW_NOT inc_term
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'KW_ELSE', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    pow_term = . inc_term
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'KW_ELSE', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . OP_INC bottom_val
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'KW_ELSE', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . bottom_val OP_INC
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'KW_ELSE', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . OP_DEC bottom_val
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'KW_ELSE', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . bottom_val OP_DEC
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'KW_ELSE', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . bottom_val
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'KW_ELSE', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    bottom_val = . bottom_val OPEN_PAREN expr_list CLOSE_PAREN
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_ELSE', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . bottom_val OPEN_PAREN CLOSE_PAREN
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_ELSE', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . bottom_val OP_DOT name
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_ELSE', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . bottom_val OPEN_SQUARE expression CLOSE_SQUARE
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_ELSE', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . comprehension
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_ELSE', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . literal
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_ELSE', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . name
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_ELSE', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . OPEN_PAREN expression CLOSE_PAREN
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_ELSE', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    comprehension = . OPEN_SQUARE linear_comprehension CLOSE_SQUARE
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_ELSE', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    comprehension = . OPEN_CURLY linear_comprehension CLOSE_CURLY
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_ELSE', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression CLOSE_CURLY
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_ELSE', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression KW_IF expression CLOSE_CURLY
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_ELSE', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . LIT_INT
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_ELSE', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . LIT_FLOAT
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_ELSE', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . lit_set
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_ELSE', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . lit_string
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_ELSE', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . lit_list
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_ELSE', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . lit_map
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_ELSE', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . KW_NULL
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_ELSE', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    name = . NAME
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_ELSE', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    lit_set = . OPEN_CURLY expr_list CLOSE_CURLY
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_ELSE', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    lit_string = . DOUBLE_QUOTE_STR
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_ELSE', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    lit_string = . SINGLE_QUOTE_STR
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_ELSE', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    lit_list = . OPEN_SQUARE expr_list CLOSE_SQUARE
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_ELSE', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    lit_map = . OPEN_CURLY map_list CLOSE_CURLY
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_ELSE', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}


  Transitions:
    Symbol: expression -> Node#302
    Symbol: log_and_expr -> Node#51
    Symbol: bit_or_expr -> Node#52
    Symbol: bit_xor_expr -> Node#53
    Symbol: bit_and_expr -> Node#54
    Symbol: equ_expr -> Node#55
    Symbol: comp_expr -> Node#56
    Symbol: math_expr -> Node#57
    Symbol: term -> Node#58
    Symbol: factor -> Node#59
    Symbol: pow_term -> Node#60
    Symbol: OP_MINUS -> Node#61
    Symbol: KW_NOT -> Node#62
    Symbol: inc_term -> Node#63
    Symbol: OP_INC -> Node#64
    Symbol: bottom_val -> Node#65
    Symbol: OP_DEC -> Node#66
    Symbol: comprehension -> Node#67
    Symbol: literal -> Node#68
    Symbol: name -> Node#69
    Symbol: OPEN_PAREN -> Node#70
    Symbol: OPEN_SQUARE -> Node#71
    Symbol: OPEN_CURLY -> Node#72
    Symbol: LIT_INT -> Node#73
    Symbol: LIT_FLOAT -> Node#74
    Symbol: lit_set -> Node#75
    Symbol: lit_string -> Node#76
    Symbol: lit_list -> Node#77
    Symbol: lit_map -> Node#78
    Symbol: KW_NULL -> Node#79
    Symbol: NAME -> Node#80
    Symbol: DOUBLE_QUOTE_STR -> Node#81
    Symbol: SINGLE_QUOTE_STR -> Node#82

Node#292
  Rules:
    assignment = type name assign_op assign_expr .
    LA: {'SEMICOLON'}


Node#293
  Rules:
    var_definition = access_modifier special_mod type NAME . SEMICOLON
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'CLOSE_CURLY', 'TYPE_MAP', 'NAME', 'TYPE_BOOL', 'KW_STATIC', 'TYPE_STR', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'ACC_PUBLIC', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    var_definition = access_modifier special_mod type NAME . OP_ASSIGN expression SEMICOLON
    LA: {'__EMPTY__', 'KW_ABSTRACT', 'CLOSE_CURLY', 'TYPE_MAP', 'NAME', 'TYPE_BOOL', 'KW_STATIC', 'TYPE_STR', 'TYPE_FLOAT', 'TYPE_ARRAY', 'TYPE_LIST', 'ACC_PUBLIC', 'ACC_READONLY', 'ACC_PRIVATE', 'ACC_SHARED', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}


  Transitions:
    Symbol: SEMICOLON -> Node#48
    Symbol: OP_ASSIGN -> Node#49

Node#294
  Rules:
    linear_comprehension = expression KW_FOR name KW_IN expression KW_IF expression .
    LA: {'CLOSE_CURLY', 'CLOSE_SQUARE'}

    expression = expression . KW_OR log_and_expr
    LA: {'CLOSE_CURLY', 'KW_OR', 'CLOSE_SQUARE'}


  Transitions:
    Symbol: KW_OR -> Node#105

Node#295
  Rules:
    comprehension = OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression . CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_CURLY', 'OP_MINUS', 'OP_AND_ASSIGN', 'CLOSE_PAREN', 'OP_XOR_ASSIGN', 'KW_AND', 'KW_OR', 'OP_MOD_ASSIGN', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_ADD_ASSIGN', 'OP_OR_ASSIGN', 'OP_DOT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_NEQ', 'OP_PLUS', 'OP_SUB_ASSIGN', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_ASSIGN', 'KW_ELSE', 'OP_BIT_XOR', 'OP_BIT_OR', 'COMMA', 'OP_BIT_AND', 'OP_GT', 'OP_MUL_ASSIGN', 'KW_TO', 'OP_LTEQ'}

    comprehension = OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression . KW_IF expression CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_CURLY', 'OP_MINUS', 'OP_AND_ASSIGN', 'CLOSE_PAREN', 'OP_XOR_ASSIGN', 'KW_AND', 'KW_OR', 'OP_MOD_ASSIGN', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_ADD_ASSIGN', 'OP_OR_ASSIGN', 'OP_DOT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_NEQ', 'OP_PLUS', 'OP_SUB_ASSIGN', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_ASSIGN', 'KW_ELSE', 'OP_BIT_XOR', 'OP_BIT_OR', 'COMMA', 'OP_BIT_AND', 'OP_GT', 'OP_MUL_ASSIGN', 'KW_TO', 'OP_LTEQ'}

    expression = expression . KW_OR log_and_expr
    LA: {'CLOSE_CURLY', 'KW_OR', 'KW_IF'}


  Transitions:
    Symbol: CLOSE_CURLY -> Node#303
    Symbol: KW_IF -> Node#304
    Symbol: KW_OR -> Node#105

Node#296
  Rules:
    else_statement = KW_ELSE body .
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}


Node#297
  Rules:
    else_statement = KW_ELSE if_statement .
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}


Node#298
  Rules:
    do_while_statement = KW_DO body KW_WHILE expression SEMICOLON .
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}


Node#299
  Rules:
    for_statement = KW_FOR name KW_IN expression body .
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}


Node#300
  Rules:
    for_statement = KW_FOR name KW_IN expression KW_TO . expression body
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    expression = . expression KW_OR log_and_expr
    LA: {'KW_OR', 'OPEN_CURLY'}

    expression = . log_and_expr
    LA: {'KW_OR', 'OPEN_CURLY'}

    log_and_expr = . log_and_expr KW_AND bit_or_expr
    LA: {'KW_AND', 'KW_OR', 'OPEN_CURLY'}

    log_and_expr = . bit_or_expr
    LA: {'KW_AND', 'KW_OR', 'OPEN_CURLY'}

    bit_or_expr = . bit_or_expr OP_BIT_OR bit_xor_expr
    LA: {'KW_AND', 'OP_BIT_OR', 'KW_OR', 'OPEN_CURLY'}

    bit_or_expr = . bit_xor_expr
    LA: {'KW_AND', 'OP_BIT_OR', 'KW_OR', 'OPEN_CURLY'}

    bit_xor_expr = . bit_xor_expr OP_BIT_XOR bit_and_expr
    LA: {'OP_BIT_OR', 'KW_OR', 'OPEN_CURLY', 'KW_AND', 'OP_BIT_XOR'}

    bit_xor_expr = . bit_and_expr
    LA: {'OP_BIT_OR', 'KW_OR', 'OPEN_CURLY', 'KW_AND', 'OP_BIT_XOR'}

    bit_and_expr = . bit_and_expr OP_BIT_AND equ_expr
    LA: {'OP_BIT_OR', 'KW_OR', 'OPEN_CURLY', 'OP_BIT_AND', 'KW_AND', 'OP_BIT_XOR'}

    bit_and_expr = . equ_expr
    LA: {'OP_BIT_OR', 'KW_OR', 'OPEN_CURLY', 'OP_BIT_AND', 'KW_AND', 'OP_BIT_XOR'}

    equ_expr = . equ_expr OP_EQ comp_expr
    LA: {'OP_BIT_OR', 'KW_OR', 'OPEN_CURLY', 'OP_EQ', 'OP_BIT_AND', 'OP_NEQ', 'KW_AND', 'OP_BIT_XOR'}

    equ_expr = . equ_expr OP_NEQ comp_expr
    LA: {'OP_BIT_OR', 'KW_OR', 'OPEN_CURLY', 'OP_EQ', 'OP_BIT_AND', 'OP_NEQ', 'KW_AND', 'OP_BIT_XOR'}

    equ_expr = . comp_expr
    LA: {'OP_BIT_OR', 'KW_OR', 'OPEN_CURLY', 'OP_EQ', 'OP_BIT_AND', 'OP_NEQ', 'KW_AND', 'OP_BIT_XOR'}

    comp_expr = . comp_expr OP_LT math_expr
    LA: {'OP_BIT_AND', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_BIT_OR', 'KW_OR', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    comp_expr = . comp_expr OP_LTEQ math_expr
    LA: {'OP_BIT_AND', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_BIT_OR', 'KW_OR', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    comp_expr = . comp_expr OP_GT math_expr
    LA: {'OP_BIT_AND', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_BIT_OR', 'KW_OR', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    comp_expr = . comp_expr OP_GTEQ math_expr
    LA: {'OP_BIT_AND', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_BIT_OR', 'KW_OR', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    comp_expr = . math_expr
    LA: {'OP_BIT_AND', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_BIT_OR', 'KW_OR', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    math_expr = . math_expr OP_PLUS term
    LA: {'OP_BIT_AND', 'OP_PLUS', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_MINUS', 'OP_BIT_OR', 'KW_OR', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    math_expr = . math_expr OP_MINUS term
    LA: {'OP_BIT_AND', 'OP_PLUS', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_MINUS', 'OP_BIT_OR', 'KW_OR', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    math_expr = . term
    LA: {'OP_BIT_AND', 'OP_PLUS', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_MINUS', 'OP_BIT_OR', 'KW_OR', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    term = . term OP_STAR factor
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_BIT_OR', 'KW_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    term = . term OP_SLASH factor
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_BIT_OR', 'KW_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    term = . term OP_MOD factor
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_BIT_OR', 'KW_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    term = . factor
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_BIT_OR', 'KW_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    factor = . factor OP_POW pow_term
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    factor = . pow_term
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    pow_term = . OP_MINUS inc_term
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    pow_term = . KW_NOT inc_term
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    pow_term = . inc_term
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . OP_INC bottom_val
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . bottom_val OP_INC
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . OP_DEC bottom_val
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . bottom_val OP_DEC
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . bottom_val
    LA: {'OP_BIT_AND', 'OP_NEQ', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    bottom_val = . bottom_val OPEN_PAREN expr_list CLOSE_PAREN
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . bottom_val OPEN_PAREN CLOSE_PAREN
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . bottom_val OP_DOT name
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . bottom_val OPEN_SQUARE expression CLOSE_SQUARE
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . comprehension
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . literal
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . name
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . OPEN_PAREN expression CLOSE_PAREN
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    comprehension = . OPEN_SQUARE linear_comprehension CLOSE_SQUARE
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    comprehension = . OPEN_CURLY linear_comprehension CLOSE_CURLY
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression CLOSE_CURLY
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression KW_IF expression CLOSE_CURLY
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . LIT_INT
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . LIT_FLOAT
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . lit_set
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . lit_string
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . lit_list
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . lit_map
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . KW_NULL
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    name = . NAME
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    lit_set = . OPEN_CURLY expr_list CLOSE_CURLY
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    lit_string = . DOUBLE_QUOTE_STR
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    lit_string = . SINGLE_QUOTE_STR
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    lit_list = . OPEN_SQUARE expr_list CLOSE_SQUARE
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    lit_map = . OPEN_CURLY map_list CLOSE_CURLY
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OPEN_CURLY', 'OP_EQ', 'OP_GT', 'OP_DOT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'OP_BIT_OR', 'KW_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}


  Transitions:
    Symbol: expression -> Node#305
    Symbol: log_and_expr -> Node#51
    Symbol: bit_or_expr -> Node#52
    Symbol: bit_xor_expr -> Node#53
    Symbol: bit_and_expr -> Node#54
    Symbol: equ_expr -> Node#55
    Symbol: comp_expr -> Node#56
    Symbol: math_expr -> Node#57
    Symbol: term -> Node#58
    Symbol: factor -> Node#59
    Symbol: pow_term -> Node#60
    Symbol: OP_MINUS -> Node#61
    Symbol: KW_NOT -> Node#62
    Symbol: inc_term -> Node#63
    Symbol: OP_INC -> Node#64
    Symbol: bottom_val -> Node#65
    Symbol: OP_DEC -> Node#66
    Symbol: comprehension -> Node#67
    Symbol: literal -> Node#68
    Symbol: name -> Node#69
    Symbol: OPEN_PAREN -> Node#70
    Symbol: OPEN_SQUARE -> Node#71
    Symbol: OPEN_CURLY -> Node#72
    Symbol: LIT_INT -> Node#73
    Symbol: LIT_FLOAT -> Node#74
    Symbol: lit_set -> Node#75
    Symbol: lit_string -> Node#76
    Symbol: lit_list -> Node#77
    Symbol: lit_map -> Node#78
    Symbol: KW_NULL -> Node#79
    Symbol: NAME -> Node#80
    Symbol: DOUBLE_QUOTE_STR -> Node#81
    Symbol: SINGLE_QUOTE_STR -> Node#82

Node#301
  Rules:
    catch_statement = KW_CATCH type name . body
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'KW_CATCH', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    body = . OPEN_CURLY statements CLOSE_CURLY
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'KW_CATCH', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    body = . OPEN_CURLY CLOSE_CURLY
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'KW_CATCH', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}


  Transitions:
    Symbol: body -> Node#306
    Symbol: OPEN_CURLY -> Node#192

Node#302
  Rules:
    assign_expr = expression KW_IF expression . KW_ELSE expression
    LA: {'SEMICOLON'}

    expression = expression . KW_OR log_and_expr
    LA: {'KW_OR', 'KW_ELSE'}


  Transitions:
    Symbol: KW_ELSE -> Node#307
    Symbol: KW_OR -> Node#105

Node#303
  Rules:
    comprehension = OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression CLOSE_CURLY .
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_CURLY', 'OP_MINUS', 'OP_AND_ASSIGN', 'CLOSE_PAREN', 'OP_XOR_ASSIGN', 'KW_AND', 'KW_OR', 'OP_MOD_ASSIGN', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_ADD_ASSIGN', 'OP_OR_ASSIGN', 'OP_DOT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_NEQ', 'OP_PLUS', 'OP_SUB_ASSIGN', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_ASSIGN', 'KW_ELSE', 'OP_BIT_XOR', 'OP_BIT_OR', 'COMMA', 'OP_BIT_AND', 'OP_GT', 'OP_MUL_ASSIGN', 'KW_TO', 'OP_LTEQ'}


Node#304
  Rules:
    comprehension = OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression KW_IF . expression CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_CURLY', 'OP_MINUS', 'OP_AND_ASSIGN', 'CLOSE_PAREN', 'OP_XOR_ASSIGN', 'KW_AND', 'KW_OR', 'OP_MOD_ASSIGN', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_ADD_ASSIGN', 'OP_OR_ASSIGN', 'OP_DOT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_NEQ', 'OP_PLUS', 'OP_SUB_ASSIGN', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_ASSIGN', 'KW_ELSE', 'OP_BIT_XOR', 'OP_BIT_OR', 'COMMA', 'OP_BIT_AND', 'OP_GT', 'OP_MUL_ASSIGN', 'KW_TO', 'OP_LTEQ'}

    expression = . expression KW_OR log_and_expr
    LA: {'CLOSE_CURLY', 'KW_OR'}

    expression = . log_and_expr
    LA: {'CLOSE_CURLY', 'KW_OR'}

    log_and_expr = . log_and_expr KW_AND bit_or_expr
    LA: {'KW_AND', 'CLOSE_CURLY', 'KW_OR'}

    log_and_expr = . bit_or_expr
    LA: {'KW_AND', 'CLOSE_CURLY', 'KW_OR'}

    bit_or_expr = . bit_or_expr OP_BIT_OR bit_xor_expr
    LA: {'KW_AND', 'CLOSE_CURLY', 'KW_OR', 'OP_BIT_OR'}

    bit_or_expr = . bit_xor_expr
    LA: {'KW_AND', 'CLOSE_CURLY', 'KW_OR', 'OP_BIT_OR'}

    bit_xor_expr = . bit_xor_expr OP_BIT_XOR bit_and_expr
    LA: {'CLOSE_CURLY', 'KW_OR', 'OP_BIT_OR', 'KW_AND', 'OP_BIT_XOR'}

    bit_xor_expr = . bit_and_expr
    LA: {'CLOSE_CURLY', 'KW_OR', 'OP_BIT_OR', 'KW_AND', 'OP_BIT_XOR'}

    bit_and_expr = . bit_and_expr OP_BIT_AND equ_expr
    LA: {'CLOSE_CURLY', 'KW_OR', 'OP_BIT_OR', 'OP_BIT_AND', 'KW_AND', 'OP_BIT_XOR'}

    bit_and_expr = . equ_expr
    LA: {'CLOSE_CURLY', 'KW_OR', 'OP_BIT_OR', 'OP_BIT_AND', 'KW_AND', 'OP_BIT_XOR'}

    equ_expr = . equ_expr OP_EQ comp_expr
    LA: {'CLOSE_CURLY', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_BIT_AND', 'OP_NEQ', 'KW_AND', 'OP_BIT_XOR'}

    equ_expr = . equ_expr OP_NEQ comp_expr
    LA: {'CLOSE_CURLY', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_BIT_AND', 'OP_NEQ', 'KW_AND', 'OP_BIT_XOR'}

    equ_expr = . comp_expr
    LA: {'CLOSE_CURLY', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_BIT_AND', 'OP_NEQ', 'KW_AND', 'OP_BIT_XOR'}

    comp_expr = . comp_expr OP_LT math_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    comp_expr = . comp_expr OP_LTEQ math_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    comp_expr = . comp_expr OP_GT math_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    comp_expr = . comp_expr OP_GTEQ math_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    comp_expr = . math_expr
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    math_expr = . math_expr OP_PLUS term
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'OP_PLUS', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_MINUS', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    math_expr = . math_expr OP_MINUS term
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'OP_PLUS', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_MINUS', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    math_expr = . term
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'OP_PLUS', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_MINUS', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    term = . term OP_STAR factor
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    term = . term OP_SLASH factor
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    term = . term OP_MOD factor
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    term = . factor
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    factor = . factor OP_POW pow_term
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    factor = . pow_term
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    pow_term = . OP_MINUS inc_term
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    pow_term = . KW_NOT inc_term
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    pow_term = . inc_term
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . OP_INC bottom_val
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . bottom_val OP_INC
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . OP_DEC bottom_val
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . bottom_val OP_DEC
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . bottom_val
    LA: {'CLOSE_CURLY', 'OP_BIT_AND', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    bottom_val = . bottom_val OPEN_PAREN expr_list CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . bottom_val OPEN_PAREN CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . bottom_val OP_DOT name
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . bottom_val OPEN_SQUARE expression CLOSE_SQUARE
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . comprehension
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . literal
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . name
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . OPEN_PAREN expression CLOSE_PAREN
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    comprehension = . OPEN_SQUARE linear_comprehension CLOSE_SQUARE
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    comprehension = . OPEN_CURLY linear_comprehension CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression KW_IF expression CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . LIT_INT
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . LIT_FLOAT
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . lit_set
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . lit_string
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . lit_list
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . lit_map
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . KW_NULL
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    name = . NAME
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    lit_set = . OPEN_CURLY expr_list CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    lit_string = . DOUBLE_QUOTE_STR
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    lit_string = . SINGLE_QUOTE_STR
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    lit_list = . OPEN_SQUARE expr_list CLOSE_SQUARE
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    lit_map = . OPEN_CURLY map_list CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}


  Transitions:
    Symbol: expression -> Node#308
    Symbol: log_and_expr -> Node#51
    Symbol: bit_or_expr -> Node#52
    Symbol: bit_xor_expr -> Node#53
    Symbol: bit_and_expr -> Node#54
    Symbol: equ_expr -> Node#55
    Symbol: comp_expr -> Node#56
    Symbol: math_expr -> Node#57
    Symbol: term -> Node#58
    Symbol: factor -> Node#59
    Symbol: pow_term -> Node#60
    Symbol: OP_MINUS -> Node#61
    Symbol: KW_NOT -> Node#62
    Symbol: inc_term -> Node#63
    Symbol: OP_INC -> Node#64
    Symbol: bottom_val -> Node#65
    Symbol: OP_DEC -> Node#66
    Symbol: comprehension -> Node#67
    Symbol: literal -> Node#68
    Symbol: name -> Node#69
    Symbol: OPEN_PAREN -> Node#70
    Symbol: OPEN_SQUARE -> Node#71
    Symbol: OPEN_CURLY -> Node#72
    Symbol: LIT_INT -> Node#73
    Symbol: LIT_FLOAT -> Node#74
    Symbol: lit_set -> Node#75
    Symbol: lit_string -> Node#76
    Symbol: lit_list -> Node#77
    Symbol: lit_map -> Node#78
    Symbol: KW_NULL -> Node#79
    Symbol: NAME -> Node#80
    Symbol: DOUBLE_QUOTE_STR -> Node#81
    Symbol: SINGLE_QUOTE_STR -> Node#82

Node#305
  Rules:
    for_statement = KW_FOR name KW_IN expression KW_TO expression . body
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    expression = expression . KW_OR log_and_expr
    LA: {'KW_OR', 'OPEN_CURLY'}

    body = . OPEN_CURLY statements CLOSE_CURLY
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}

    body = . OPEN_CURLY CLOSE_CURLY
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}


  Transitions:
    Symbol: body -> Node#309
    Symbol: KW_OR -> Node#105
    Symbol: OPEN_CURLY -> Node#192

Node#306
  Rules:
    catch_statement = KW_CATCH type name body .
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'KW_CATCH', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}


Node#307
  Rules:
    assign_expr = expression KW_IF expression KW_ELSE . expression
    LA: {'SEMICOLON'}

    expression = . expression KW_OR log_and_expr
    LA: {'KW_OR', 'SEMICOLON'}

    expression = . log_and_expr
    LA: {'KW_OR', 'SEMICOLON'}

    log_and_expr = . log_and_expr KW_AND bit_or_expr
    LA: {'KW_OR', 'SEMICOLON', 'KW_AND'}

    log_and_expr = . bit_or_expr
    LA: {'KW_OR', 'SEMICOLON', 'KW_AND'}

    bit_or_expr = . bit_or_expr OP_BIT_OR bit_xor_expr
    LA: {'KW_OR', 'SEMICOLON', 'OP_BIT_OR', 'KW_AND'}

    bit_or_expr = . bit_xor_expr
    LA: {'KW_OR', 'SEMICOLON', 'OP_BIT_OR', 'KW_AND'}

    bit_xor_expr = . bit_xor_expr OP_BIT_XOR bit_and_expr
    LA: {'KW_OR', 'OP_BIT_OR', 'KW_AND', 'SEMICOLON', 'OP_BIT_XOR'}

    bit_xor_expr = . bit_and_expr
    LA: {'KW_OR', 'OP_BIT_OR', 'KW_AND', 'SEMICOLON', 'OP_BIT_XOR'}

    bit_and_expr = . bit_and_expr OP_BIT_AND equ_expr
    LA: {'KW_OR', 'OP_BIT_OR', 'OP_BIT_AND', 'KW_AND', 'SEMICOLON', 'OP_BIT_XOR'}

    bit_and_expr = . equ_expr
    LA: {'KW_OR', 'OP_BIT_OR', 'OP_BIT_AND', 'KW_AND', 'SEMICOLON', 'OP_BIT_XOR'}

    equ_expr = . equ_expr OP_EQ comp_expr
    LA: {'OP_NEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_BIT_AND', 'KW_AND', 'SEMICOLON', 'OP_BIT_XOR'}

    equ_expr = . equ_expr OP_NEQ comp_expr
    LA: {'OP_NEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_BIT_AND', 'KW_AND', 'SEMICOLON', 'OP_BIT_XOR'}

    equ_expr = . comp_expr
    LA: {'OP_NEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_BIT_AND', 'KW_AND', 'SEMICOLON', 'OP_BIT_XOR'}

    comp_expr = . comp_expr OP_LT math_expr
    LA: {'OP_BIT_AND', 'KW_AND', 'SEMICOLON', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    comp_expr = . comp_expr OP_LTEQ math_expr
    LA: {'OP_BIT_AND', 'KW_AND', 'SEMICOLON', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    comp_expr = . comp_expr OP_GT math_expr
    LA: {'OP_BIT_AND', 'KW_AND', 'SEMICOLON', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    comp_expr = . comp_expr OP_GTEQ math_expr
    LA: {'OP_BIT_AND', 'KW_AND', 'SEMICOLON', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    comp_expr = . math_expr
    LA: {'OP_BIT_AND', 'KW_AND', 'SEMICOLON', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    math_expr = . math_expr OP_PLUS term
    LA: {'OP_BIT_AND', 'OP_PLUS', 'KW_AND', 'SEMICOLON', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'OP_MINUS', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    math_expr = . math_expr OP_MINUS term
    LA: {'OP_BIT_AND', 'OP_PLUS', 'KW_AND', 'SEMICOLON', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'OP_MINUS', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    math_expr = . term
    LA: {'OP_BIT_AND', 'OP_PLUS', 'KW_AND', 'SEMICOLON', 'OP_LTEQ', 'OP_BIT_XOR', 'OP_GTEQ', 'OP_MINUS', 'KW_OR', 'OP_BIT_OR', 'OP_EQ', 'OP_GT', 'OP_NEQ', 'OP_LT'}

    term = . term OP_STAR factor
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    term = . term OP_SLASH factor
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    term = . term OP_MOD factor
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    term = . factor
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    factor = . factor OP_POW pow_term
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    factor = . pow_term
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    pow_term = . OP_MINUS inc_term
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    pow_term = . KW_NOT inc_term
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    pow_term = . inc_term
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . OP_INC bottom_val
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . bottom_val OP_INC
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . OP_DEC bottom_val
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . bottom_val OP_DEC
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    inc_term = . bottom_val
    LA: {'OP_BIT_AND', 'SEMICOLON', 'OP_NEQ', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_STAR', 'OP_MOD', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_PLUS', 'OP_LT', 'OP_SLASH'}

    bottom_val = . bottom_val OPEN_PAREN expr_list CLOSE_PAREN
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . bottom_val OPEN_PAREN CLOSE_PAREN
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . bottom_val OP_DOT name
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . bottom_val OPEN_SQUARE expression CLOSE_SQUARE
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . comprehension
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . literal
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . name
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    bottom_val = . OPEN_PAREN expression CLOSE_PAREN
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    comprehension = . OPEN_SQUARE linear_comprehension CLOSE_SQUARE
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    comprehension = . OPEN_CURLY linear_comprehension CLOSE_CURLY
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression CLOSE_CURLY
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    comprehension = . OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression KW_IF expression CLOSE_CURLY
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . LIT_INT
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . LIT_FLOAT
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . lit_set
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . lit_string
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . lit_list
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . lit_map
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    literal = . KW_NULL
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    name = . NAME
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    lit_set = . OPEN_CURLY expr_list CLOSE_CURLY
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    lit_string = . DOUBLE_QUOTE_STR
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    lit_string = . SINGLE_QUOTE_STR
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    lit_list = . OPEN_SQUARE expr_list CLOSE_SQUARE
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}

    lit_map = . OPEN_CURLY map_list CLOSE_CURLY
    LA: {'OP_LT', 'OP_BIT_AND', 'OP_PLUS', 'SEMICOLON', 'OP_INC', 'OPEN_SQUARE', 'OP_DOT', 'OP_EQ', 'OP_GT', 'OP_MINUS', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'KW_AND', 'OP_LTEQ', 'OP_GTEQ', 'OP_BIT_XOR', 'OP_POW', 'KW_OR', 'OP_BIT_OR', 'OP_NEQ', 'OP_MOD', 'OP_SLASH'}


  Transitions:
    Symbol: expression -> Node#310
    Symbol: log_and_expr -> Node#51
    Symbol: bit_or_expr -> Node#52
    Symbol: bit_xor_expr -> Node#53
    Symbol: bit_and_expr -> Node#54
    Symbol: equ_expr -> Node#55
    Symbol: comp_expr -> Node#56
    Symbol: math_expr -> Node#57
    Symbol: term -> Node#58
    Symbol: factor -> Node#59
    Symbol: pow_term -> Node#60
    Symbol: OP_MINUS -> Node#61
    Symbol: KW_NOT -> Node#62
    Symbol: inc_term -> Node#63
    Symbol: OP_INC -> Node#64
    Symbol: bottom_val -> Node#65
    Symbol: OP_DEC -> Node#66
    Symbol: comprehension -> Node#67
    Symbol: literal -> Node#68
    Symbol: name -> Node#69
    Symbol: OPEN_PAREN -> Node#70
    Symbol: OPEN_SQUARE -> Node#71
    Symbol: OPEN_CURLY -> Node#72
    Symbol: LIT_INT -> Node#73
    Symbol: LIT_FLOAT -> Node#74
    Symbol: lit_set -> Node#75
    Symbol: lit_string -> Node#76
    Symbol: lit_list -> Node#77
    Symbol: lit_map -> Node#78
    Symbol: KW_NULL -> Node#79
    Symbol: NAME -> Node#80
    Symbol: DOUBLE_QUOTE_STR -> Node#81
    Symbol: SINGLE_QUOTE_STR -> Node#82

Node#308
  Rules:
    comprehension = OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression KW_IF expression . CLOSE_CURLY
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_CURLY', 'OP_MINUS', 'OP_AND_ASSIGN', 'CLOSE_PAREN', 'OP_XOR_ASSIGN', 'KW_AND', 'KW_OR', 'OP_MOD_ASSIGN', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_ADD_ASSIGN', 'OP_OR_ASSIGN', 'OP_DOT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_NEQ', 'OP_PLUS', 'OP_SUB_ASSIGN', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_ASSIGN', 'KW_ELSE', 'OP_BIT_XOR', 'OP_BIT_OR', 'COMMA', 'OP_BIT_AND', 'OP_GT', 'OP_MUL_ASSIGN', 'KW_TO', 'OP_LTEQ'}

    expression = expression . KW_OR log_and_expr
    LA: {'CLOSE_CURLY', 'KW_OR'}


  Transitions:
    Symbol: CLOSE_CURLY -> Node#311
    Symbol: KW_OR -> Node#105

Node#309
  Rules:
    for_statement = KW_FOR name KW_IN expression KW_TO expression body .
    LA: {'TYPE_MAP', 'KW_WHILE', 'CLOSE_CURLY', 'NAME', 'TYPE_BOOL', 'KW_DO', 'TYPE_STR', 'LIT_FLOAT', 'TYPE_FLOAT', 'KW_FOR', 'SINGLE_QUOTE_STR', 'OPEN_SQUARE', 'OPEN_CURLY', 'KW_IF', 'OP_INC', 'TYPE_ARRAY', 'OP_MINUS', 'KW_RETURN', 'TYPE_LIST', 'KW_NOT', 'LIT_INT', 'OPEN_PAREN', 'OP_DEC', 'DOUBLE_QUOTE_STR', 'KW_THROW', 'KW_TRY', 'TYPE_SET', 'TYPE_INT', 'KW_NULL'}


Node#310
  Rules:
    assign_expr = expression KW_IF expression KW_ELSE expression .
    LA: {'SEMICOLON'}

    expression = expression . KW_OR log_and_expr
    LA: {'KW_OR', 'SEMICOLON'}


  Transitions:
    Symbol: KW_OR -> Node#105

Node#311
  Rules:
    comprehension = OPEN_CURLY expression COLON expression KW_FOR name KW_IN expression KW_IF expression CLOSE_CURLY .
    LA: {'CLOSE_CURLY', 'COLON', 'SEMICOLON', 'CLOSE_SQUARE', 'KW_FOR', 'OP_INC', 'OPEN_CURLY', 'OP_MINUS', 'OP_AND_ASSIGN', 'CLOSE_PAREN', 'OP_XOR_ASSIGN', 'KW_AND', 'KW_OR', 'OP_MOD_ASSIGN', 'OP_MOD', 'OP_POW', 'OP_LT', 'OP_SLASH', 'OP_ADD_ASSIGN', 'OP_OR_ASSIGN', 'OP_DOT', 'OP_DEC', 'OPEN_PAREN', 'OP_STAR', 'OP_DIV_ASSIGN', 'OP_GTEQ', 'OP_NEQ', 'OP_PLUS', 'OP_SUB_ASSIGN', 'OPEN_SQUARE', 'KW_IF', 'OP_EQ', 'OP_ASSIGN', 'KW_ELSE', 'OP_BIT_XOR', 'OP_BIT_OR', 'COMMA', 'OP_BIT_AND', 'OP_GT', 'OP_MUL_ASSIGN', 'KW_TO', 'OP_LTEQ'}


