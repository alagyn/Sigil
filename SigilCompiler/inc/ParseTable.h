#pragma once
/*******
This file was generated by ParseTableGen, do not edit
*******/
#include <vector>
#include <string>
#include <map>

#include <boost/regex.hpp>

namespace sigil {

enum class Action
{
    Error,
    Shift,
    Reduce,
    Goto,
    Accept
};

enum class Symbol {
    PROGRAM,
    stmt,
    semicolon,
    open_curly,
    close_curly,
    open_paren,
    close_paren,
    equals_sign,
    pound,
    name,
    integer,
    __EOF__
};

const std::map<Symbol, std::string> TERMINAL_LOOKUP = {
    {Symbol::semicolon, "semicolon"},
    {Symbol::open_curly, "open_curly"},
    {Symbol::close_curly, "close_curly"},
    {Symbol::open_paren, "open_paren"},
    {Symbol::close_paren, "close_paren"},
    {Symbol::equals_sign, "equals_sign"},
    {Symbol::pound, "pound"},
    {Symbol::name, "name"},
    {Symbol::integer, "integer"},
    {Symbol::__EOF__, "__EOF__"}};

typedef struct
{
public:
    Symbol id;
    boost::regex re;
} Terminal;

const std::vector<Terminal> TERMINALS = {
    {Symbol::semicolon, boost::regex(";")},
    {Symbol::open_curly, boost::regex("{")},
    {Symbol::close_curly, boost::regex("}")},
    {Symbol::open_paren, boost::regex("\\(")},
    {Symbol::close_paren, boost::regex("\\)")},
    {Symbol::equals_sign, boost::regex("=")},
    {Symbol::pound, boost::regex("#")},
    {Symbol::name, boost::regex("[a-zA-Z][a-zA-Z0-9_]*")},
    {Symbol::integer, boost::regex("[1-9][0-9]*")}
};

typedef struct
{
    Action action;
    int state;
} ParseAction;

const ParseAction PARSE_TABLE[9][12] = {
{ {Action::Error, 0}, {Action::Goto, 1}, {Action::Error, 0}, {Action::Shift, 3}, {Action::Error, 0}, {Action::Error, 0}, {Action::Error, 0}, {Action::Error, 0}, {Action::Error, 0}, {Action::Shift, 2}, {Action::Error, 0}, {Action::Accept, 0} },
{ {Action::Error, 0}, {Action::Error, 0}, {Action::Error, 0}, {Action::Error, 0}, {Action::Error, 0}, {Action::Error, 0}, {Action::Error, 0}, {Action::Error, 0}, {Action::Error, 0}, {Action::Error, 0}, {Action::Error, 0}, {Action::Reduce, 0} },
{ {Action::Error, 0}, {Action::Error, 0}, {Action::Error, 0}, {Action::Error, 0}, {Action::Error, 0}, {Action::Error, 0}, {Action::Error, 0}, {Action::Shift, 4}, {Action::Error, 0}, {Action::Error, 0}, {Action::Error, 0}, {Action::Error, 0} },
{ {Action::Error, 0}, {Action::Error, 0}, {Action::Error, 0}, {Action::Error, 0}, {Action::Error, 0}, {Action::Error, 0}, {Action::Error, 0}, {Action::Error, 0}, {Action::Error, 0}, {Action::Error, 0}, {Action::Shift, 5}, {Action::Error, 0} },
{ {Action::Error, 0}, {Action::Error, 0}, {Action::Error, 0}, {Action::Error, 0}, {Action::Error, 0}, {Action::Error, 0}, {Action::Error, 0}, {Action::Error, 0}, {Action::Error, 0}, {Action::Error, 0}, {Action::Shift, 6}, {Action::Error, 0} },
{ {Action::Error, 0}, {Action::Error, 0}, {Action::Error, 0}, {Action::Error, 0}, {Action::Shift, 7}, {Action::Error, 0}, {Action::Error, 0}, {Action::Error, 0}, {Action::Error, 0}, {Action::Error, 0}, {Action::Error, 0}, {Action::Error, 0} },
{ {Action::Error, 0}, {Action::Error, 0}, {Action::Shift, 8}, {Action::Error, 0}, {Action::Error, 0}, {Action::Error, 0}, {Action::Error, 0}, {Action::Error, 0}, {Action::Error, 0}, {Action::Error, 0}, {Action::Error, 0}, {Action::Error, 0} },
{ {Action::Error, 0}, {Action::Error, 0}, {Action::Error, 0}, {Action::Error, 0}, {Action::Error, 0}, {Action::Error, 0}, {Action::Error, 0}, {Action::Error, 0}, {Action::Error, 0}, {Action::Error, 0}, {Action::Error, 0}, {Action::Reduce, 0} },
{ {Action::Error, 0}, {Action::Error, 0}, {Action::Error, 0}, {Action::Error, 0}, {Action::Error, 0}, {Action::Error, 0}, {Action::Error, 0}, {Action::Error, 0}, {Action::Error, 0}, {Action::Error, 0}, {Action::Error, 0}, {Action::Reduce, 0} }
};
}
