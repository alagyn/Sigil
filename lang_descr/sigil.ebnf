# Char declarations
semicolon = ";";
open_curly = "{";
close_curly = "}";
open_paren = "\(";
close_paren = "\)";
open_square_bracket = "\[";
close_square_bracket = "\]";
comma = ",";

# Operators
equals_sign = "=";
plus_sign = "\+";
minus_sign = "-";
star_sign = "\*";


# Keywords
kw_for = "for";
kw_in = "in";
kw_if = "if";

kw_class = "class";
kw_private = "private";

# TODO built-in types?

# Literals
lit_integer = '[1-9]\d*';
lit_float = "\d+.\d+"; # TODO scientific notation?

double_quote_string = '"([^"]|(\\"))*"';
single_quote_string = "'([^']|(\\'))*'";
lit_string = double_quote_string;
lit_string = single_quote_string;

name = "[a-zA-Z][a-zA-Z0-9_]*";

program = definition;
program = program;

definition = func_definition;
# definition = var_definition;
# definition = class_definition;
definition = EMPTY;

func_definition = name name open_paren arg_def_list 
    close_paren open_curly statement close_curly;

# Argument definition list
arg_def_list = name name rest_of_args;
rest_of_args = comma name name rest_of_args;

statement = statement statement;
statement = EMPTY;

statement = assignment;

assignment = optional_type name equals_sign expression semicolon;

optional_type = name;
optional_type = EMPTY;

expression = name;

