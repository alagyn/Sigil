# The starting rule, must be first
program
    = definition
    | program;

# Char declarations
SEMICOLON = ";";
OPEN_CURLY = "{";
CLOSE_CURLY = "}";
OPEN_PAREN = "\(";
CLOSE_PAREN = "\)";
OPEN_SQUARE = "\[";
CLOSE_SQUARE = "\]";
COMMA = ",";

# Operators
OP_EQUALS = "=";
OP_PLUS = "\+";
OP_MINUS = "-";
OP_STAR = "\*";

# Keywords
KW_FOR = "for";
KW_IN = "in";
KW_IF = "if";
KW_ELSE = "else";
KW_RETURN = "return";

KW_CLASS = "class";
KW_PRIVATE = "private";

# Literals
LIT_INTEGER = '[1-9]\d*';
LIT_FLOAT = "\d+.\d+"; # TODO scientific notation?

DOUBLE_QUOTE_STR = '"([^"]|(\\"))*"';
SINGLE_QUOTE_STR = "'([^']|(\\'))*'";
lit_string
    = DOUBLE_QUOTE_STR
    | SINGLE_QUOTE_STR;

NAME = "[a-zA-Z][a-zA-Z0-9_]*";

# type names
TYPE_ARRAY = "array";
TYPE_LIST = "list";
TYPE_MAP = "map";
TYPE_SET = "set";

type
    = TYPE_ARRAY
    | TYPE_LIST
    | TYPE_MAP
    | TYPE_SET
    | NAME;

definition
    = func_definition
    #| var_definition;
    #| class_definition;
    | EMPTY
    ;

func_definition = type NAME OPEN_PAREN arg_definitions CLOSE_PAREN OPEN_CURLY statements CLOSE_CURLY;
arg_definitions
    = argument
    | argument COMMA argument
    | EMPTY
    ;

argument = type NAME default_value;
# TODO is expression the right thing here? The value should be evaluatable at compile time
default_value
    = OP_EQUALS expression
    | EMPTY
    ;

statements
    = statement
    | statement statements # Recursion
    | EMPTY
    ;

statement
    = statement_body SEMICOLON # This enforces semicolons for all simple statements
    | if_statement
    ;


statement_body
    = assignment
    | return_statement
    | expression
    ;

if_statement = KW_IF expression OPEN_CURLY statements CLOSE_CURLY else_statement;
else_statement
    = KW_ELSE OPEN_CURLY statements CLOSE_CURLY
    | KW_ELSE if_statement; # This will recurse for more else-ifs

return_statement = KW_RETURN expression;

assignment = optional_type NAME OP_EQUALS expression;

optional_type
    = type
    | EMPTY;

expression
    = function_call
    | NAME
    ;

function_call = name OPEN_PAREN args CLOSE_PAREN;
args
    = expression
    | expression COMMA args
    | EMPTY
    ;

