# Char declarations
semicolon = ";";
open_curly = "{";
close_curly = "}";
open_paren = "\(";
close_paren = "\)";
open_square_bracket = "\[";
close_square_bracket = "\]";
comma = ",";

# Operators
equals_sign = "=";
plus_sign = "\+";
minus_sign = "-";
star_sign = "\*";

# type names
type_array = "array";
type_list = "list";
type_map = "map";
type_set = "set";

type
    = type_array
    | type_list
    | type_map
    | type_set
    | name;

# Keywords
kw_for = "for";
kw_in = "in";
kw_if = "if";
kw_return = "return";

kw_class = "class";
kw_private = "private";

# Literals
lit_integer = '[1-9]\d*';
lit_float = "\d+.\d+"; # TODO scientific notation?

double_quote_string = '"([^"]|(\\"))*"';
single_quote_string = "'([^']|(\\'))*'";
lit_string
    = double_quote_string
    | single_quote_string;

name = "[a-zA-Z][a-zA-Z0-9_]*";

program 
    = definition
    | program;

definition
    = func_definition
    #| var_definition;
    #| class_definition;
    | EMPTY;

func_definition = type name open_paren arguments close_paren open_curly statements close_curly;
arguments
    = argument
    | argument comma argument
    | EMTPY;

argument = type name default_value;
# TODO is expression the right thing here? The value should be evaluatable at compile time
default_value
    = equals_sign expression
    | EMPTY;

statements
    = statement statement
    | EMPTY;


statement = statement_body semicolon; # This enforces semicolons for all statements

statement_body
    = assignment
    | if_statement
    | return_statement;

if_statement = kw_if expression;

return_statement = kw_return expression;

assignment = optional_type name equals_sign expression semicolon;

optional_type
    = name
    | EMPTY;



expression = name;

