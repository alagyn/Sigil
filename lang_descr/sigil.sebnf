# The starting rule, must be first
program
    = definition
    | program;

# Char declarations
SEMICOLON = ";";
OPEN_CURLY = "{";
CLOSE_CURLY = "}";
OPEN_PAREN = "\(";
CLOSE_PAREN = "\)";
OPEN_SQUARE = "\[";
CLOSE_SQUARE = "\]";
COMMA = ",";

# Operators
OP_EQUALS = "=";
OP_PLUS = "\+";
OP_MINUS = "-";
OP_STAR = "\*";

# Keywords
KW_FOR = "for";
KW_IN = "in";
KW_IF = "if";
KW_ELSE = "else";
KW_RETURN = "return";

KW_CLASS = "class";
KW_PRIVATE = "private";

# Literals
LIT_INTEGER = '[1-9]\d*';
LIT_FLOAT = "\d+.\d+"; # TODO scientific notation?

DOUBLE_QUOTE_STR = '"([^"]|(\\"))*"';
SINGLE_QUOTE_STR = "'([^']|(\\'))*'";
lit_string
    = DOUBLE_QUOTE_STR
    | SINGLE_QUOTE_STR;

NAME = "[a-zA-Z][a-zA-Z0-9_]*";

# type names
TYPE_ARRAY = "array";
TYPE_LIST = "list";
TYPE_MAP = "map";
TYPE_SET = "set";

type
    = TYPE_ARRAY
    | TYPE_LIST
    | TYPE_MAP
    | TYPE_SET
    | NAME;

definition
    = func_definition
    #| var_definition;
    #| class_definition;
    | EMPTY;

func_definition = type NAME OPEN_PAREN arguments CLOSE_PAREN OPEN_CURLY statements CLOSE_CURLY;
arguments
    = argument
    | argument COMMA argument
    | EMPTY;

argument = type NAME default_value;
# TODO is expression the right thing here? The value should be evaluatable at compile time
default_value
    = OP_EQUALS expression
    | EMPTY;

statements
    = statement
    | statement statements # Recursion
    | EMPTY;

statement = statement_body SEMICOLON; # This enforces semicolons for all statements


statement_body
    = assignment
    | if_statement
    | return_statement;

if_statement = KW_IF expression;

return_statement = KW_RETURN expression;

assignment = optional_type NAME OP_EQUALS expression SEMICOLON;

optional_type
    = NAME
    | EMPTY;

expression = NAME;

