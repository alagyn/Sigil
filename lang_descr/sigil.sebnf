# The starting rule, must be first
program = definitions;
definitions
    = definition
    | definition definitions
    ;

# Char declarations
SEMICOLON = ";";
OPEN_CURLY = "{";
CLOSE_CURLY = "}";
OPEN_PAREN = "\(";
CLOSE_PAREN = "\)";
OPEN_SQUARE = "\[";
CLOSE_SQUARE = "\]";
COMMA = ",";
COLON = ":";

# Operators
OP_EQUALS = "=";
OP_PLUS = "\+";
OP_MINUS = "-";
OP_STAR = "\*";
OP_SLASH = "/";
OP_POW = "\*\*";
OP_DOT = '\.';
OP_LT = "<";
OP_GT = ">";

# Keywords
KW_FOR = "for";
KW_IN = "in";
KW_IF = "if";
KW_ELSE = "else";
KW_RETURN = "return";
KW_NOT = "not";

KW_CLASS = "class";
KW_PRIVATE = "private";

# Literals
LIT_INTEGER = '[1-9]\d*';
LIT_FLOAT = "\d+.\d+"; # TODO scientific notation?

DOUBLE_QUOTE_STR = '"([^"]|(\\"))*"';
SINGLE_QUOTE_STR = "'([^']|(\\'))*'";
lit_string
    = DOUBLE_QUOTE_STR
    | SINGLE_QUOTE_STR;

literal
    = LIT_INTEGER
    | LIT_FLOAT
    | lit_string
    ;

# type names
TYPE_ARRAY = "array";
TYPE_LIST = "list";
TYPE_MAP = "map";
TYPE_SET = "set";
TYPE_STR = "str";
TYPE_INT = "int";
TYPE_FLOAT = "float";

type
    = TYPE_ARRAY OP_LT type OP_GT
    | TYPE_LIST OP_LT type OP_GT
    | TYPE_MAP OP_LT type COLON type OP_GT
    | TYPE_SET OP_LT type OP_GT
    | TYPE_STR
    | TYPE_INT
    | TYPE_FLOAT
    | NAME
    ;

# This goes after all the builtins
NAME = "[a-zA-Z][a-zA-Z0-9_]*";

definition
    = func_definition
    #| var_definition;
    #| class_definition;
    ;

# Generic curly bracket body
body 
    = OPEN_CURLY statements CLOSE_CURLY
    | OPEN_CURLY CLOSE_CURLY # Allow for no statements without needing an epsilon
    ;

func_definition 
    = type NAME OPEN_PAREN arg_definitions CLOSE_PAREN body
    | type NAME OPEN_PAREN CLOSE_PAREN body
    ;

arg_definitions
    = argument
    | argument COMMA arg_definitions
    ;

argument = type NAME default_value;
default_value
    = OP_EQUALS expression # TODO is expression the right thing here? The value should be evaluatable at compile time
    | EMPTY
    ;

statements
    = statement
    | statements statement # Recursion
    ;

statement
    = statement_body SEMICOLON # This enforces semicolons for all simple statements
    | body # Allow arbitrary scopes
    | if_statement
    ;


statement_body
    = assignment
    | return_statement
    | expression
    ;

if_statement = KW_IF expression body else_statement;
else_statement
    = KW_ELSE body
    | KW_ELSE if_statement # This will recurse for more else-ifs
    ;

return_statement = KW_RETURN expression;

assignment
    = NAME OP_EQUALS assign_expr
    | type NAME OP_EQUALS assign_expr
    ;

assign_expr
    = expression
    | expression KW_IF expression KW_ELSE expression # x = 12 if b else 15;
    ;

# Expression, defines the order of operations
expression
    = expression OP_PLUS term
    | expression OP_MINUS term
    | term
    ;
term
    = term OP_STAR factor
    | term OP_SLASH factor
    | factor
    ;
factor
    = factor OP_POW pow_term
    | pow_term
    ;
pow_term
    = OP_MINUS pow_term # Negation
    | OPEN_PAREN expression CLOSE_PAREN
    | function_call
    | literal
    | NAME
    ;

function_call = NAME OPEN_PAREN args CLOSE_PAREN;
args
    = expression
    | expression COMMA args
    | EMPTY
    ;

